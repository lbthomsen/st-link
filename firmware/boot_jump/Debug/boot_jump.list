
boot_jump.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000814  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000920  08000920  00010920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000944  08000944  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000944  08000944  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000944  08000944  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000944  08000944  00010944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000948  08000948  00010948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800094c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000958  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000958  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a3d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dfc  00000000  00000000  00022a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e0  00000000  00000000  00023870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00023b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156be  00000000  00000000  00023f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004010  00000000  00000000  000395fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b63f  00000000  00000000  0003d60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e0  00000000  00000000  000b8ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000ceb  00000000  00000000  000b9280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000908 	.word	0x08000908

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000908 	.word	0x08000908

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2214      	movs	r2, #20
 8000152:	2100      	movs	r1, #0
 8000154:	a808      	add	r0, sp, #32
 8000156:	f000 fbcf 	bl	80008f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015a:	2214      	movs	r2, #20
 800015c:	2100      	movs	r1, #0
 800015e:	a801      	add	r0, sp, #4
 8000160:	f000 fbca 	bl	80008f8 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000164:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000166:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800016a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800016c:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000170:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000174:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000178:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800017a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800017c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800017e:	f000 f925 	bl	80003cc <HAL_RCC_OscConfig>
 8000182:	b108      	cbz	r0, 8000188 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000184:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000186:	e7fe      	b.n	8000186 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000188:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800018a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800018e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000192:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000194:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000198:	4621      	mov	r1, r4
 800019a:	a801      	add	r0, sp, #4
 800019c:	f000 faec 	bl	8000778 <HAL_RCC_ClockConfig>
 80001a0:	b108      	cbz	r0, 80001a6 <SystemClock_Config+0x5a>
 80001a2:	b672      	cpsid	i
  while (1)
 80001a4:	e7fe      	b.n	80001a4 <SystemClock_Config+0x58>
}
 80001a6:	b010      	add	sp, #64	; 0x40
 80001a8:	bd10      	pop	{r4, pc}
	...

080001ac <main>:
{
 80001ac:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80001ae:	f000 f891 	bl	80002d4 <HAL_Init>
  SystemClock_Config();
 80001b2:	f7ff ffcb 	bl	800014c <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001b6:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <main+0x34>)
 80001b8:	699a      	ldr	r2, [r3, #24]
 80001ba:	f042 0220 	orr.w	r2, r2, #32
 80001be:	619a      	str	r2, [r3, #24]
 80001c0:	699a      	ldr	r2, [r3, #24]
 80001c2:	f002 0220 	and.w	r2, r2, #32
 80001c6:	9200      	str	r2, [sp, #0]
 80001c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ca:	699a      	ldr	r2, [r3, #24]
 80001cc:	f042 0204 	orr.w	r2, r2, #4
 80001d0:	619a      	str	r2, [r3, #24]
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0304 	and.w	r3, r3, #4
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	9b01      	ldr	r3, [sp, #4]
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x30>
 80001de:	bf00      	nop
 80001e0:	40021000 	.word	0x40021000

080001e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <HAL_MspInit+0x3c>)
{
 80001e6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80001e8:	699a      	ldr	r2, [r3, #24]
 80001ea:	f042 0201 	orr.w	r2, r2, #1
 80001ee:	619a      	str	r2, [r3, #24]
 80001f0:	699a      	ldr	r2, [r3, #24]
 80001f2:	f002 0201 	and.w	r2, r2, #1
 80001f6:	9200      	str	r2, [sp, #0]
 80001f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80001fa:	69da      	ldr	r2, [r3, #28]
 80001fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000200:	61da      	str	r2, [r3, #28]
 8000202:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800020a:	9301      	str	r3, [sp, #4]
 800020c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800020e:	6853      	ldr	r3, [r2, #4]
 8000210:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000218:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800021a:	b002      	add	sp, #8
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40021000 	.word	0x40021000
 8000224:	40010000 	.word	0x40010000

08000228 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000228:	e7fe      	b.n	8000228 <NMI_Handler>

0800022a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800022a:	e7fe      	b.n	800022a <HardFault_Handler>

0800022c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800022c:	e7fe      	b.n	800022c <MemManage_Handler>

0800022e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800022e:	e7fe      	b.n	800022e <BusFault_Handler>

08000230 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000230:	e7fe      	b.n	8000230 <UsageFault_Handler>

08000232 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000232:	4770      	bx	lr

08000234 <DebugMon_Handler>:
 8000234:	4770      	bx	lr

08000236 <PendSV_Handler>:
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000238:	f000 b85e 	b.w	80002f8 <HAL_IncTick>

0800023c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800023c:	4770      	bx	lr
	...

08000240 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000242:	490d      	ldr	r1, [pc, #52]	; (8000278 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000248:	e002      	b.n	8000250 <LoopCopyDataInit>

0800024a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800024c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024e:	3304      	adds	r3, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000254:	d3f9      	bcc.n	800024a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000258:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <LoopFillZerobss+0x22>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800025c:	e001      	b.n	8000262 <LoopFillZerobss>

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000260:	3204      	adds	r2, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000266:	f7ff ffe9 	bl	800023c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800026a:	f000 fb21 	bl	80008b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026e:	f7ff ff9d 	bl	80001ac <main>
  bx lr
 8000272:	4770      	bx	lr
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800027c:	0800094c 	.word	0x0800094c
  ldr r2, =_sbss
 8000280:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000284:	2000002c 	.word	0x2000002c

08000288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC1_2_IRQHandler>
	...

0800028c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800028c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <HAL_InitTick+0x3c>)
{
 8000290:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000292:	7818      	ldrb	r0, [r3, #0]
 8000294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000298:	fbb3 f3f0 	udiv	r3, r3, r0
 800029c:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <HAL_InitTick+0x40>)
 800029e:	6810      	ldr	r0, [r2, #0]
 80002a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80002a4:	f000 f87e 	bl	80003a4 <HAL_SYSTICK_Config>
 80002a8:	4604      	mov	r4, r0
 80002aa:	b958      	cbnz	r0, 80002c4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ac:	2d0f      	cmp	r5, #15
 80002ae:	d809      	bhi.n	80002c4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002b0:	4602      	mov	r2, r0
 80002b2:	4629      	mov	r1, r5
 80002b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002b8:	f000 f842 	bl	8000340 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002bc:	4620      	mov	r0, r4
 80002be:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <HAL_InitTick+0x44>)
 80002c0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002c4:	2001      	movs	r0, #1
 80002c6:	e7fc      	b.n	80002c2 <HAL_InitTick+0x36>
 80002c8:	20000004 	.word	0x20000004
 80002cc:	20000000 	.word	0x20000000
 80002d0:	20000008 	.word	0x20000008

080002d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002d4:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <HAL_Init+0x20>)
{
 80002d6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002d8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002da:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002dc:	f043 0310 	orr.w	r3, r3, #16
 80002e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e2:	f000 f81b 	bl	800031c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002e6:	200f      	movs	r0, #15
 80002e8:	f7ff ffd0 	bl	800028c <HAL_InitTick>
  HAL_MspInit();
 80002ec:	f7ff ff7a 	bl	80001e4 <HAL_MspInit>
}
 80002f0:	2000      	movs	r0, #0
 80002f2:	bd08      	pop	{r3, pc}
 80002f4:	40022000 	.word	0x40022000

080002f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002f8:	4a03      	ldr	r2, [pc, #12]	; (8000308 <HAL_IncTick+0x10>)
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <HAL_IncTick+0x14>)
 80002fc:	6811      	ldr	r1, [r2, #0]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	440b      	add	r3, r1
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20000028 	.word	0x20000028
 800030c:	20000004 	.word	0x20000004

08000310 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <HAL_GetTick+0x8>)
 8000312:	6818      	ldr	r0, [r3, #0]
}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028

0800031c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800031c:	4907      	ldr	r1, [pc, #28]	; (800033c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800031e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000320:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000322:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800032a:	0412      	lsls	r2, r2, #16
 800032c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800032e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000338:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000342:	b530      	push	{r4, r5, lr}
 8000344:	68dc      	ldr	r4, [r3, #12]
 8000346:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800034a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800034e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	2b04      	cmp	r3, #4
 8000352:	bf28      	it	cs
 8000354:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000356:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035c:	bf98      	it	ls
 800035e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000360:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000364:	bf88      	it	hi
 8000366:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000368:	ea21 0303 	bic.w	r3, r1, r3
 800036c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800036e:	fa05 f404 	lsl.w	r4, r5, r4
 8000372:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000376:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037c:	bfac      	ite	ge
 800037e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000382:	4a07      	ldrlt	r2, [pc, #28]	; (80003a0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000388:	b2db      	uxtb	r3, r3
 800038a:	bfab      	itete	ge
 800038c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000390:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	e000ed00 	.word	0xe000ed00
 80003a0:	e000ed14 	.word	0xe000ed14

080003a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a4:	3801      	subs	r0, #1
 80003a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003aa:	d20b      	bcs.n	80003c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b0:	21f0      	movs	r1, #240	; 0xf0
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ba:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003bc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003be:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003c6:	4770      	bx	lr
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80003cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80003d0:	4605      	mov	r5, r0
 80003d2:	b338      	cbz	r0, 8000424 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80003d4:	6803      	ldr	r3, [r0, #0]
 80003d6:	07db      	lsls	r3, r3, #31
 80003d8:	d410      	bmi.n	80003fc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80003da:	682b      	ldr	r3, [r5, #0]
 80003dc:	079f      	lsls	r7, r3, #30
 80003de:	d45e      	bmi.n	800049e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80003e0:	682b      	ldr	r3, [r5, #0]
 80003e2:	0719      	lsls	r1, r3, #28
 80003e4:	f100 8095 	bmi.w	8000512 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80003e8:	682b      	ldr	r3, [r5, #0]
 80003ea:	075a      	lsls	r2, r3, #29
 80003ec:	f100 80c1 	bmi.w	8000572 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80003f0:	69e8      	ldr	r0, [r5, #28]
 80003f2:	2800      	cmp	r0, #0
 80003f4:	f040 812c 	bne.w	8000650 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80003f8:	2000      	movs	r0, #0
 80003fa:	e029      	b.n	8000450 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80003fc:	4c90      	ldr	r4, [pc, #576]	; (8000640 <HAL_RCC_OscConfig+0x274>)
 80003fe:	6863      	ldr	r3, [r4, #4]
 8000400:	f003 030c 	and.w	r3, r3, #12
 8000404:	2b04      	cmp	r3, #4
 8000406:	d007      	beq.n	8000418 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000408:	6863      	ldr	r3, [r4, #4]
 800040a:	f003 030c 	and.w	r3, r3, #12
 800040e:	2b08      	cmp	r3, #8
 8000410:	d10a      	bne.n	8000428 <HAL_RCC_OscConfig+0x5c>
 8000412:	6863      	ldr	r3, [r4, #4]
 8000414:	03de      	lsls	r6, r3, #15
 8000416:	d507      	bpl.n	8000428 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000418:	6823      	ldr	r3, [r4, #0]
 800041a:	039c      	lsls	r4, r3, #14
 800041c:	d5dd      	bpl.n	80003da <HAL_RCC_OscConfig+0xe>
 800041e:	686b      	ldr	r3, [r5, #4]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d1da      	bne.n	80003da <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000424:	2001      	movs	r0, #1
 8000426:	e013      	b.n	8000450 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000428:	686b      	ldr	r3, [r5, #4]
 800042a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800042e:	d112      	bne.n	8000456 <HAL_RCC_OscConfig+0x8a>
 8000430:	6823      	ldr	r3, [r4, #0]
 8000432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000436:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000438:	f7ff ff6a 	bl	8000310 <HAL_GetTick>
 800043c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800043e:	6823      	ldr	r3, [r4, #0]
 8000440:	0398      	lsls	r0, r3, #14
 8000442:	d4ca      	bmi.n	80003da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000444:	f7ff ff64 	bl	8000310 <HAL_GetTick>
 8000448:	1b80      	subs	r0, r0, r6
 800044a:	2864      	cmp	r0, #100	; 0x64
 800044c:	d9f7      	bls.n	800043e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800044e:	2003      	movs	r0, #3
}
 8000450:	b002      	add	sp, #8
 8000452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000456:	b99b      	cbnz	r3, 8000480 <HAL_RCC_OscConfig+0xb4>
 8000458:	6823      	ldr	r3, [r4, #0]
 800045a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800045e:	6023      	str	r3, [r4, #0]
 8000460:	6823      	ldr	r3, [r4, #0]
 8000462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000466:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000468:	f7ff ff52 	bl	8000310 <HAL_GetTick>
 800046c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800046e:	6823      	ldr	r3, [r4, #0]
 8000470:	0399      	lsls	r1, r3, #14
 8000472:	d5b2      	bpl.n	80003da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000474:	f7ff ff4c 	bl	8000310 <HAL_GetTick>
 8000478:	1b80      	subs	r0, r0, r6
 800047a:	2864      	cmp	r0, #100	; 0x64
 800047c:	d9f7      	bls.n	800046e <HAL_RCC_OscConfig+0xa2>
 800047e:	e7e6      	b.n	800044e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000484:	6823      	ldr	r3, [r4, #0]
 8000486:	d103      	bne.n	8000490 <HAL_RCC_OscConfig+0xc4>
 8000488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800048c:	6023      	str	r3, [r4, #0]
 800048e:	e7cf      	b.n	8000430 <HAL_RCC_OscConfig+0x64>
 8000490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000494:	6023      	str	r3, [r4, #0]
 8000496:	6823      	ldr	r3, [r4, #0]
 8000498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800049c:	e7cb      	b.n	8000436 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800049e:	4c68      	ldr	r4, [pc, #416]	; (8000640 <HAL_RCC_OscConfig+0x274>)
 80004a0:	6863      	ldr	r3, [r4, #4]
 80004a2:	f013 0f0c 	tst.w	r3, #12
 80004a6:	d007      	beq.n	80004b8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80004a8:	6863      	ldr	r3, [r4, #4]
 80004aa:	f003 030c 	and.w	r3, r3, #12
 80004ae:	2b08      	cmp	r3, #8
 80004b0:	d110      	bne.n	80004d4 <HAL_RCC_OscConfig+0x108>
 80004b2:	6863      	ldr	r3, [r4, #4]
 80004b4:	03da      	lsls	r2, r3, #15
 80004b6:	d40d      	bmi.n	80004d4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80004b8:	6823      	ldr	r3, [r4, #0]
 80004ba:	079b      	lsls	r3, r3, #30
 80004bc:	d502      	bpl.n	80004c4 <HAL_RCC_OscConfig+0xf8>
 80004be:	692b      	ldr	r3, [r5, #16]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d1af      	bne.n	8000424 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80004c4:	6823      	ldr	r3, [r4, #0]
 80004c6:	696a      	ldr	r2, [r5, #20]
 80004c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80004cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80004d0:	6023      	str	r3, [r4, #0]
 80004d2:	e785      	b.n	80003e0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80004d4:	692a      	ldr	r2, [r5, #16]
 80004d6:	4b5b      	ldr	r3, [pc, #364]	; (8000644 <HAL_RCC_OscConfig+0x278>)
 80004d8:	b16a      	cbz	r2, 80004f6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80004da:	2201      	movs	r2, #1
 80004dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80004de:	f7ff ff17 	bl	8000310 <HAL_GetTick>
 80004e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	079f      	lsls	r7, r3, #30
 80004e8:	d4ec      	bmi.n	80004c4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80004ea:	f7ff ff11 	bl	8000310 <HAL_GetTick>
 80004ee:	1b80      	subs	r0, r0, r6
 80004f0:	2802      	cmp	r0, #2
 80004f2:	d9f7      	bls.n	80004e4 <HAL_RCC_OscConfig+0x118>
 80004f4:	e7ab      	b.n	800044e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80004f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80004f8:	f7ff ff0a 	bl	8000310 <HAL_GetTick>
 80004fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80004fe:	6823      	ldr	r3, [r4, #0]
 8000500:	0798      	lsls	r0, r3, #30
 8000502:	f57f af6d 	bpl.w	80003e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000506:	f7ff ff03 	bl	8000310 <HAL_GetTick>
 800050a:	1b80      	subs	r0, r0, r6
 800050c:	2802      	cmp	r0, #2
 800050e:	d9f6      	bls.n	80004fe <HAL_RCC_OscConfig+0x132>
 8000510:	e79d      	b.n	800044e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000512:	69aa      	ldr	r2, [r5, #24]
 8000514:	4e4a      	ldr	r6, [pc, #296]	; (8000640 <HAL_RCC_OscConfig+0x274>)
 8000516:	4b4b      	ldr	r3, [pc, #300]	; (8000644 <HAL_RCC_OscConfig+0x278>)
 8000518:	b1e2      	cbz	r2, 8000554 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800051a:	2201      	movs	r2, #1
 800051c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000520:	f7ff fef6 	bl	8000310 <HAL_GetTick>
 8000524:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000526:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000528:	079b      	lsls	r3, r3, #30
 800052a:	d50d      	bpl.n	8000548 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800052c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000530:	4b45      	ldr	r3, [pc, #276]	; (8000648 <HAL_RCC_OscConfig+0x27c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	fbb3 f3f2 	udiv	r3, r3, r2
 8000538:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800053a:	bf00      	nop
  }
  while (Delay --);
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	9201      	str	r2, [sp, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1f9      	bne.n	800053a <HAL_RCC_OscConfig+0x16e>
 8000546:	e74f      	b.n	80003e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000548:	f7ff fee2 	bl	8000310 <HAL_GetTick>
 800054c:	1b00      	subs	r0, r0, r4
 800054e:	2802      	cmp	r0, #2
 8000550:	d9e9      	bls.n	8000526 <HAL_RCC_OscConfig+0x15a>
 8000552:	e77c      	b.n	800044e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000554:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000558:	f7ff feda 	bl	8000310 <HAL_GetTick>
 800055c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800055e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000560:	079f      	lsls	r7, r3, #30
 8000562:	f57f af41 	bpl.w	80003e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000566:	f7ff fed3 	bl	8000310 <HAL_GetTick>
 800056a:	1b00      	subs	r0, r0, r4
 800056c:	2802      	cmp	r0, #2
 800056e:	d9f6      	bls.n	800055e <HAL_RCC_OscConfig+0x192>
 8000570:	e76d      	b.n	800044e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000572:	4c33      	ldr	r4, [pc, #204]	; (8000640 <HAL_RCC_OscConfig+0x274>)
 8000574:	69e3      	ldr	r3, [r4, #28]
 8000576:	00d8      	lsls	r0, r3, #3
 8000578:	d424      	bmi.n	80005c4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800057a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	69e3      	ldr	r3, [r4, #28]
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	61e3      	str	r3, [r4, #28]
 8000584:	69e3      	ldr	r3, [r4, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800058e:	4e2f      	ldr	r6, [pc, #188]	; (800064c <HAL_RCC_OscConfig+0x280>)
 8000590:	6833      	ldr	r3, [r6, #0]
 8000592:	05d9      	lsls	r1, r3, #23
 8000594:	d518      	bpl.n	80005c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000596:	68eb      	ldr	r3, [r5, #12]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d126      	bne.n	80005ea <HAL_RCC_OscConfig+0x21e>
 800059c:	6a23      	ldr	r3, [r4, #32]
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80005a4:	f7ff feb4 	bl	8000310 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80005a8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80005ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005ae:	6a23      	ldr	r3, [r4, #32]
 80005b0:	079b      	lsls	r3, r3, #30
 80005b2:	d53f      	bpl.n	8000634 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80005b4:	2f00      	cmp	r7, #0
 80005b6:	f43f af1b 	beq.w	80003f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80005ba:	69e3      	ldr	r3, [r4, #28]
 80005bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80005c0:	61e3      	str	r3, [r4, #28]
 80005c2:	e715      	b.n	80003f0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80005c4:	2700      	movs	r7, #0
 80005c6:	e7e2      	b.n	800058e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80005c8:	6833      	ldr	r3, [r6, #0]
 80005ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80005d0:	f7ff fe9e 	bl	8000310 <HAL_GetTick>
 80005d4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80005d6:	6833      	ldr	r3, [r6, #0]
 80005d8:	05da      	lsls	r2, r3, #23
 80005da:	d4dc      	bmi.n	8000596 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80005dc:	f7ff fe98 	bl	8000310 <HAL_GetTick>
 80005e0:	eba0 0008 	sub.w	r0, r0, r8
 80005e4:	2864      	cmp	r0, #100	; 0x64
 80005e6:	d9f6      	bls.n	80005d6 <HAL_RCC_OscConfig+0x20a>
 80005e8:	e731      	b.n	800044e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005ea:	b9ab      	cbnz	r3, 8000618 <HAL_RCC_OscConfig+0x24c>
 80005ec:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80005ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005f2:	f023 0301 	bic.w	r3, r3, #1
 80005f6:	6223      	str	r3, [r4, #32]
 80005f8:	6a23      	ldr	r3, [r4, #32]
 80005fa:	f023 0304 	bic.w	r3, r3, #4
 80005fe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000600:	f7ff fe86 	bl	8000310 <HAL_GetTick>
 8000604:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000606:	6a23      	ldr	r3, [r4, #32]
 8000608:	0798      	lsls	r0, r3, #30
 800060a:	d5d3      	bpl.n	80005b4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800060c:	f7ff fe80 	bl	8000310 <HAL_GetTick>
 8000610:	1b80      	subs	r0, r0, r6
 8000612:	4540      	cmp	r0, r8
 8000614:	d9f7      	bls.n	8000606 <HAL_RCC_OscConfig+0x23a>
 8000616:	e71a      	b.n	800044e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000618:	2b05      	cmp	r3, #5
 800061a:	6a23      	ldr	r3, [r4, #32]
 800061c:	d103      	bne.n	8000626 <HAL_RCC_OscConfig+0x25a>
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6223      	str	r3, [r4, #32]
 8000624:	e7ba      	b.n	800059c <HAL_RCC_OscConfig+0x1d0>
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	6223      	str	r3, [r4, #32]
 800062c:	6a23      	ldr	r3, [r4, #32]
 800062e:	f023 0304 	bic.w	r3, r3, #4
 8000632:	e7b6      	b.n	80005a2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000634:	f7ff fe6c 	bl	8000310 <HAL_GetTick>
 8000638:	1b80      	subs	r0, r0, r6
 800063a:	4540      	cmp	r0, r8
 800063c:	d9b7      	bls.n	80005ae <HAL_RCC_OscConfig+0x1e2>
 800063e:	e706      	b.n	800044e <HAL_RCC_OscConfig+0x82>
 8000640:	40021000 	.word	0x40021000
 8000644:	42420000 	.word	0x42420000
 8000648:	20000000 	.word	0x20000000
 800064c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000650:	4c2a      	ldr	r4, [pc, #168]	; (80006fc <HAL_RCC_OscConfig+0x330>)
 8000652:	6863      	ldr	r3, [r4, #4]
 8000654:	f003 030c 	and.w	r3, r3, #12
 8000658:	2b08      	cmp	r3, #8
 800065a:	d03e      	beq.n	80006da <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800065c:	2200      	movs	r2, #0
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <HAL_RCC_OscConfig+0x334>)
 8000660:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000662:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000664:	d12c      	bne.n	80006c0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000666:	f7ff fe53 	bl	8000310 <HAL_GetTick>
 800066a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800066c:	6823      	ldr	r3, [r4, #0]
 800066e:	0199      	lsls	r1, r3, #6
 8000670:	d420      	bmi.n	80006b4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000672:	6a2b      	ldr	r3, [r5, #32]
 8000674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000678:	d105      	bne.n	8000686 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800067a:	6862      	ldr	r2, [r4, #4]
 800067c:	68a9      	ldr	r1, [r5, #8]
 800067e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000682:	430a      	orrs	r2, r1
 8000684:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000686:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000688:	6862      	ldr	r2, [r4, #4]
 800068a:	430b      	orrs	r3, r1
 800068c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000690:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8000692:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000694:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <HAL_RCC_OscConfig+0x334>)
 8000698:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800069a:	f7ff fe39 	bl	8000310 <HAL_GetTick>
 800069e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80006a0:	6823      	ldr	r3, [r4, #0]
 80006a2:	019a      	lsls	r2, r3, #6
 80006a4:	f53f aea8 	bmi.w	80003f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80006a8:	f7ff fe32 	bl	8000310 <HAL_GetTick>
 80006ac:	1b40      	subs	r0, r0, r5
 80006ae:	2802      	cmp	r0, #2
 80006b0:	d9f6      	bls.n	80006a0 <HAL_RCC_OscConfig+0x2d4>
 80006b2:	e6cc      	b.n	800044e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80006b4:	f7ff fe2c 	bl	8000310 <HAL_GetTick>
 80006b8:	1b80      	subs	r0, r0, r6
 80006ba:	2802      	cmp	r0, #2
 80006bc:	d9d6      	bls.n	800066c <HAL_RCC_OscConfig+0x2a0>
 80006be:	e6c6      	b.n	800044e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80006c0:	f7ff fe26 	bl	8000310 <HAL_GetTick>
 80006c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80006c6:	6823      	ldr	r3, [r4, #0]
 80006c8:	019b      	lsls	r3, r3, #6
 80006ca:	f57f ae95 	bpl.w	80003f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80006ce:	f7ff fe1f 	bl	8000310 <HAL_GetTick>
 80006d2:	1b40      	subs	r0, r0, r5
 80006d4:	2802      	cmp	r0, #2
 80006d6:	d9f6      	bls.n	80006c6 <HAL_RCC_OscConfig+0x2fa>
 80006d8:	e6b9      	b.n	800044e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80006da:	2801      	cmp	r0, #1
 80006dc:	f43f aeb8 	beq.w	8000450 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80006e0:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80006e2:	6a2a      	ldr	r2, [r5, #32]
 80006e4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80006e8:	4291      	cmp	r1, r2
 80006ea:	f47f ae9b 	bne.w	8000424 <HAL_RCC_OscConfig+0x58>
 80006ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80006f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80006f4:	4293      	cmp	r3, r2
 80006f6:	f43f ae7f 	beq.w	80003f8 <HAL_RCC_OscConfig+0x2c>
 80006fa:	e693      	b.n	8000424 <HAL_RCC_OscConfig+0x58>
 80006fc:	40021000 	.word	0x40021000
 8000700:	42420000 	.word	0x42420000

08000704 <HAL_RCC_GetSysClockFreq>:
{
 8000704:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000708:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800070a:	ac02      	add	r4, sp, #8
 800070c:	f103 0510 	add.w	r5, r3, #16
 8000710:	4622      	mov	r2, r4
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	6859      	ldr	r1, [r3, #4]
 8000716:	3308      	adds	r3, #8
 8000718:	c203      	stmia	r2!, {r0, r1}
 800071a:	42ab      	cmp	r3, r5
 800071c:	4614      	mov	r4, r2
 800071e:	d1f7      	bne.n	8000710 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000720:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8000724:	4911      	ldr	r1, [pc, #68]	; (800076c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000726:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800072a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800072c:	f003 020c 	and.w	r2, r3, #12
 8000730:	2a08      	cmp	r2, #8
 8000732:	d117      	bne.n	8000764 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000734:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000738:	3218      	adds	r2, #24
 800073a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800073c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800073e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000742:	d50c      	bpl.n	800075e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000744:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000748:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800074c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800074e:	3318      	adds	r3, #24
 8000750:	446b      	add	r3, sp
 8000752:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000756:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800075a:	b007      	add	sp, #28
 800075c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_RCC_GetSysClockFreq+0x70>)
 8000760:	4358      	muls	r0, r3
 8000762:	e7fa      	b.n	800075a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000766:	e7f8      	b.n	800075a <HAL_RCC_GetSysClockFreq+0x56>
 8000768:	08000930 	.word	0x08000930
 800076c:	40021000 	.word	0x40021000
 8000770:	007a1200 	.word	0x007a1200
 8000774:	003d0900 	.word	0x003d0900

08000778 <HAL_RCC_ClockConfig>:
{
 8000778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800077c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800077e:	4604      	mov	r4, r0
 8000780:	b910      	cbnz	r0, 8000788 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000782:	2001      	movs	r0, #1
}
 8000784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000788:	4a44      	ldr	r2, [pc, #272]	; (800089c <HAL_RCC_ClockConfig+0x124>)
 800078a:	6813      	ldr	r3, [r2, #0]
 800078c:	f003 0307 	and.w	r3, r3, #7
 8000790:	428b      	cmp	r3, r1
 8000792:	d328      	bcc.n	80007e6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000794:	6821      	ldr	r1, [r4, #0]
 8000796:	078e      	lsls	r6, r1, #30
 8000798:	d430      	bmi.n	80007fc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800079a:	07ca      	lsls	r2, r1, #31
 800079c:	d443      	bmi.n	8000826 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800079e:	4a3f      	ldr	r2, [pc, #252]	; (800089c <HAL_RCC_ClockConfig+0x124>)
 80007a0:	6813      	ldr	r3, [r2, #0]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	42ab      	cmp	r3, r5
 80007a8:	d865      	bhi.n	8000876 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80007aa:	6822      	ldr	r2, [r4, #0]
 80007ac:	4d3c      	ldr	r5, [pc, #240]	; (80008a0 <HAL_RCC_ClockConfig+0x128>)
 80007ae:	f012 0f04 	tst.w	r2, #4
 80007b2:	d16c      	bne.n	800088e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80007b4:	0713      	lsls	r3, r2, #28
 80007b6:	d506      	bpl.n	80007c6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80007b8:	686b      	ldr	r3, [r5, #4]
 80007ba:	6922      	ldr	r2, [r4, #16]
 80007bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80007c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007c4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80007c6:	f7ff ff9d 	bl	8000704 <HAL_RCC_GetSysClockFreq>
 80007ca:	686b      	ldr	r3, [r5, #4]
 80007cc:	4a35      	ldr	r2, [pc, #212]	; (80008a4 <HAL_RCC_ClockConfig+0x12c>)
 80007ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	40d8      	lsrs	r0, r3
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <HAL_RCC_ClockConfig+0x130>)
 80007d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <HAL_RCC_ClockConfig+0x134>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	f7ff fd55 	bl	800028c <HAL_InitTick>
  return HAL_OK;
 80007e2:	2000      	movs	r0, #0
 80007e4:	e7ce      	b.n	8000784 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80007e6:	6813      	ldr	r3, [r2, #0]
 80007e8:	f023 0307 	bic.w	r3, r3, #7
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80007f0:	6813      	ldr	r3, [r2, #0]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d1c3      	bne.n	8000782 <HAL_RCC_ClockConfig+0xa>
 80007fa:	e7cb      	b.n	8000794 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <HAL_RCC_ClockConfig+0x128>)
 80007fe:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000802:	bf1e      	ittt	ne
 8000804:	685a      	ldrne	r2, [r3, #4]
 8000806:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800080a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800080c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800080e:	bf42      	ittt	mi
 8000810:	685a      	ldrmi	r2, [r3, #4]
 8000812:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000816:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	68a0      	ldr	r0, [r4, #8]
 800081c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000820:	4302      	orrs	r2, r0
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	e7b9      	b.n	800079a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000826:	6862      	ldr	r2, [r4, #4]
 8000828:	4e1d      	ldr	r6, [pc, #116]	; (80008a0 <HAL_RCC_ClockConfig+0x128>)
 800082a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800082e:	d11a      	bne.n	8000866 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000830:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000834:	d0a5      	beq.n	8000782 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000836:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000838:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800083c:	f023 0303 	bic.w	r3, r3, #3
 8000840:	4313      	orrs	r3, r2
 8000842:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000844:	f7ff fd64 	bl	8000310 <HAL_GetTick>
 8000848:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800084a:	6873      	ldr	r3, [r6, #4]
 800084c:	6862      	ldr	r2, [r4, #4]
 800084e:	f003 030c 	and.w	r3, r3, #12
 8000852:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000856:	d0a2      	beq.n	800079e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000858:	f7ff fd5a 	bl	8000310 <HAL_GetTick>
 800085c:	1bc0      	subs	r0, r0, r7
 800085e:	4540      	cmp	r0, r8
 8000860:	d9f3      	bls.n	800084a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000862:	2003      	movs	r0, #3
 8000864:	e78e      	b.n	8000784 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000866:	2a02      	cmp	r2, #2
 8000868:	d102      	bne.n	8000870 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800086a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800086e:	e7e1      	b.n	8000834 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000870:	f013 0f02 	tst.w	r3, #2
 8000874:	e7de      	b.n	8000834 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000876:	6813      	ldr	r3, [r2, #0]
 8000878:	f023 0307 	bic.w	r3, r3, #7
 800087c:	432b      	orrs	r3, r5
 800087e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000880:	6813      	ldr	r3, [r2, #0]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	42ab      	cmp	r3, r5
 8000888:	f47f af7b 	bne.w	8000782 <HAL_RCC_ClockConfig+0xa>
 800088c:	e78d      	b.n	80007aa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800088e:	686b      	ldr	r3, [r5, #4]
 8000890:	68e1      	ldr	r1, [r4, #12]
 8000892:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000896:	430b      	orrs	r3, r1
 8000898:	606b      	str	r3, [r5, #4]
 800089a:	e78b      	b.n	80007b4 <HAL_RCC_ClockConfig+0x3c>
 800089c:	40022000 	.word	0x40022000
 80008a0:	40021000 	.word	0x40021000
 80008a4:	08000920 	.word	0x08000920
 80008a8:	20000000 	.word	0x20000000
 80008ac:	20000008 	.word	0x20000008

080008b0 <__libc_init_array>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	2600      	movs	r6, #0
 80008b4:	4d0c      	ldr	r5, [pc, #48]	; (80008e8 <__libc_init_array+0x38>)
 80008b6:	4c0d      	ldr	r4, [pc, #52]	; (80008ec <__libc_init_array+0x3c>)
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	10a4      	asrs	r4, r4, #2
 80008bc:	42a6      	cmp	r6, r4
 80008be:	d109      	bne.n	80008d4 <__libc_init_array+0x24>
 80008c0:	f000 f822 	bl	8000908 <_init>
 80008c4:	2600      	movs	r6, #0
 80008c6:	4d0a      	ldr	r5, [pc, #40]	; (80008f0 <__libc_init_array+0x40>)
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <__libc_init_array+0x44>)
 80008ca:	1b64      	subs	r4, r4, r5
 80008cc:	10a4      	asrs	r4, r4, #2
 80008ce:	42a6      	cmp	r6, r4
 80008d0:	d105      	bne.n	80008de <__libc_init_array+0x2e>
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d8:	4798      	blx	r3
 80008da:	3601      	adds	r6, #1
 80008dc:	e7ee      	b.n	80008bc <__libc_init_array+0xc>
 80008de:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e2:	4798      	blx	r3
 80008e4:	3601      	adds	r6, #1
 80008e6:	e7f2      	b.n	80008ce <__libc_init_array+0x1e>
 80008e8:	08000944 	.word	0x08000944
 80008ec:	08000944 	.word	0x08000944
 80008f0:	08000944 	.word	0x08000944
 80008f4:	08000948 	.word	0x08000948

080008f8 <memset>:
 80008f8:	4603      	mov	r3, r0
 80008fa:	4402      	add	r2, r0
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d100      	bne.n	8000902 <memset+0xa>
 8000900:	4770      	bx	lr
 8000902:	f803 1b01 	strb.w	r1, [r3], #1
 8000906:	e7f9      	b.n	80008fc <memset+0x4>

08000908 <_init>:
 8000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090a:	bf00      	nop
 800090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090e:	bc08      	pop	{r3}
 8000910:	469e      	mov	lr, r3
 8000912:	4770      	bx	lr

08000914 <_fini>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr
