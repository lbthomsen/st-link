
boot_jump.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080008fc  080008fc  000018fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000920  08000920  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000920  08000920  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000920  08000920  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000920  08000920  00001920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000924  08000924  00001924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000928  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000934  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000934  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028cd  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e52  00000000  00000000  00004902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000009a2  00000000  00000000  00005754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002f8  00000000  00000000  000060f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002c6  00000000  00000000  000063f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015775  00000000  00000000  000066b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003ff8  00000000  00000000  0001be2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b9c9  00000000  00000000  0001fe23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009b7ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005cc  00000000  00000000  0009b830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0009bdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080008e4 	.word	0x080008e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080008e4 	.word	0x080008e4

0800014c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	b090      	sub	sp, #64	@ 0x40
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000150:	2214      	movs	r2, #20
 8000152:	2100      	movs	r1, #0
 8000154:	a808      	add	r0, sp, #32
 8000156:	f000 fb99 	bl	800088c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800015a:	2214      	movs	r2, #20
 800015c:	2100      	movs	r1, #0
 800015e:	a801      	add	r0, sp, #4
 8000160:	f000 fb94 	bl	800088c <memset>
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000164:	2402      	movs	r4, #2
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000166:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800016a:	2201      	movs	r2, #1
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800016c:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000170:	e9cd 2306 	strd	r2, r3, [sp, #24]
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000174:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000178:	a806      	add	r0, sp, #24
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800017a:	920a      	str	r2, [sp, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800017c:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800017e:	f000 f927 	bl	80003d0 <HAL_RCC_OscConfig>
 8000182:	b108      	cbz	r0, 8000188 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000184:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000186:	e7fe      	b.n	8000186 <SystemClock_Config+0x3a>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000188:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800018a:	e9cd 3401 	strd	r3, r4, [sp, #4]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800018e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000192:	9003      	str	r0, [sp, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000194:	e9cd 3004 	strd	r3, r0, [sp, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000198:	4621      	mov	r1, r4
 800019a:	a801      	add	r0, sp, #4
 800019c:	f000 fada 	bl	8000754 <HAL_RCC_ClockConfig>
 80001a0:	b108      	cbz	r0, 80001a6 <SystemClock_Config+0x5a>
 80001a2:	b672      	cpsid	i
    while (1)
 80001a4:	e7fe      	b.n	80001a4 <SystemClock_Config+0x58>
}
 80001a6:	b010      	add	sp, #64	@ 0x40
 80001a8:	bd10      	pop	{r4, pc}
	...

080001ac <main>:
    JumpAddress = *(__IO uint32_t*) (BOOTLOADER_ADDRESS + 4);
 80001ac:	4b0d      	ldr	r3, [pc, #52]	@ (80001e4 <main+0x38>)
{
 80001ae:	b507      	push	{r0, r1, r2, lr}
    JumpAddress = *(__IO uint32_t*) (BOOTLOADER_ADDRESS + 4);
 80001b0:	685b      	ldr	r3, [r3, #4]
    JumpToApplication();
 80001b2:	4798      	blx	r3
    HAL_Init();
 80001b4:	f000 f892 	bl	80002dc <HAL_Init>
    SystemClock_Config();
 80001b8:	f7ff ffc8 	bl	800014c <SystemClock_Config>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80001bc:	4b0a      	ldr	r3, [pc, #40]	@ (80001e8 <main+0x3c>)
 80001be:	699a      	ldr	r2, [r3, #24]
 80001c0:	f042 0220 	orr.w	r2, r2, #32
 80001c4:	619a      	str	r2, [r3, #24]
 80001c6:	699a      	ldr	r2, [r3, #24]
 80001c8:	f002 0220 	and.w	r2, r2, #32
 80001cc:	9200      	str	r2, [sp, #0]
 80001ce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d0:	699a      	ldr	r2, [r3, #24]
 80001d2:	f042 0204 	orr.w	r2, r2, #4
 80001d6:	619a      	str	r2, [r3, #24]
 80001d8:	699b      	ldr	r3, [r3, #24]
 80001da:	f003 0304 	and.w	r3, r3, #4
 80001de:	9301      	str	r3, [sp, #4]
 80001e0:	9b01      	ldr	r3, [sp, #4]
    while (1)
 80001e2:	e7fe      	b.n	80001e2 <main+0x36>
 80001e4:	0801c000 	.word	0x0801c000
 80001e8:	40021000 	.word	0x40021000

080001ec <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80001ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <HAL_MspInit+0x3c>)
{
 80001ee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80001f0:	699a      	ldr	r2, [r3, #24]
 80001f2:	f042 0201 	orr.w	r2, r2, #1
 80001f6:	619a      	str	r2, [r3, #24]
 80001f8:	699a      	ldr	r2, [r3, #24]
 80001fa:	f002 0201 	and.w	r2, r2, #1
 80001fe:	9200      	str	r2, [sp, #0]
 8000200:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000202:	69da      	ldr	r2, [r3, #28]
 8000204:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000208:	61da      	str	r2, [r3, #28]
 800020a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800020c:	4a07      	ldr	r2, [pc, #28]	@ (800022c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800020e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000212:	9301      	str	r3, [sp, #4]
 8000214:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000216:	6853      	ldr	r3, [r2, #4]
 8000218:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800021c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000220:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000222:	b002      	add	sp, #8
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000
 800022c:	40010000 	.word	0x40010000

08000230 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000230:	e7fe      	b.n	8000230 <NMI_Handler>

08000232 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000232:	e7fe      	b.n	8000232 <HardFault_Handler>

08000234 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000234:	e7fe      	b.n	8000234 <MemManage_Handler>

08000236 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000236:	e7fe      	b.n	8000236 <BusFault_Handler>

08000238 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000238:	e7fe      	b.n	8000238 <UsageFault_Handler>

0800023a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800023a:	4770      	bx	lr

0800023c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800023c:	4770      	bx	lr

0800023e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800023e:	4770      	bx	lr

08000240 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000240:	f000 b85e 	b.w	8000300 <HAL_IncTick>

08000244 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000244:	4770      	bx	lr
	...

08000248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480c      	ldr	r0, [pc, #48]	@ (800027c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800024a:	490d      	ldr	r1, [pc, #52]	@ (8000280 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800024c:	4a0d      	ldr	r2, [pc, #52]	@ (8000284 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000260:	4c0a      	ldr	r4, [pc, #40]	@ (800028c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800026e:	f7ff ffe9 	bl	8000244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000272:	f000 fb13 	bl	800089c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ff99 	bl	80001ac <main>
  bx lr
 800027a:	4770      	bx	lr
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000284:	08000928 	.word	0x08000928
  ldr r2, =_sbss
 8000288:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800028c:	2000002c 	.word	0x2000002c

08000290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_2_IRQHandler>
	...

08000294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000294:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000296:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <HAL_InitTick+0x3c>)
{
 8000298:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800029a:	781a      	ldrb	r2, [r3, #0]
 800029c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80002a4:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <HAL_InitTick+0x40>)
 80002a6:	6810      	ldr	r0, [r2, #0]
 80002a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80002ac:	f000 f87c 	bl	80003a8 <HAL_SYSTICK_Config>
 80002b0:	4604      	mov	r4, r0
 80002b2:	b958      	cbnz	r0, 80002cc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002b4:	2d0f      	cmp	r5, #15
 80002b6:	d809      	bhi.n	80002cc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002b8:	4602      	mov	r2, r0
 80002ba:	4629      	mov	r1, r5
 80002bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80002c0:	f000 f842 	bl	8000348 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002c4:	4620      	mov	r0, r4
 80002c6:	4b04      	ldr	r3, [pc, #16]	@ (80002d8 <HAL_InitTick+0x44>)
 80002c8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002cc:	2001      	movs	r0, #1
 80002ce:	e7fc      	b.n	80002ca <HAL_InitTick+0x36>
 80002d0:	20000004 	.word	0x20000004
 80002d4:	20000000 	.word	0x20000000
 80002d8:	20000008 	.word	0x20000008

080002dc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002dc:	4a07      	ldr	r2, [pc, #28]	@ (80002fc <HAL_Init+0x20>)
{
 80002de:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002e0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002e4:	f043 0310 	orr.w	r3, r3, #16
 80002e8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002ea:	f000 f81b 	bl	8000324 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ee:	200f      	movs	r0, #15
 80002f0:	f7ff ffd0 	bl	8000294 <HAL_InitTick>
  HAL_MspInit();
 80002f4:	f7ff ff7a 	bl	80001ec <HAL_MspInit>
}
 80002f8:	2000      	movs	r0, #0
 80002fa:	bd08      	pop	{r3, pc}
 80002fc:	40022000 	.word	0x40022000

08000300 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000300:	4a03      	ldr	r2, [pc, #12]	@ (8000310 <HAL_IncTick+0x10>)
 8000302:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <HAL_IncTick+0x14>)
 8000304:	6811      	ldr	r1, [r2, #0]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	440b      	add	r3, r1
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20000028 	.word	0x20000028
 8000314:	20000004 	.word	0x20000004

08000318 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000318:	4b01      	ldr	r3, [pc, #4]	@ (8000320 <HAL_GetTick+0x8>)
 800031a:	6818      	ldr	r0, [r3, #0]
}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028

08000324 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000324:	4907      	ldr	r1, [pc, #28]	@ (8000344 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000326:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000328:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800032a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800032e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000332:	0412      	lsls	r2, r2, #16
 8000334:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800033c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000340:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000348:	4b15      	ldr	r3, [pc, #84]	@ (80003a0 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800034a:	b530      	push	{r4, r5, lr}
 800034c:	68dc      	ldr	r4, [r3, #12]
 800034e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000352:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000356:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	2b04      	cmp	r3, #4
 800035a:	bf28      	it	cs
 800035c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000360:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000364:	bf94      	ite	ls
 8000366:	2400      	movls	r4, #0
 8000368:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036a:	fa05 f303 	lsl.w	r3, r5, r3
 800036e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000372:	40a5      	lsls	r5, r4
 8000374:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800037a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800037c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	bfac      	ite	ge
 8000382:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000386:	4a07      	ldrlt	r2, [pc, #28]	@ (80003a4 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000388:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800038c:	b2db      	uxtb	r3, r3
 800038e:	bfab      	itete	ge
 8000390:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	e000ed14 	.word	0xe000ed14

080003a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	3801      	subs	r0, #1
 80003aa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80003ae:	d20b      	bcs.n	80003c8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	21f0      	movs	r1, #240	@ 0xf0
 80003b6:	4a05      	ldr	r2, [pc, #20]	@ (80003cc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003be:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003ca:	4770      	bx	lr
 80003cc:	e000ed00 	.word	0xe000ed00

080003d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80003d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80003d4:	4605      	mov	r5, r0
 80003d6:	b338      	cbz	r0, 8000428 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80003d8:	6803      	ldr	r3, [r0, #0]
 80003da:	07db      	lsls	r3, r3, #31
 80003dc:	d410      	bmi.n	8000400 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80003de:	682b      	ldr	r3, [r5, #0]
 80003e0:	079f      	lsls	r7, r3, #30
 80003e2:	d45e      	bmi.n	80004a2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80003e4:	682b      	ldr	r3, [r5, #0]
 80003e6:	0719      	lsls	r1, r3, #28
 80003e8:	f100 8095 	bmi.w	8000516 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80003ec:	682b      	ldr	r3, [r5, #0]
 80003ee:	075a      	lsls	r2, r3, #29
 80003f0:	f100 80c1 	bmi.w	8000576 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80003f4:	69eb      	ldr	r3, [r5, #28]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	f040 812c 	bne.w	8000654 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80003fc:	2000      	movs	r0, #0
 80003fe:	e029      	b.n	8000454 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000400:	4c90      	ldr	r4, [pc, #576]	@ (8000644 <HAL_RCC_OscConfig+0x274>)
 8000402:	6863      	ldr	r3, [r4, #4]
 8000404:	f003 030c 	and.w	r3, r3, #12
 8000408:	2b04      	cmp	r3, #4
 800040a:	d007      	beq.n	800041c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800040c:	6863      	ldr	r3, [r4, #4]
 800040e:	f003 030c 	and.w	r3, r3, #12
 8000412:	2b08      	cmp	r3, #8
 8000414:	d10a      	bne.n	800042c <HAL_RCC_OscConfig+0x5c>
 8000416:	6863      	ldr	r3, [r4, #4]
 8000418:	03de      	lsls	r6, r3, #15
 800041a:	d507      	bpl.n	800042c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800041c:	6823      	ldr	r3, [r4, #0]
 800041e:	039c      	lsls	r4, r3, #14
 8000420:	d5dd      	bpl.n	80003de <HAL_RCC_OscConfig+0xe>
 8000422:	686b      	ldr	r3, [r5, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1da      	bne.n	80003de <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8000428:	2001      	movs	r0, #1
 800042a:	e013      	b.n	8000454 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800042c:	686b      	ldr	r3, [r5, #4]
 800042e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000432:	d112      	bne.n	800045a <HAL_RCC_OscConfig+0x8a>
 8000434:	6823      	ldr	r3, [r4, #0]
 8000436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800043a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800043c:	f7ff ff6c 	bl	8000318 <HAL_GetTick>
 8000440:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000442:	6823      	ldr	r3, [r4, #0]
 8000444:	0398      	lsls	r0, r3, #14
 8000446:	d4ca      	bmi.n	80003de <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000448:	f7ff ff66 	bl	8000318 <HAL_GetTick>
 800044c:	1b80      	subs	r0, r0, r6
 800044e:	2864      	cmp	r0, #100	@ 0x64
 8000450:	d9f7      	bls.n	8000442 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000452:	2003      	movs	r0, #3
}
 8000454:	b002      	add	sp, #8
 8000456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800045a:	b99b      	cbnz	r3, 8000484 <HAL_RCC_OscConfig+0xb4>
 800045c:	6823      	ldr	r3, [r4, #0]
 800045e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000462:	6023      	str	r3, [r4, #0]
 8000464:	6823      	ldr	r3, [r4, #0]
 8000466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800046a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800046c:	f7ff ff54 	bl	8000318 <HAL_GetTick>
 8000470:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000472:	6823      	ldr	r3, [r4, #0]
 8000474:	0399      	lsls	r1, r3, #14
 8000476:	d5b2      	bpl.n	80003de <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000478:	f7ff ff4e 	bl	8000318 <HAL_GetTick>
 800047c:	1b80      	subs	r0, r0, r6
 800047e:	2864      	cmp	r0, #100	@ 0x64
 8000480:	d9f7      	bls.n	8000472 <HAL_RCC_OscConfig+0xa2>
 8000482:	e7e6      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000488:	6823      	ldr	r3, [r4, #0]
 800048a:	d103      	bne.n	8000494 <HAL_RCC_OscConfig+0xc4>
 800048c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000490:	6023      	str	r3, [r4, #0]
 8000492:	e7cf      	b.n	8000434 <HAL_RCC_OscConfig+0x64>
 8000494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000498:	6023      	str	r3, [r4, #0]
 800049a:	6823      	ldr	r3, [r4, #0]
 800049c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004a0:	e7cb      	b.n	800043a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80004a2:	4c68      	ldr	r4, [pc, #416]	@ (8000644 <HAL_RCC_OscConfig+0x274>)
 80004a4:	6863      	ldr	r3, [r4, #4]
 80004a6:	f013 0f0c 	tst.w	r3, #12
 80004aa:	d007      	beq.n	80004bc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80004ac:	6863      	ldr	r3, [r4, #4]
 80004ae:	f003 030c 	and.w	r3, r3, #12
 80004b2:	2b08      	cmp	r3, #8
 80004b4:	d110      	bne.n	80004d8 <HAL_RCC_OscConfig+0x108>
 80004b6:	6863      	ldr	r3, [r4, #4]
 80004b8:	03da      	lsls	r2, r3, #15
 80004ba:	d40d      	bmi.n	80004d8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80004bc:	6823      	ldr	r3, [r4, #0]
 80004be:	079b      	lsls	r3, r3, #30
 80004c0:	d502      	bpl.n	80004c8 <HAL_RCC_OscConfig+0xf8>
 80004c2:	692b      	ldr	r3, [r5, #16]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d1af      	bne.n	8000428 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80004c8:	6823      	ldr	r3, [r4, #0]
 80004ca:	696a      	ldr	r2, [r5, #20]
 80004cc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80004d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80004d4:	6023      	str	r3, [r4, #0]
 80004d6:	e785      	b.n	80003e4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80004d8:	692a      	ldr	r2, [r5, #16]
 80004da:	4b5b      	ldr	r3, [pc, #364]	@ (8000648 <HAL_RCC_OscConfig+0x278>)
 80004dc:	b16a      	cbz	r2, 80004fa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80004e2:	f7ff ff19 	bl	8000318 <HAL_GetTick>
 80004e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80004e8:	6823      	ldr	r3, [r4, #0]
 80004ea:	079f      	lsls	r7, r3, #30
 80004ec:	d4ec      	bmi.n	80004c8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80004ee:	f7ff ff13 	bl	8000318 <HAL_GetTick>
 80004f2:	1b80      	subs	r0, r0, r6
 80004f4:	2802      	cmp	r0, #2
 80004f6:	d9f7      	bls.n	80004e8 <HAL_RCC_OscConfig+0x118>
 80004f8:	e7ab      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80004fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80004fc:	f7ff ff0c 	bl	8000318 <HAL_GetTick>
 8000500:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	0798      	lsls	r0, r3, #30
 8000506:	f57f af6d 	bpl.w	80003e4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800050a:	f7ff ff05 	bl	8000318 <HAL_GetTick>
 800050e:	1b80      	subs	r0, r0, r6
 8000510:	2802      	cmp	r0, #2
 8000512:	d9f6      	bls.n	8000502 <HAL_RCC_OscConfig+0x132>
 8000514:	e79d      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000516:	69aa      	ldr	r2, [r5, #24]
 8000518:	4e4a      	ldr	r6, [pc, #296]	@ (8000644 <HAL_RCC_OscConfig+0x274>)
 800051a:	4b4b      	ldr	r3, [pc, #300]	@ (8000648 <HAL_RCC_OscConfig+0x278>)
 800051c:	b1e2      	cbz	r2, 8000558 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800051e:	2201      	movs	r2, #1
 8000520:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000524:	f7ff fef8 	bl	8000318 <HAL_GetTick>
 8000528:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800052a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800052c:	079b      	lsls	r3, r3, #30
 800052e:	d50d      	bpl.n	800054c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000530:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000534:	4b45      	ldr	r3, [pc, #276]	@ (800064c <HAL_RCC_OscConfig+0x27c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	fbb3 f3f2 	udiv	r3, r3, r2
 800053c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800053e:	bf00      	nop
  }
  while (Delay --);
 8000540:	9b01      	ldr	r3, [sp, #4]
 8000542:	1e5a      	subs	r2, r3, #1
 8000544:	9201      	str	r2, [sp, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1f9      	bne.n	800053e <HAL_RCC_OscConfig+0x16e>
 800054a:	e74f      	b.n	80003ec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800054c:	f7ff fee4 	bl	8000318 <HAL_GetTick>
 8000550:	1b00      	subs	r0, r0, r4
 8000552:	2802      	cmp	r0, #2
 8000554:	d9e9      	bls.n	800052a <HAL_RCC_OscConfig+0x15a>
 8000556:	e77c      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000558:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800055c:	f7ff fedc 	bl	8000318 <HAL_GetTick>
 8000560:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000562:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8000564:	079f      	lsls	r7, r3, #30
 8000566:	f57f af41 	bpl.w	80003ec <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800056a:	f7ff fed5 	bl	8000318 <HAL_GetTick>
 800056e:	1b00      	subs	r0, r0, r4
 8000570:	2802      	cmp	r0, #2
 8000572:	d9f6      	bls.n	8000562 <HAL_RCC_OscConfig+0x192>
 8000574:	e76d      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000576:	4c33      	ldr	r4, [pc, #204]	@ (8000644 <HAL_RCC_OscConfig+0x274>)
 8000578:	69e3      	ldr	r3, [r4, #28]
 800057a:	00d8      	lsls	r0, r3, #3
 800057c:	d424      	bmi.n	80005c8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800057e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	69e3      	ldr	r3, [r4, #28]
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	61e3      	str	r3, [r4, #28]
 8000588:	69e3      	ldr	r3, [r4, #28]
 800058a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000592:	4e2f      	ldr	r6, [pc, #188]	@ (8000650 <HAL_RCC_OscConfig+0x280>)
 8000594:	6833      	ldr	r3, [r6, #0]
 8000596:	05d9      	lsls	r1, r3, #23
 8000598:	d518      	bpl.n	80005cc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800059a:	68eb      	ldr	r3, [r5, #12]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d126      	bne.n	80005ee <HAL_RCC_OscConfig+0x21e>
 80005a0:	6a23      	ldr	r3, [r4, #32]
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80005a8:	f7ff feb6 	bl	8000318 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80005ac:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80005b0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005b2:	6a23      	ldr	r3, [r4, #32]
 80005b4:	079b      	lsls	r3, r3, #30
 80005b6:	d53f      	bpl.n	8000638 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80005b8:	2f00      	cmp	r7, #0
 80005ba:	f43f af1b 	beq.w	80003f4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80005be:	69e3      	ldr	r3, [r4, #28]
 80005c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80005c4:	61e3      	str	r3, [r4, #28]
 80005c6:	e715      	b.n	80003f4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80005c8:	2700      	movs	r7, #0
 80005ca:	e7e2      	b.n	8000592 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80005cc:	6833      	ldr	r3, [r6, #0]
 80005ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80005d4:	f7ff fea0 	bl	8000318 <HAL_GetTick>
 80005d8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80005da:	6833      	ldr	r3, [r6, #0]
 80005dc:	05da      	lsls	r2, r3, #23
 80005de:	d4dc      	bmi.n	800059a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80005e0:	f7ff fe9a 	bl	8000318 <HAL_GetTick>
 80005e4:	eba0 0008 	sub.w	r0, r0, r8
 80005e8:	2864      	cmp	r0, #100	@ 0x64
 80005ea:	d9f6      	bls.n	80005da <HAL_RCC_OscConfig+0x20a>
 80005ec:	e731      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005ee:	b9ab      	cbnz	r3, 800061c <HAL_RCC_OscConfig+0x24c>
 80005f0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80005f2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005f6:	f023 0301 	bic.w	r3, r3, #1
 80005fa:	6223      	str	r3, [r4, #32]
 80005fc:	6a23      	ldr	r3, [r4, #32]
 80005fe:	f023 0304 	bic.w	r3, r3, #4
 8000602:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000604:	f7ff fe88 	bl	8000318 <HAL_GetTick>
 8000608:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800060a:	6a23      	ldr	r3, [r4, #32]
 800060c:	0798      	lsls	r0, r3, #30
 800060e:	d5d3      	bpl.n	80005b8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000610:	f7ff fe82 	bl	8000318 <HAL_GetTick>
 8000614:	1b80      	subs	r0, r0, r6
 8000616:	4540      	cmp	r0, r8
 8000618:	d9f7      	bls.n	800060a <HAL_RCC_OscConfig+0x23a>
 800061a:	e71a      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800061c:	2b05      	cmp	r3, #5
 800061e:	6a23      	ldr	r3, [r4, #32]
 8000620:	d103      	bne.n	800062a <HAL_RCC_OscConfig+0x25a>
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6223      	str	r3, [r4, #32]
 8000628:	e7ba      	b.n	80005a0 <HAL_RCC_OscConfig+0x1d0>
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	6223      	str	r3, [r4, #32]
 8000630:	6a23      	ldr	r3, [r4, #32]
 8000632:	f023 0304 	bic.w	r3, r3, #4
 8000636:	e7b6      	b.n	80005a6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000638:	f7ff fe6e 	bl	8000318 <HAL_GetTick>
 800063c:	1b80      	subs	r0, r0, r6
 800063e:	4540      	cmp	r0, r8
 8000640:	d9b7      	bls.n	80005b2 <HAL_RCC_OscConfig+0x1e2>
 8000642:	e706      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
 8000644:	40021000 	.word	0x40021000
 8000648:	42420000 	.word	0x42420000
 800064c:	20000000 	.word	0x20000000
 8000650:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000654:	4c2a      	ldr	r4, [pc, #168]	@ (8000700 <HAL_RCC_OscConfig+0x330>)
 8000656:	6862      	ldr	r2, [r4, #4]
 8000658:	f002 020c 	and.w	r2, r2, #12
 800065c:	2a08      	cmp	r2, #8
 800065e:	d03e      	beq.n	80006de <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000660:	2200      	movs	r2, #0
 8000662:	2b02      	cmp	r3, #2
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8000666:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000668:	d12c      	bne.n	80006c4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800066a:	f7ff fe55 	bl	8000318 <HAL_GetTick>
 800066e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000670:	6823      	ldr	r3, [r4, #0]
 8000672:	0199      	lsls	r1, r3, #6
 8000674:	d420      	bmi.n	80006b8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000676:	6a2b      	ldr	r3, [r5, #32]
 8000678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800067c:	d105      	bne.n	800068a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800067e:	6862      	ldr	r2, [r4, #4]
 8000680:	68a9      	ldr	r1, [r5, #8]
 8000682:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8000686:	430a      	orrs	r2, r1
 8000688:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800068a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800068c:	6862      	ldr	r2, [r4, #4]
 800068e:	430b      	orrs	r3, r1
 8000690:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8000694:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8000696:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000698:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <HAL_RCC_OscConfig+0x334>)
 800069c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800069e:	f7ff fe3b 	bl	8000318 <HAL_GetTick>
 80006a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80006a4:	6823      	ldr	r3, [r4, #0]
 80006a6:	019a      	lsls	r2, r3, #6
 80006a8:	f53f aea8 	bmi.w	80003fc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80006ac:	f7ff fe34 	bl	8000318 <HAL_GetTick>
 80006b0:	1b40      	subs	r0, r0, r5
 80006b2:	2802      	cmp	r0, #2
 80006b4:	d9f6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x2d4>
 80006b6:	e6cc      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80006b8:	f7ff fe2e 	bl	8000318 <HAL_GetTick>
 80006bc:	1b80      	subs	r0, r0, r6
 80006be:	2802      	cmp	r0, #2
 80006c0:	d9d6      	bls.n	8000670 <HAL_RCC_OscConfig+0x2a0>
 80006c2:	e6c6      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80006c4:	f7ff fe28 	bl	8000318 <HAL_GetTick>
 80006c8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	019b      	lsls	r3, r3, #6
 80006ce:	f57f ae95 	bpl.w	80003fc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80006d2:	f7ff fe21 	bl	8000318 <HAL_GetTick>
 80006d6:	1b40      	subs	r0, r0, r5
 80006d8:	2802      	cmp	r0, #2
 80006da:	d9f6      	bls.n	80006ca <HAL_RCC_OscConfig+0x2fa>
 80006dc:	e6b9      	b.n	8000452 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80006de:	2b01      	cmp	r3, #1
 80006e0:	f43f aea2 	beq.w	8000428 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80006e4:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80006e6:	6a2b      	ldr	r3, [r5, #32]
 80006e8:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80006ec:	429a      	cmp	r2, r3
 80006ee:	f47f ae9b 	bne.w	8000428 <HAL_RCC_OscConfig+0x58>
 80006f2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80006f4:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80006f8:	1ac0      	subs	r0, r0, r3
 80006fa:	bf18      	it	ne
 80006fc:	2001      	movne	r0, #1
 80006fe:	e6a9      	b.n	8000454 <HAL_RCC_OscConfig+0x84>
 8000700:	40021000 	.word	0x40021000
 8000704:	42420000 	.word	0x42420000

08000708 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000708:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <HAL_RCC_GetSysClockFreq+0x38>)
 800070a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800070c:	f003 010c 	and.w	r1, r3, #12
 8000710:	2908      	cmp	r1, #8
 8000712:	d112      	bne.n	800073a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <HAL_RCC_GetSysClockFreq+0x3c>)
 8000716:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800071a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800071c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800071e:	d509      	bpl.n	8000734 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000720:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000722:	4a09      	ldr	r2, [pc, #36]	@ (8000748 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000724:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000728:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <HAL_RCC_GetSysClockFreq+0x44>)
 800072c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800072e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000732:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_RCC_GetSysClockFreq+0x48>)
 8000736:	4358      	muls	r0, r3
 8000738:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800073a:	4803      	ldr	r0, [pc, #12]	@ (8000748 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	0800090e 	.word	0x0800090e
 8000748:	007a1200 	.word	0x007a1200
 800074c:	0800090c 	.word	0x0800090c
 8000750:	003d0900 	.word	0x003d0900

08000754 <HAL_RCC_ClockConfig>:
{
 8000754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000758:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800075a:	4604      	mov	r4, r0
 800075c:	b910      	cbnz	r0, 8000764 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800075e:	2001      	movs	r0, #1
}
 8000760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000764:	4a44      	ldr	r2, [pc, #272]	@ (8000878 <HAL_RCC_ClockConfig+0x124>)
 8000766:	6813      	ldr	r3, [r2, #0]
 8000768:	f003 0307 	and.w	r3, r3, #7
 800076c:	428b      	cmp	r3, r1
 800076e:	d328      	bcc.n	80007c2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000770:	6821      	ldr	r1, [r4, #0]
 8000772:	078e      	lsls	r6, r1, #30
 8000774:	d430      	bmi.n	80007d8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000776:	07ca      	lsls	r2, r1, #31
 8000778:	d443      	bmi.n	8000802 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800077a:	4a3f      	ldr	r2, [pc, #252]	@ (8000878 <HAL_RCC_ClockConfig+0x124>)
 800077c:	6813      	ldr	r3, [r2, #0]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	42ab      	cmp	r3, r5
 8000784:	d865      	bhi.n	8000852 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000786:	6822      	ldr	r2, [r4, #0]
 8000788:	4d3c      	ldr	r5, [pc, #240]	@ (800087c <HAL_RCC_ClockConfig+0x128>)
 800078a:	f012 0f04 	tst.w	r2, #4
 800078e:	d16c      	bne.n	800086a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000790:	0713      	lsls	r3, r2, #28
 8000792:	d506      	bpl.n	80007a2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000794:	686b      	ldr	r3, [r5, #4]
 8000796:	6922      	ldr	r2, [r4, #16]
 8000798:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800079c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007a0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80007a2:	f7ff ffb1 	bl	8000708 <HAL_RCC_GetSysClockFreq>
 80007a6:	686b      	ldr	r3, [r5, #4]
 80007a8:	4a35      	ldr	r2, [pc, #212]	@ (8000880 <HAL_RCC_ClockConfig+0x12c>)
 80007aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	40d8      	lsrs	r0, r3
 80007b2:	4b34      	ldr	r3, [pc, #208]	@ (8000884 <HAL_RCC_ClockConfig+0x130>)
 80007b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80007b6:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <HAL_RCC_ClockConfig+0x134>)
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	f7ff fd6b 	bl	8000294 <HAL_InitTick>
  return HAL_OK;
 80007be:	2000      	movs	r0, #0
 80007c0:	e7ce      	b.n	8000760 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80007c2:	6813      	ldr	r3, [r2, #0]
 80007c4:	f023 0307 	bic.w	r3, r3, #7
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80007cc:	6813      	ldr	r3, [r2, #0]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d1c3      	bne.n	800075e <HAL_RCC_ClockConfig+0xa>
 80007d6:	e7cb      	b.n	8000770 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80007d8:	4b28      	ldr	r3, [pc, #160]	@ (800087c <HAL_RCC_ClockConfig+0x128>)
 80007da:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80007de:	bf1e      	ittt	ne
 80007e0:	685a      	ldrne	r2, [r3, #4]
 80007e2:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80007e6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80007e8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80007ea:	bf42      	ittt	mi
 80007ec:	685a      	ldrmi	r2, [r3, #4]
 80007ee:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80007f2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	68a0      	ldr	r0, [r4, #8]
 80007f8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80007fc:	4302      	orrs	r2, r0
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	e7b9      	b.n	8000776 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000802:	6862      	ldr	r2, [r4, #4]
 8000804:	4e1d      	ldr	r6, [pc, #116]	@ (800087c <HAL_RCC_ClockConfig+0x128>)
 8000806:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000808:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800080a:	d11a      	bne.n	8000842 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800080c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000810:	d0a5      	beq.n	800075e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000812:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000814:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000818:	f023 0303 	bic.w	r3, r3, #3
 800081c:	4313      	orrs	r3, r2
 800081e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000820:	f7ff fd7a 	bl	8000318 <HAL_GetTick>
 8000824:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000826:	6873      	ldr	r3, [r6, #4]
 8000828:	6862      	ldr	r2, [r4, #4]
 800082a:	f003 030c 	and.w	r3, r3, #12
 800082e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000832:	d0a2      	beq.n	800077a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000834:	f7ff fd70 	bl	8000318 <HAL_GetTick>
 8000838:	1bc0      	subs	r0, r0, r7
 800083a:	4540      	cmp	r0, r8
 800083c:	d9f3      	bls.n	8000826 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800083e:	2003      	movs	r0, #3
 8000840:	e78e      	b.n	8000760 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000842:	2a02      	cmp	r2, #2
 8000844:	d102      	bne.n	800084c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000846:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800084a:	e7e1      	b.n	8000810 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800084c:	f013 0f02 	tst.w	r3, #2
 8000850:	e7de      	b.n	8000810 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000852:	6813      	ldr	r3, [r2, #0]
 8000854:	f023 0307 	bic.w	r3, r3, #7
 8000858:	432b      	orrs	r3, r5
 800085a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800085c:	6813      	ldr	r3, [r2, #0]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	42ab      	cmp	r3, r5
 8000864:	f47f af7b 	bne.w	800075e <HAL_RCC_ClockConfig+0xa>
 8000868:	e78d      	b.n	8000786 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800086a:	686b      	ldr	r3, [r5, #4]
 800086c:	68e1      	ldr	r1, [r4, #12]
 800086e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000872:	430b      	orrs	r3, r1
 8000874:	606b      	str	r3, [r5, #4]
 8000876:	e78b      	b.n	8000790 <HAL_RCC_ClockConfig+0x3c>
 8000878:	40022000 	.word	0x40022000
 800087c:	40021000 	.word	0x40021000
 8000880:	080008fc 	.word	0x080008fc
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008

0800088c <memset>:
 800088c:	4603      	mov	r3, r0
 800088e:	4402      	add	r2, r0
 8000890:	4293      	cmp	r3, r2
 8000892:	d100      	bne.n	8000896 <memset+0xa>
 8000894:	4770      	bx	lr
 8000896:	f803 1b01 	strb.w	r1, [r3], #1
 800089a:	e7f9      	b.n	8000890 <memset+0x4>

0800089c <__libc_init_array>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	2600      	movs	r6, #0
 80008a0:	4d0c      	ldr	r5, [pc, #48]	@ (80008d4 <__libc_init_array+0x38>)
 80008a2:	4c0d      	ldr	r4, [pc, #52]	@ (80008d8 <__libc_init_array+0x3c>)
 80008a4:	1b64      	subs	r4, r4, r5
 80008a6:	10a4      	asrs	r4, r4, #2
 80008a8:	42a6      	cmp	r6, r4
 80008aa:	d109      	bne.n	80008c0 <__libc_init_array+0x24>
 80008ac:	f000 f81a 	bl	80008e4 <_init>
 80008b0:	2600      	movs	r6, #0
 80008b2:	4d0a      	ldr	r5, [pc, #40]	@ (80008dc <__libc_init_array+0x40>)
 80008b4:	4c0a      	ldr	r4, [pc, #40]	@ (80008e0 <__libc_init_array+0x44>)
 80008b6:	1b64      	subs	r4, r4, r5
 80008b8:	10a4      	asrs	r4, r4, #2
 80008ba:	42a6      	cmp	r6, r4
 80008bc:	d105      	bne.n	80008ca <__libc_init_array+0x2e>
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c4:	4798      	blx	r3
 80008c6:	3601      	adds	r6, #1
 80008c8:	e7ee      	b.n	80008a8 <__libc_init_array+0xc>
 80008ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ce:	4798      	blx	r3
 80008d0:	3601      	adds	r6, #1
 80008d2:	e7f2      	b.n	80008ba <__libc_init_array+0x1e>
 80008d4:	08000920 	.word	0x08000920
 80008d8:	08000920 	.word	0x08000920
 80008dc:	08000920 	.word	0x08000920
 80008e0:	08000924 	.word	0x08000924

080008e4 <_init>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	bf00      	nop
 80008e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ea:	bc08      	pop	{r3}
 80008ec:	469e      	mov	lr, r3
 80008ee:	4770      	bx	lr

080008f0 <_fini>:
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f2:	bf00      	nop
 80008f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f6:	bc08      	pop	{r3}
 80008f8:	469e      	mov	lr, r3
 80008fa:	4770      	bx	lr
