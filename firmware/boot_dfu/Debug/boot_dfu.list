
boot_dfu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003054  08003054  00013054  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003114  08003114  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  08003114  08003114  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003114  08003114  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800311c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf0  200000dc  080031f8  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  080031f8  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dac5  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecc  00000000  00000000  0002dbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  00030a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  000312f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193d1  00000000  00000000  00032318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edc1  00000000  00000000  0004b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084884  00000000  00000000  0005a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ded2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000143c  00000000  00000000  000ded80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00006d37  00000000  00000000  000e01bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800303c 	.word	0x0800303c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	0800303c 	.word	0x0800303c

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b530      	push	{r4, r5, lr}
 800014e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2214      	movs	r2, #20
 8000152:	2100      	movs	r1, #0
 8000154:	a80c      	add	r0, sp, #48	; 0x30
 8000156:	f002 ff69 	bl	800302c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015a:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800015c:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015e:	2100      	movs	r1, #0
 8000160:	eb0d 0002 	add.w	r0, sp, r2
 8000164:	f002 ff62 	bl	800302c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000168:	462a      	mov	r2, r5
 800016a:	2100      	movs	r1, #0
 800016c:	a801      	add	r0, sp, #4
 800016e:	f002 ff5d 	bl	800302c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000172:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000178:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800017a:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800017e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000182:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000186:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000188:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800018a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800018c:	f000 ffaa 	bl	80010e4 <HAL_RCC_OscConfig>
 8000190:	b108      	cbz	r0, 8000196 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000192:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000194:	e7fe      	b.n	8000194 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000196:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000198:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800019c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001a0:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001a2:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001a6:	4621      	mov	r1, r4
 80001a8:	a805      	add	r0, sp, #20
 80001aa:	f001 f971 	bl	8001490 <HAL_RCC_ClockConfig>
 80001ae:	b108      	cbz	r0, 80001b4 <SystemClock_Config+0x68>
 80001b0:	b672      	cpsid	i
  while (1)
 80001b2:	e7fe      	b.n	80001b2 <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001b4:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001b6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001b8:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ba:	f001 fa05 	bl	80015c8 <HAL_RCCEx_PeriphCLKConfig>
 80001be:	b108      	cbz	r0, 80001c4 <SystemClock_Config+0x78>
 80001c0:	b672      	cpsid	i
  while (1)
 80001c2:	e7fe      	b.n	80001c2 <SystemClock_Config+0x76>
}
 80001c4:	b015      	add	sp, #84	; 0x54
 80001c6:	bd30      	pop	{r4, r5, pc}

080001c8 <main>:
{
 80001c8:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80001ca:	f000 f89b 	bl	8000304 <HAL_Init>
  SystemClock_Config();
 80001ce:	f7ff ffbd 	bl	800014c <SystemClock_Config>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <main+0x38>)
 80001d4:	699a      	ldr	r2, [r3, #24]
 80001d6:	f042 0220 	orr.w	r2, r2, #32
 80001da:	619a      	str	r2, [r3, #24]
 80001dc:	699a      	ldr	r2, [r3, #24]
 80001de:	f002 0220 	and.w	r2, r2, #32
 80001e2:	9200      	str	r2, [sp, #0]
 80001e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e6:	699a      	ldr	r2, [r3, #24]
 80001e8:	f042 0204 	orr.w	r2, r2, #4
 80001ec:	619a      	str	r2, [r3, #24]
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	f003 0304 	and.w	r3, r3, #4
 80001f4:	9301      	str	r3, [sp, #4]
 80001f6:	9b01      	ldr	r3, [sp, #4]
  MX_USB_DEVICE_Init();
 80001f8:	f002 fd50 	bl	8002c9c <MX_USB_DEVICE_Init>
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x34>
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000

08000204 <Error_Handler>:
 8000204:	b672      	cpsid	i
  while (1)
 8000206:	e7fe      	b.n	8000206 <Error_Handler+0x2>

08000208 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <HAL_MspInit+0x3c>)
{
 800020a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800020c:	699a      	ldr	r2, [r3, #24]
 800020e:	f042 0201 	orr.w	r2, r2, #1
 8000212:	619a      	str	r2, [r3, #24]
 8000214:	699a      	ldr	r2, [r3, #24]
 8000216:	f002 0201 	and.w	r2, r2, #1
 800021a:	9200      	str	r2, [sp, #0]
 800021c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800021e:	69da      	ldr	r2, [r3, #28]
 8000220:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000224:	61da      	str	r2, [r3, #28]
 8000226:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000228:	4a07      	ldr	r2, [pc, #28]	; (8000248 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800022a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000232:	6853      	ldr	r3, [r2, #4]
 8000234:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800023c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800023e:	b002      	add	sp, #8
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	40010000 	.word	0x40010000

0800024c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800024c:	e7fe      	b.n	800024c <NMI_Handler>

0800024e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800024e:	e7fe      	b.n	800024e <HardFault_Handler>

08000250 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler>

08000252 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000252:	e7fe      	b.n	8000252 <BusFault_Handler>

08000254 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000254:	e7fe      	b.n	8000254 <UsageFault_Handler>

08000256 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000256:	4770      	bx	lr

08000258 <DebugMon_Handler>:
 8000258:	4770      	bx	lr

0800025a <PendSV_Handler>:
 800025a:	4770      	bx	lr

0800025c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800025c:	f000 b864 	b.w	8000328 <HAL_IncTick>

08000260 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000260:	4801      	ldr	r0, [pc, #4]	; (8000268 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000262:	f000 b9ab 	b.w	80005bc <HAL_PCD_IRQHandler>
 8000266:	bf00      	nop
 8000268:	200006c0 	.word	0x200006c0

0800026c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800026c:	4770      	bx	lr
	...

08000270 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000296:	f7ff ffe9 	bl	800026c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800029a:	f002 fea3 	bl	8002fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ff93 	bl	80001c8 <main>
  bx lr
 80002a2:	4770      	bx	lr
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80002ac:	0800311c 	.word	0x0800311c
  ldr r2, =_sbss
 80002b0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80002b4:	20000dcc 	.word	0x20000dcc

080002b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC1_2_IRQHandler>
	...

080002bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002bc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <HAL_InitTick+0x3c>)
{
 80002c0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002c2:	7818      	ldrb	r0, [r3, #0]
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80002cc:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <HAL_InitTick+0x40>)
 80002ce:	6810      	ldr	r0, [r2, #0]
 80002d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80002d4:	f000 f89e 	bl	8000414 <HAL_SYSTICK_Config>
 80002d8:	4604      	mov	r4, r0
 80002da:	b958      	cbnz	r0, 80002f4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002dc:	2d0f      	cmp	r5, #15
 80002de:	d809      	bhi.n	80002f4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	4602      	mov	r2, r0
 80002e2:	4629      	mov	r1, r5
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002e8:	f000 f854 	bl	8000394 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4620      	mov	r0, r4
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <HAL_InitTick+0x44>)
 80002f0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002f4:	2001      	movs	r0, #1
 80002f6:	e7fc      	b.n	80002f2 <HAL_InitTick+0x36>
 80002f8:	20000004 	.word	0x20000004
 80002fc:	20000000 	.word	0x20000000
 8000300:	20000008 	.word	0x20000008

08000304 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000304:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_Init+0x20>)
{
 8000306:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000308:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800030a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800030c:	f043 0310 	orr.w	r3, r3, #16
 8000310:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000312:	f000 f82d 	bl	8000370 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000316:	200f      	movs	r0, #15
 8000318:	f7ff ffd0 	bl	80002bc <HAL_InitTick>
  HAL_MspInit();
 800031c:	f7ff ff74 	bl	8000208 <HAL_MspInit>
}
 8000320:	2000      	movs	r0, #0
 8000322:	bd08      	pop	{r3, pc}
 8000324:	40022000 	.word	0x40022000

08000328 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000328:	4a03      	ldr	r2, [pc, #12]	; (8000338 <HAL_IncTick+0x10>)
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <HAL_IncTick+0x14>)
 800032c:	6811      	ldr	r1, [r2, #0]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	440b      	add	r3, r1
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	200000f8 	.word	0x200000f8
 800033c:	20000004 	.word	0x20000004

08000340 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000340:	4b01      	ldr	r3, [pc, #4]	; (8000348 <HAL_GetTick+0x8>)
 8000342:	6818      	ldr	r0, [r3, #0]
}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	200000f8 	.word	0x200000f8

0800034c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800034c:	b538      	push	{r3, r4, r5, lr}
 800034e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000350:	f7ff fff6 	bl	8000340 <HAL_GetTick>
 8000354:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000356:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000358:	bf1e      	ittt	ne
 800035a:	4b04      	ldrne	r3, [pc, #16]	; (800036c <HAL_Delay+0x20>)
 800035c:	781b      	ldrbne	r3, [r3, #0]
 800035e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000360:	f7ff ffee 	bl	8000340 <HAL_GetTick>
 8000364:	1b43      	subs	r3, r0, r5
 8000366:	42a3      	cmp	r3, r4
 8000368:	d3fa      	bcc.n	8000360 <HAL_Delay+0x14>
  {
  }
}
 800036a:	bd38      	pop	{r3, r4, r5, pc}
 800036c:	20000004 	.word	0x20000004

08000370 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000370:	4907      	ldr	r1, [pc, #28]	; (8000390 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000372:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000374:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800037a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800037e:	0412      	lsls	r2, r2, #16
 8000380:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800038c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800038e:	4770      	bx	lr
 8000390:	e000ed00 	.word	0xe000ed00

08000394 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000396:	b530      	push	{r4, r5, lr}
 8000398:	68dc      	ldr	r4, [r3, #12]
 800039a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800039e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a4:	2b04      	cmp	r3, #4
 80003a6:	bf28      	it	cs
 80003a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b0:	bf98      	it	ls
 80003b2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b4:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b8:	bf88      	it	hi
 80003ba:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	ea21 0303 	bic.w	r3, r1, r3
 80003c0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003c2:	fa05 f404 	lsl.w	r4, r5, r4
 80003c6:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80003ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d0:	bfac      	ite	ge
 80003d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d6:	4a07      	ldrlt	r2, [pc, #28]	; (80003f4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	bfab      	itete	ge
 80003e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	e000ed00 	.word	0xe000ed00
 80003f4:	e000ed14 	.word	0xe000ed14

080003f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80003f8:	2800      	cmp	r0, #0
 80003fa:	db08      	blt.n	800040e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003fc:	2301      	movs	r3, #1
 80003fe:	0942      	lsrs	r2, r0, #5
 8000400:	f000 001f 	and.w	r0, r0, #31
 8000404:	fa03 f000 	lsl.w	r0, r3, r0
 8000408:	4b01      	ldr	r3, [pc, #4]	; (8000410 <HAL_NVIC_EnableIRQ+0x18>)
 800040a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800040e:	4770      	bx	lr
 8000410:	e000e100 	.word	0xe000e100

08000414 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000414:	3801      	subs	r0, #1
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d20b      	bcs.n	8000434 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000420:	21f0      	movs	r1, #240	; 0xf0
 8000422:	4a05      	ldr	r2, [pc, #20]	; (8000438 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000424:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000426:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800042c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000430:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000432:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000434:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000436:	4770      	bx	lr
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800043c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800043e:	4604      	mov	r4, r0
{
 8000440:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000442:	b310      	cbz	r0, 800048a <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000444:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000448:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800044c:	b91b      	cbnz	r3, 8000456 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800044e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000452:	f002 fcd7 	bl	8002e04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000456:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000458:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800045a:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 800045c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000460:	f855 0b10 	ldr.w	r0, [r5], #16
 8000464:	f001 f93a 	bl	80016dc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800046a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800046c:	682b      	ldr	r3, [r5, #0]
 800046e:	1d27      	adds	r7, r4, #4
 8000470:	6033      	str	r3, [r6, #0]
 8000472:	4626      	mov	r6, r4
 8000474:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000478:	f856 0b10 	ldr.w	r0, [r6], #16
 800047c:	f001 f91e 	bl	80016bc <USB_CoreInit>
 8000480:	4605      	mov	r5, r0
 8000482:	b120      	cbz	r0, 800048e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000484:	2302      	movs	r3, #2
 8000486:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800048a:	2501      	movs	r5, #1
 800048c:	e04c      	b.n	8000528 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800048e:	4601      	mov	r1, r0
 8000490:	6820      	ldr	r0, [r4, #0]
 8000492:	f001 f92d 	bl	80016f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000496:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000498:	f04f 0e01 	mov.w	lr, #1
 800049c:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800049e:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80004a0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80004a4:	b2ca      	uxtb	r2, r1
 80004a6:	4594      	cmp	ip, r2
 80004a8:	f101 0101 	add.w	r1, r1, #1
 80004ac:	d81b      	bhi.n	80004e6 <HAL_PCD_Init+0xaa>
 80004ae:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80004b0:	2528      	movs	r5, #40	; 0x28
 80004b2:	4619      	mov	r1, r3
 80004b4:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80004b6:	4584      	cmp	ip, r0
 80004b8:	f103 0301 	add.w	r3, r3, #1
 80004bc:	d820      	bhi.n	8000500 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80004be:	46ec      	mov	ip, sp
 80004c0:	4635      	mov	r5, r6
 80004c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80004c8:	682b      	ldr	r3, [r5, #0]
 80004ca:	f8cc 3000 	str.w	r3, [ip]
 80004ce:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80004d2:	6820      	ldr	r0, [r4, #0]
 80004d4:	f001 f90e 	bl	80016f4 <USB_DevInit>
 80004d8:	2301      	movs	r3, #1
 80004da:	4605      	mov	r5, r0
 80004dc:	b1e8      	cbz	r0, 800051a <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80004de:	2202      	movs	r2, #2
 80004e0:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80004e4:	e7d1      	b.n	800048a <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80004e6:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80004ea:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80004ee:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80004f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80004f6:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80004f8:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80004fc:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80004fe:	e7d1      	b.n	80004a4 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8000500:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000504:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8000508:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 800050c:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000510:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000514:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000518:	e7cc      	b.n	80004b4 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 800051a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 800051e:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000520:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000524:	f001 faa7 	bl	8001a76 <USB_DevDisconnect>

  return HAL_OK;
}
 8000528:	4628      	mov	r0, r5
 800052a:	b007      	add	sp, #28
 800052c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800052e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800052e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000530:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000534:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000536:	2b01      	cmp	r3, #1
 8000538:	d010      	beq.n	800055c <HAL_PCD_Start+0x2e>
 800053a:	2501      	movs	r5, #1
 800053c:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000540:	6800      	ldr	r0, [r0, #0]
 8000542:	f001 f8c2 	bl	80016ca <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000546:	4629      	mov	r1, r5
 8000548:	4620      	mov	r0, r4
 800054a:	f002 fd4a 	bl	8002fe2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800054e:	6820      	ldr	r0, [r4, #0]
 8000550:	f001 fa8f 	bl	8001a72 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000554:	2000      	movs	r0, #0
 8000556:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800055a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800055c:	2002      	movs	r0, #2
 800055e:	e7fc      	b.n	800055a <HAL_PCD_Start+0x2c>

08000560 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8000560:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000562:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000566:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000568:	2b01      	cmp	r3, #1
 800056a:	d010      	beq.n	800058e <HAL_PCD_Stop+0x2e>
 800056c:	2301      	movs	r3, #1
 800056e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8000572:	6800      	ldr	r0, [r0, #0]
 8000574:	f001 f8b2 	bl	80016dc <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8000578:	2100      	movs	r1, #0
 800057a:	4620      	mov	r0, r4
 800057c:	f002 fd31 	bl	8002fe2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8000580:	6820      	ldr	r0, [r4, #0]
 8000582:	f001 fa78 	bl	8001a76 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8000586:	2000      	movs	r0, #0
 8000588:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800058c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800058e:	2002      	movs	r0, #2
 8000590:	e7fc      	b.n	800058c <HAL_PCD_Stop+0x2c>

08000592 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000592:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000594:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8000598:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800059a:	2a01      	cmp	r2, #1
 800059c:	d00b      	beq.n	80005b6 <HAL_PCD_SetAddress+0x24>
 800059e:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80005a0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80005a4:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80005a8:	6800      	ldr	r0, [r0, #0]
 80005aa:	f001 fa5c 	bl	8001a66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80005b4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005b6:	2002      	movs	r0, #2
 80005b8:	e7fc      	b.n	80005b4 <HAL_PCD_SetAddress+0x22>
	...

080005bc <HAL_PCD_IRQHandler>:
{
 80005bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005c0:	4604      	mov	r4, r0
 80005c2:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80005c4:	6800      	ldr	r0, [r0, #0]
 80005c6:	f001 fa58 	bl	8001a7a <USB_ReadInterrupts>
 80005ca:	0401      	lsls	r1, r0, #16
 80005cc:	d509      	bpl.n	80005e2 <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80005ce:	f8df 930c 	ldr.w	r9, [pc, #780]	; 80008dc <HAL_PCD_IRQHandler+0x320>
 80005d2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80008e0 <HAL_PCD_IRQHandler+0x324>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80005d6:	6820      	ldr	r0, [r4, #0]
 80005d8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80005dc:	041d      	lsls	r5, r3, #16
 80005de:	f100 80c1 	bmi.w	8000764 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80005e2:	6820      	ldr	r0, [r4, #0]
 80005e4:	f001 fa49 	bl	8001a7a <USB_ReadInterrupts>
 80005e8:	0542      	lsls	r2, r0, #21
 80005ea:	d50f      	bpl.n	800060c <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80005ec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80005ee:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80005f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80005f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	0c1b      	lsrs	r3, r3, #16
 80005fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000600:	f002 fc3b 	bl	8002e7a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000604:	2100      	movs	r1, #0
 8000606:	4620      	mov	r0, r4
 8000608:	f7ff ffc3 	bl	8000592 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800060c:	6820      	ldr	r0, [r4, #0]
 800060e:	f001 fa34 	bl	8001a7a <USB_ReadInterrupts>
 8000612:	0441      	lsls	r1, r0, #17
 8000614:	d508      	bpl.n	8000628 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800061c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000628:	6820      	ldr	r0, [r4, #0]
 800062a:	f001 fa26 	bl	8001a7a <USB_ReadInterrupts>
 800062e:	0482      	lsls	r2, r0, #18
 8000630:	d508      	bpl.n	8000644 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000632:	6822      	ldr	r2, [r4, #0]
 8000634:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800063c:	041b      	lsls	r3, r3, #16
 800063e:	0c1b      	lsrs	r3, r3, #16
 8000640:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000644:	6820      	ldr	r0, [r4, #0]
 8000646:	f001 fa18 	bl	8001a7a <USB_ReadInterrupts>
 800064a:	04c3      	lsls	r3, r0, #19
 800064c:	d51c      	bpl.n	8000688 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800064e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000650:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000652:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000656:	f023 0304 	bic.w	r3, r3, #4
 800065a:	041b      	lsls	r3, r3, #16
 800065c:	0c1b      	lsrs	r3, r3, #16
 800065e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000662:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000666:	f023 0308 	bic.w	r3, r3, #8
 800066a:	041b      	lsls	r3, r3, #16
 800066c:	0c1b      	lsrs	r3, r3, #16
 800066e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000672:	f002 fc25 	bl	8002ec0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000676:	6822      	ldr	r2, [r4, #0]
 8000678:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800067c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000688:	6820      	ldr	r0, [r4, #0]
 800068a:	f001 f9f6 	bl	8001a7a <USB_ReadInterrupts>
 800068e:	0507      	lsls	r7, r0, #20
 8000690:	d546      	bpl.n	8000720 <HAL_PCD_IRQHandler+0x164>
 8000692:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	4606      	mov	r6, r0
 8000698:	4619      	mov	r1, r3
 800069a:	461a      	mov	r2, r3
 800069c:	f103 0520 	add.w	r5, r3, #32
 80006a0:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80006a4:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80006a6:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80006aa:	d1f9      	bne.n	80006a0 <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80006ac:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80006b0:	b292      	uxth	r2, r2
 80006b2:	f042 0201 	orr.w	r2, r2, #1
 80006b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80006ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80006be:	f022 0201 	bic.w	r2, r2, #1
 80006c2:	0412      	lsls	r2, r2, #16
 80006c4:	0c12      	lsrs	r2, r2, #16
 80006c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80006ca:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80006ce:	0556      	lsls	r6, r2, #21
 80006d0:	d5fb      	bpl.n	80006ca <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80006d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006da:	0412      	lsls	r2, r2, #16
 80006dc:	0c12      	lsrs	r2, r2, #16
 80006de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80006e2:	f830 2b02 	ldrh.w	r2, [r0], #2
 80006e6:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80006ea:	428d      	cmp	r5, r1
 80006ec:	d1f9      	bne.n	80006e2 <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80006ee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80006f2:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80006f4:	b292      	uxth	r2, r2
 80006f6:	f042 0208 	orr.w	r2, r2, #8
 80006fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80006fe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000706:	0412      	lsls	r2, r2, #16
 8000708:	0c12      	lsrs	r2, r2, #16
 800070a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800070e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000712:	b292      	uxth	r2, r2
 8000714:	f042 0204 	orr.w	r2, r2, #4
 8000718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800071c:	f002 fbc0 	bl	8002ea0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000720:	6820      	ldr	r0, [r4, #0]
 8000722:	f001 f9aa 	bl	8001a7a <USB_ReadInterrupts>
 8000726:	0582      	lsls	r2, r0, #22
 8000728:	d50b      	bpl.n	8000742 <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800072a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800072c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800072e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000732:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000736:	041b      	lsls	r3, r3, #16
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800073e:	f002 fb98 	bl	8002e72 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000742:	6820      	ldr	r0, [r4, #0]
 8000744:	f001 f999 	bl	8001a7a <USB_ReadInterrupts>
 8000748:	05c3      	lsls	r3, r0, #23
 800074a:	d508      	bpl.n	800075e <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800074c:	6822      	ldr	r2, [r4, #0]
 800074e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000756:	041b      	lsls	r3, r3, #16
 8000758:	0c1b      	lsrs	r3, r3, #16
 800075a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800075e:	b005      	add	sp, #20
 8000760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000764:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8000768:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 800076a:	f016 060f 	ands.w	r6, r6, #15
 800076e:	f040 80c1 	bne.w	80008f4 <HAL_PCD_IRQHandler+0x338>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000772:	f011 0110 	ands.w	r1, r1, #16
 8000776:	d12d      	bne.n	80007d4 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000778:	8803      	ldrh	r3, [r0, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	ea03 0309 	and.w	r3, r3, r9
 8000780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000784:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000786:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800078a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800078e:	b29b      	uxth	r3, r3
 8000790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000794:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000798:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800079c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800079e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007a2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80007a4:	4413      	add	r3, r2
 80007a6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80007a8:	4620      	mov	r0, r4
 80007aa:	f002 fb5a 	bl	8002e62 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80007ae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f43f af0f 	beq.w	80005d6 <HAL_PCD_IRQHandler+0x1a>
 80007b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	f47f af0b 	bne.w	80005d6 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80007c0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80007c4:	6821      	ldr	r1, [r4, #0]
 80007c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ca:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80007ce:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80007d2:	e700      	b.n	80005d6 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80007d4:	8805      	ldrh	r5, [r0, #0]
 80007d6:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80007d8:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 80007dc:	d021      	beq.n	8000822 <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80007de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80007e2:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80007ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80007f0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80007f4:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80007f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80007fc:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000800:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8000804:	f001 fbde 	bl	8001fc4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000808:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800080a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800080c:	8813      	ldrh	r3, [r2, #0]
 800080e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000812:	051b      	lsls	r3, r3, #20
 8000814:	0d1b      	lsrs	r3, r3, #20
 8000816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800081c:	f002 fb12 	bl	8002e44 <HAL_PCD_SetupStageCallback>
 8000820:	e6d9      	b.n	80005d6 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000822:	041b      	lsls	r3, r3, #16
 8000824:	f57f aed7 	bpl.w	80005d6 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000828:	8803      	ldrh	r3, [r0, #0]
 800082a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800082e:	051b      	lsls	r3, r3, #20
 8000830:	0d1b      	lsrs	r3, r3, #20
 8000832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000836:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000838:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800083c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000840:	b29b      	uxth	r3, r3
 8000842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000846:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800084a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800084e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000852:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000856:	b18b      	cbz	r3, 800087c <HAL_PCD_IRQHandler+0x2c0>
 8000858:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800085c:	b171      	cbz	r1, 800087c <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800085e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000862:	f001 fbaf 	bl	8001fc4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000866:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800086a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800086e:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8000870:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000872:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000874:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000878:	f002 faea 	bl	8002e50 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800087c:	6821      	ldr	r1, [r4, #0]
 800087e:	880b      	ldrh	r3, [r1, #0]
 8000880:	051f      	lsls	r7, r3, #20
 8000882:	f53f aea8 	bmi.w	80005d6 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000886:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800088a:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 800088e:	b29b      	uxth	r3, r3
 8000890:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8000894:	b9cd      	cbnz	r5, 80008ca <HAL_PCD_IRQHandler+0x30e>
 8000896:	5ac2      	ldrh	r2, [r0, r3]
 8000898:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800089c:	0412      	lsls	r2, r2, #16
 800089e:	0c12      	lsrs	r2, r2, #16
 80008a0:	52c2      	strh	r2, [r0, r3]
 80008a2:	5ac2      	ldrh	r2, [r0, r3]
 80008a4:	b292      	uxth	r2, r2
 80008a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008aa:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80008ac:	880b      	ldrh	r3, [r1, #0]
 80008ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008b6:	041b      	lsls	r3, r3, #16
 80008b8:	0c1b      	lsrs	r3, r3, #16
 80008ba:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80008be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c6:	800b      	strh	r3, [r1, #0]
 80008c8:	e685      	b.n	80005d6 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80008ca:	2d3e      	cmp	r5, #62	; 0x3e
 80008cc:	d80a      	bhi.n	80008e4 <HAL_PCD_IRQHandler+0x328>
 80008ce:	086a      	lsrs	r2, r5, #1
 80008d0:	07ee      	lsls	r6, r5, #31
 80008d2:	bf48      	it	mi
 80008d4:	3201      	addmi	r2, #1
 80008d6:	0292      	lsls	r2, r2, #10
 80008d8:	b292      	uxth	r2, r2
 80008da:	e7e6      	b.n	80008aa <HAL_PCD_IRQHandler+0x2ee>
 80008dc:	ffff8f0f 	.word	0xffff8f0f
 80008e0:	ffff8000 	.word	0xffff8000
 80008e4:	096a      	lsrs	r2, r5, #5
 80008e6:	06ed      	lsls	r5, r5, #27
 80008e8:	bf08      	it	eq
 80008ea:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80008ee:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 80008f2:	e7f1      	b.n	80008d8 <HAL_PCD_IRQHandler+0x31c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80008f4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80008f8:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80008fa:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80008fc:	f140 80ee 	bpl.w	8000adc <HAL_PCD_IRQHandler+0x520>
        if (ep->doublebuffer == 0U)
 8000900:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000902:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000906:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800090a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800090e:	051b      	lsls	r3, r3, #20
 8000910:	0d1b      	lsrs	r3, r3, #20
 8000912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000916:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800091a:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800091e:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8000922:	b9b3      	cbnz	r3, 8000952 <HAL_PCD_IRQHandler+0x396>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000924:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000928:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800092c:	b29b      	uxth	r3, r3
 800092e:	3306      	adds	r3, #6
 8000930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000934:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8000938:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800093c:	2d00      	cmp	r5, #0
 800093e:	f000 80b1 	beq.w	8000aa4 <HAL_PCD_IRQHandler+0x4e8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000942:	462b      	mov	r3, r5
 8000944:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000948:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800094c:	f001 fb3a 	bl	8001fc4 <USB_ReadPMA>
 8000950:	e0a8      	b.n	8000aa4 <HAL_PCD_IRQHandler+0x4e8>
          if (ep->type == EP_TYPE_BULK)
 8000952:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000956:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 800095a:	2a02      	cmp	r2, #2
 800095c:	f040 8081 	bne.w	8000a62 <HAL_PCD_IRQHandler+0x4a6>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000960:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000964:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8000968:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800096c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000970:	b2ad      	uxth	r5, r5
 8000972:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000976:	d03b      	beq.n	80009f0 <HAL_PCD_IRQHandler+0x434>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000978:	44ab      	add	fp, r5
 800097a:	f10b 0b02 	add.w	fp, fp, #2
 800097e:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 8000982:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 8000986:	4295      	cmp	r5, r2
 8000988:	d913      	bls.n	80009b2 <HAL_PCD_IRQHandler+0x3f6>
 800098a:	2200      	movs	r2, #0
 800098c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000990:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000994:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000998:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800099c:	0412      	lsls	r2, r2, #16
 800099e:	0c12      	lsrs	r2, r2, #16
 80009a0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80009a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009ac:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80009b0:	e004      	b.n	80009bc <HAL_PCD_IRQHandler+0x400>
      ep->xfer_len -= count;
 80009b2:	1b52      	subs	r2, r2, r5
 80009b4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d0e9      	beq.n	8000990 <HAL_PCD_IRQHandler+0x3d4>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80009bc:	f1be 0f00 	cmp.w	lr, #0
 80009c0:	d00d      	beq.n	80009de <HAL_PCD_IRQHandler+0x422>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80009c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80009c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80009ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80009ce:	0412      	lsls	r2, r2, #16
 80009d0:	0c12      	lsrs	r2, r2, #16
 80009d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80009da:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d060      	beq.n	8000aa4 <HAL_PCD_IRQHandler+0x4e8>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80009e2:	2128      	movs	r1, #40	; 0x28
 80009e4:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80009e8:	462b      	mov	r3, r5
 80009ea:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80009ee:	e7ab      	b.n	8000948 <HAL_PCD_IRQHandler+0x38c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80009f0:	445d      	add	r5, fp
 80009f2:	3506      	adds	r5, #6
 80009f4:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 80009f8:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80009fc:	4295      	cmp	r5, r2
 80009fe:	d912      	bls.n	8000a26 <HAL_PCD_IRQHandler+0x46a>
 8000a00:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000a04:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000a08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a10:	0412      	lsls	r2, r2, #16
 8000a12:	0c12      	lsrs	r2, r2, #16
 8000a14:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000a18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a20:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8000a24:	e004      	b.n	8000a30 <HAL_PCD_IRQHandler+0x474>
      ep->xfer_len -= count;
 8000a26:	1b52      	subs	r2, r2, r5
 8000a28:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d0e9      	beq.n	8000a04 <HAL_PCD_IRQHandler+0x448>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8000a30:	f1be 0f00 	cmp.w	lr, #0
 8000a34:	d10d      	bne.n	8000a52 <HAL_PCD_IRQHandler+0x496>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000a36:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000a3a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a42:	0412      	lsls	r2, r2, #16
 8000a44:	0c12      	lsrs	r2, r2, #16
 8000a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a4a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000a4e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8000a52:	b33d      	cbz	r5, 8000aa4 <HAL_PCD_IRQHandler+0x4e8>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000a54:	2128      	movs	r1, #40	; 0x28
 8000a56:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000a5a:	462b      	mov	r3, r5
 8000a5c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8000a60:	e772      	b.n	8000948 <HAL_PCD_IRQHandler+0x38c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000a62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000a66:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000a6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a6e:	0412      	lsls	r2, r2, #16
 8000a70:	0c12      	lsrs	r2, r2, #16
 8000a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a76:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000a7a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000a7e:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8000a82:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a8c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000a90:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000a92:	d056      	beq.n	8000b42 <HAL_PCD_IRQHandler+0x586>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a94:	3202      	adds	r2, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8000a9c:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d1a1      	bne.n	80009e8 <HAL_PCD_IRQHandler+0x42c>
        ep->xfer_count += count;
 8000aa4:	2128      	movs	r1, #40	; 0x28
 8000aa6:	4371      	muls	r1, r6
 8000aa8:	1863      	adds	r3, r4, r1
 8000aaa:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000aae:	442a      	add	r2, r5
 8000ab0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8000ab4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8000ab8:	442a      	add	r2, r5
 8000aba:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000abe:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000ac2:	b11a      	cbz	r2, 8000acc <HAL_PCD_IRQHandler+0x510>
 8000ac4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8000ac8:	429d      	cmp	r5, r3
 8000aca:	d243      	bcs.n	8000b54 <HAL_PCD_IRQHandler+0x598>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000acc:	2328      	movs	r3, #40	; 0x28
 8000ace:	fb03 4306 	mla	r3, r3, r6, r4
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8000ad8:	f002 f9ba 	bl	8002e50 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000adc:	063a      	lsls	r2, r7, #24
 8000ade:	f57f ad7a 	bpl.w	80005d6 <HAL_PCD_IRQHandler+0x1a>
 8000ae2:	2528      	movs	r5, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	fb05 4506 	mla	r5, r5, r6, r4
 8000aea:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	ea03 0309 	and.w	r3, r3, r9
 8000af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000af8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8000afc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8000b00:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d004      	beq.n	8000b12 <HAL_PCD_IRQHandler+0x556>
 8000b08:	b11b      	cbz	r3, 8000b12 <HAL_PCD_IRQHandler+0x556>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d13a      	bne.n	8000b84 <HAL_PCD_IRQHandler+0x5c8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8000b0e:	05fb      	lsls	r3, r7, #23
 8000b10:	d438      	bmi.n	8000b84 <HAL_PCD_IRQHandler+0x5c8>
          if (ep->xfer_len > TxByteNbre)
 8000b12:	2528      	movs	r5, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8000b18:	fb05 4206 	mla	r2, r5, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	3302      	adds	r3, #2
 8000b20:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000b24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b28:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
          if (ep->xfer_len > TxByteNbre)
 8000b2c:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8000b2e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000b32:	4567      	cmp	r7, ip
 8000b34:	d815      	bhi.n	8000b62 <HAL_PCD_IRQHandler+0x5a6>
 8000b36:	2300      	movs	r3, #0
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f002 f991 	bl	8002e62 <HAL_PCD_DataInStageCallback>
 8000b40:	e549      	b.n	80005d6 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b42:	3206      	adds	r2, #6
 8000b44:	4413      	add	r3, r2
 8000b46:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8000b4a:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0a8      	beq.n	8000aa4 <HAL_PCD_IRQHandler+0x4e8>
 8000b52:	e782      	b.n	8000a5a <HAL_PCD_IRQHandler+0x49e>
        ep = &hpcd->OUT_ep[epindex];
 8000b54:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8000b58:	6820      	ldr	r0, [r4, #0]
 8000b5a:	4421      	add	r1, r4
 8000b5c:	f000 ffa4 	bl	8001aa8 <USB_EPStartXfer>
 8000b60:	e7bc      	b.n	8000adc <HAL_PCD_IRQHandler+0x520>
            ep->xfer_len -= TxByteNbre;
 8000b62:	eba7 070c 	sub.w	r7, r7, ip
 8000b66:	6417      	str	r7, [r2, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8000b68:	2f00      	cmp	r7, #0
 8000b6a:	d0e6      	beq.n	8000b3a <HAL_PCD_IRQHandler+0x57e>
        ep = &hpcd->IN_ep[epindex];
 8000b6c:	fb06 5505 	mla	r5, r6, r5, r5
            ep->xfer_buff += TxByteNbre;
 8000b70:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000b72:	6c53      	ldr	r3, [r2, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8000b74:	4461      	add	r1, ip
            ep->xfer_count += TxByteNbre;
 8000b76:	4463      	add	r3, ip
            ep->xfer_buff += TxByteNbre;
 8000b78:	63d1      	str	r1, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000b7a:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000b7c:	1961      	adds	r1, r4, r5
 8000b7e:	f000 ff93 	bl	8001aa8 <USB_EPStartXfer>
 8000b82:	e528      	b.n	80005d6 <HAL_PCD_IRQHandler+0x1a>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len > TxByteNbre)
 8000b84:	2328      	movs	r3, #40	; 0x28
 8000b86:	fb03 4306 	mla	r3, r3, r6, r4
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b8a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8000b8e:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8000b92:	fa1f fc8c 	uxth.w	ip, ip
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000b96:	f017 0240 	ands.w	r2, r7, #64	; 0x40
    if (ep->xfer_len > TxByteNbre)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ba0:	44d4      	add	ip, sl
 8000ba2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000ba6:	f000 80e4 	beq.w	8000d72 <HAL_PCD_IRQHandler+0x7b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000baa:	f10c 0c02 	add.w	ip, ip, #2
 8000bae:	f83e c01c 	ldrh.w	ip, [lr, ip, lsl #1]
 8000bb2:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8000bb4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000bb8:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8000bba:	bf28      	it	cs
 8000bbc:	2300      	movcs	r3, #0
 8000bbe:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8000bc2:	bf38      	it	cc
 8000bc4:	eba3 030c 	subcc.w	r3, r3, ip
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8000bca:	b2bf      	uxth	r7, r7
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d151      	bne.n	8000c74 <HAL_PCD_IRQHandler+0x6b8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000bd0:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	d13a      	bne.n	8000c4e <HAL_PCD_IRQHandler+0x692>
 8000bd8:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8000bdc:	010b      	lsls	r3, r1, #4
 8000bde:	b2b2      	uxth	r2, r6
 8000be0:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8000be4:	4416      	add	r6, r2
 8000be6:	5af2      	ldrh	r2, [r6, r3]
 8000be8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000bec:	0412      	lsls	r2, r2, #16
 8000bee:	0c12      	lsrs	r2, r2, #16
 8000bf0:	52f2      	strh	r2, [r6, r3]
 8000bf2:	5af2      	ldrh	r2, [r6, r3]
 8000bf4:	b292      	uxth	r2, r2
 8000bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bfa:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000bfc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000c00:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8000c04:	b292      	uxth	r2, r2
 8000c06:	4410      	add	r0, r2
 8000c08:	5ac2      	ldrh	r2, [r0, r3]
 8000c0a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000c0e:	0412      	lsls	r2, r2, #16
 8000c10:	0c12      	lsrs	r2, r2, #16
 8000c12:	52c2      	strh	r2, [r0, r3]
 8000c14:	5ac2      	ldrh	r2, [r0, r3]
 8000c16:	b292      	uxth	r2, r2
 8000c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c1c:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f002 f91f 	bl	8002e62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000c24:	2f00      	cmp	r7, #0
 8000c26:	f000 80e2 	beq.w	8000dee <HAL_PCD_IRQHandler+0x832>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000c2a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	0c1b      	lsrs	r3, r3, #16
 8000c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000c4c:	e0cf      	b.n	8000dee <HAL_PCD_IRQHandler+0x832>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c4e:	2a01      	cmp	r2, #1
 8000c50:	d1e5      	bne.n	8000c1e <HAL_PCD_IRQHandler+0x662>
 8000c52:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8000c56:	010a      	lsls	r2, r1, #4
 8000c58:	fa1f fc86 	uxth.w	ip, r6
 8000c5c:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8000c60:	4466      	add	r6, ip
 8000c62:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000c64:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8000c68:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8000c6c:	b2b6      	uxth	r6, r6
 8000c6e:	4430      	add	r0, r6
 8000c70:	5283      	strh	r3, [r0, r2]
 8000c72:	e7d4      	b.n	8000c1e <HAL_PCD_IRQHandler+0x662>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000c74:	b16f      	cbz	r7, 8000c92 <HAL_PCD_IRQHandler+0x6d6>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000c76:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c82:	041b      	lsls	r3, r3, #16
 8000c84:	0c1b      	lsrs	r3, r3, #16
 8000c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8000c92:	2328      	movs	r3, #40	; 0x28
 8000c94:	fb03 4306 	mla	r3, r3, r6, r4
 8000c98:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8000c9c:	2a01      	cmp	r2, #1
 8000c9e:	f040 80a6 	bne.w	8000dee <HAL_PCD_IRQHandler+0x832>
        ep->xfer_buff += TxByteNbre;
 8000ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8000ca4:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8000ca8:	eb02 070c 	add.w	r7, r2, ip
        ep->xfer_count += TxByteNbre;
 8000cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8000cae:	63df      	str	r7, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8000cb0:	4462      	add	r2, ip
 8000cb2:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8000cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb6:	4596      	cmp	lr, r2
 8000cb8:	d329      	bcc.n	8000d0e <HAL_PCD_IRQHandler+0x752>
          ep->xfer_len_db -= len;
 8000cba:	ebae 0e02 	sub.w	lr, lr, r2
 8000cbe:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000cc2:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 8000cc6:	b293      	uxth	r3, r2
 8000cc8:	f1bc 0f00 	cmp.w	ip, #0
 8000ccc:	d144      	bne.n	8000d58 <HAL_PCD_IRQHandler+0x79c>
 8000cce:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8000cd2:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8000cd6:	fa1f fc8c 	uxth.w	ip, ip
 8000cda:	44f4      	add	ip, lr
 8000cdc:	0109      	lsls	r1, r1, #4
 8000cde:	bb1a      	cbnz	r2, 8000d28 <HAL_PCD_IRQHandler+0x76c>
 8000ce0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8000ce4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000ce8:	0412      	lsls	r2, r2, #16
 8000cea:	0c12      	lsrs	r2, r2, #16
 8000cec:	f82c 2001 	strh.w	r2, [ip, r1]
 8000cf0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8000cf4:	b292      	uxth	r2, r2
 8000cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cfa:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8000cfe:	2128      	movs	r1, #40	; 0x28
 8000d00:	fb01 4606 	mla	r6, r1, r6, r4
 8000d04:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8000d06:	4639      	mov	r1, r7
 8000d08:	f000 febd 	bl	8001a86 <USB_WritePMA>
 8000d0c:	e06f      	b.n	8000dee <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 8000d0e:	f1be 0f00 	cmp.w	lr, #0
 8000d12:	d103      	bne.n	8000d1c <HAL_PCD_IRQHandler+0x760>
    if (ep->xfer_len > TxByteNbre)
 8000d14:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8000d16:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
 8000d1a:	e7d2      	b.n	8000cc2 <HAL_PCD_IRQHandler+0x706>
          ep->xfer_fill_db = 0U;
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8000d22:	649a      	str	r2, [r3, #72]	; 0x48
 8000d24:	4672      	mov	r2, lr
 8000d26:	e7cc      	b.n	8000cc2 <HAL_PCD_IRQHandler+0x706>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000d28:	2a3e      	cmp	r2, #62	; 0x3e
 8000d2a:	d80c      	bhi.n	8000d46 <HAL_PCD_IRQHandler+0x78a>
 8000d2c:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8000d30:	07d2      	lsls	r2, r2, #31
 8000d32:	bf48      	it	mi
 8000d34:	f10e 0e01 	addmi.w	lr, lr, #1
 8000d38:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8000d3c:	fa1f fe8e 	uxth.w	lr, lr
 8000d40:	f82c e001 	strh.w	lr, [ip, r1]
 8000d44:	e7db      	b.n	8000cfe <HAL_PCD_IRQHandler+0x742>
 8000d46:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8000d4a:	06d2      	lsls	r2, r2, #27
 8000d4c:	bf08      	it	eq
 8000d4e:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8000d52:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8000d56:	e7f1      	b.n	8000d3c <HAL_PCD_IRQHandler+0x780>
 8000d58:	f1bc 0f01 	cmp.w	ip, #1
 8000d5c:	d1cf      	bne.n	8000cfe <HAL_PCD_IRQHandler+0x742>
 8000d5e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000d62:	0109      	lsls	r1, r1, #4
 8000d64:	fa1f fc82 	uxth.w	ip, r2
 8000d68:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8000d6c:	4462      	add	r2, ip
 8000d6e:	5253      	strh	r3, [r2, r1]
 8000d70:	e7c5      	b.n	8000cfe <HAL_PCD_IRQHandler+0x742>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d72:	f10c 0c06 	add.w	ip, ip, #6
 8000d76:	f83e c01c 	ldrh.w	ip, [lr, ip, lsl #1]
 8000d7a:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxByteNbre)
 8000d7c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000d80:	459c      	cmp	ip, r3
      ep->xfer_len -= TxByteNbre;
 8000d82:	bf98      	it	ls
 8000d84:	eba3 020c 	subls.w	r2, r3, ip
 8000d88:	2328      	movs	r3, #40	; 0x28
 8000d8a:	fb03 4306 	mla	r3, r3, r6, r4
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d152      	bne.n	8000e3a <HAL_PCD_IRQHandler+0x87e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000d94:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d13c      	bne.n	8000e16 <HAL_PCD_IRQHandler+0x85a>
 8000d9c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8000da0:	010b      	lsls	r3, r1, #4
 8000da2:	b2b2      	uxth	r2, r6
 8000da4:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8000da8:	4416      	add	r6, r2
 8000daa:	5af2      	ldrh	r2, [r6, r3]
 8000dac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000db0:	0412      	lsls	r2, r2, #16
 8000db2:	0c12      	lsrs	r2, r2, #16
 8000db4:	52f2      	strh	r2, [r6, r3]
 8000db6:	5af2      	ldrh	r2, [r6, r3]
 8000db8:	b292      	uxth	r2, r2
 8000dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dbe:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000dc0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000dc4:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8000dc8:	b292      	uxth	r2, r2
 8000dca:	4410      	add	r0, r2
 8000dcc:	5ac2      	ldrh	r2, [r0, r3]
 8000dce:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	0c12      	lsrs	r2, r2, #16
 8000dd6:	52c2      	strh	r2, [r0, r3]
 8000dd8:	5ac2      	ldrh	r2, [r0, r3]
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000de0:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000de2:	4620      	mov	r0, r4
 8000de4:	f002 f83d 	bl	8002e62 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000de8:	2f00      	cmp	r7, #0
 8000dea:	f43f af1e 	beq.w	8000c2a <HAL_PCD_IRQHandler+0x66e>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8000dee:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e02:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8000e12:	f7ff bbe0 	b.w	80005d6 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d1e3      	bne.n	8000de2 <HAL_PCD_IRQHandler+0x826>
 8000e1a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8000e1e:	010b      	lsls	r3, r1, #4
 8000e20:	fa1f fc86 	uxth.w	ip, r6
 8000e24:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8000e28:	4466      	add	r6, ip
 8000e2a:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8000e2c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8000e30:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8000e34:	b2b6      	uxth	r6, r6
 8000e36:	4430      	add	r0, r6
 8000e38:	e7d2      	b.n	8000de0 <HAL_PCD_IRQHandler+0x824>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000e3a:	b96f      	cbnz	r7, 8000e58 <HAL_PCD_IRQHandler+0x89c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000e3c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e48:	041b      	lsls	r3, r3, #16
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8000e58:	2228      	movs	r2, #40	; 0x28
 8000e5a:	fb02 4206 	mla	r2, r2, r6, r4
 8000e5e:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d1c3      	bne.n	8000dee <HAL_PCD_IRQHandler+0x832>
        ep->xfer_count += TxByteNbre;
 8000e66:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8000e68:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8000e6a:	4463      	add	r3, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8000e6c:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8000e72:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8000e74:	4467      	add	r7, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8000e76:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 8000e78:	63d7      	str	r7, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8000e7a:	d322      	bcc.n	8000ec2 <HAL_PCD_IRQHandler+0x906>
          ep->xfer_len_db -= len;
 8000e7c:	ebae 0e03 	sub.w	lr, lr, r3
 8000e80:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000e84:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8000e88:	fa1f fc83 	uxth.w	ip, r3
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	d13d      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x950>
 8000e90:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000e94:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 8000e98:	b292      	uxth	r2, r2
 8000e9a:	4472      	add	r2, lr
 8000e9c:	0109      	lsls	r1, r1, #4
 8000e9e:	b9eb      	cbnz	r3, 8000edc <HAL_PCD_IRQHandler+0x920>
 8000ea0:	5a53      	ldrh	r3, [r2, r1]
 8000ea2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	5253      	strh	r3, [r2, r1]
 8000eac:	5a53      	ldrh	r3, [r2, r1]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb4:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8000eb6:	2128      	movs	r1, #40	; 0x28
 8000eb8:	fb01 4606 	mla	r6, r1, r6, r4
 8000ebc:	4663      	mov	r3, ip
 8000ebe:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8000ec0:	e721      	b.n	8000d06 <HAL_PCD_IRQHandler+0x74a>
        else if (ep->xfer_len_db == 0U)
 8000ec2:	f1be 0f00 	cmp.w	lr, #0
 8000ec6:	d103      	bne.n	8000ed0 <HAL_PCD_IRQHandler+0x914>
    if (ep->xfer_len >= TxByteNbre)
 8000ec8:	4663      	mov	r3, ip
          ep->xfer_fill_db = 0U;
 8000eca:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
 8000ece:	e7d9      	b.n	8000e84 <HAL_PCD_IRQHandler+0x8c8>
          ep->xfer_len_db = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8000ed4:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 8000ed8:	4673      	mov	r3, lr
 8000eda:	e7d3      	b.n	8000e84 <HAL_PCD_IRQHandler+0x8c8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000edc:	2b3e      	cmp	r3, #62	; 0x3e
 8000ede:	d80c      	bhi.n	8000efa <HAL_PCD_IRQHandler+0x93e>
 8000ee0:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8000ee4:	07db      	lsls	r3, r3, #31
 8000ee6:	bf48      	it	mi
 8000ee8:	f10e 0e01 	addmi.w	lr, lr, #1
 8000eec:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8000ef0:	fa1f fe8e 	uxth.w	lr, lr
 8000ef4:	f822 e001 	strh.w	lr, [r2, r1]
 8000ef8:	e7dd      	b.n	8000eb6 <HAL_PCD_IRQHandler+0x8fa>
 8000efa:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8000efe:	06db      	lsls	r3, r3, #27
 8000f00:	bf08      	it	eq
 8000f02:	f10e 3eff 	addeq.w	lr, lr, #4294967295	; 0xffffffff
 8000f06:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8000f0a:	e7f1      	b.n	8000ef0 <HAL_PCD_IRQHandler+0x934>
 8000f0c:	2a01      	cmp	r2, #1
 8000f0e:	d1d2      	bne.n	8000eb6 <HAL_PCD_IRQHandler+0x8fa>
 8000f10:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8000f1a:	4413      	add	r3, r2
 8000f1c:	010a      	lsls	r2, r1, #4
 8000f1e:	f823 c002 	strh.w	ip, [r3, r2]
 8000f22:	e7c8      	b.n	8000eb6 <HAL_PCD_IRQHandler+0x8fa>

08000f24 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8000f24:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	4605      	mov	r5, r0
 8000f2c:	f04f 0428 	mov.w	r4, #40	; 0x28
 8000f30:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8000f34:	d01c      	beq.n	8000f70 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8000f36:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f38:	fb00 4104 	mla	r1, r0, r4, r4
 8000f3c:	4429      	add	r1, r5
    ep->is_in = 1U;
 8000f3e:	704e      	strb	r6, [r1, #1]
  ep->maxpacket = ep_mps;
 8000f40:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8000f42:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f44:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8000f46:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8000f48:	b102      	cbz	r2, 8000f4c <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8000f4a:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8000f4c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8000f4e:	bf04      	itt	eq
 8000f50:	2300      	moveq	r3, #0
 8000f52:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8000f54:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d012      	beq.n	8000f82 <HAL_PCD_EP_Open+0x5e>
 8000f5c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000f5e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8000f60:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000f64:	f000 fbda 	bl	800171c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8000f70:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f72:	4344      	muls	r4, r0
 8000f74:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8000f78:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f7a:	4429      	add	r1, r5
    ep->is_in = 0U;
 8000f7c:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8000f80:	e7de      	b.n	8000f40 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8000f82:	2002      	movs	r0, #2
 8000f84:	e7f3      	b.n	8000f6e <HAL_PCD_EP_Open+0x4a>

08000f86 <HAL_PCD_EP_Receive>:
{
 8000f86:	b570      	push	{r4, r5, r6, lr}
 8000f88:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8000f8c:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 8000f8e:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8000f90:	4369      	muls	r1, r5
 8000f92:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f94:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f98:	4401      	add	r1, r0
  ep->xfer_len = len;
 8000f9a:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 8000f9e:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8000fa2:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fa6:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000faa:	6800      	ldr	r0, [r0, #0]
 8000fac:	f000 fd7c 	bl	8001aa8 <USB_EPStartXfer>
}
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}

08000fb4 <HAL_PCD_EP_Transmit>:
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8000fba:	2128      	movs	r1, #40	; 0x28
 8000fbc:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8000fc0:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8000fc2:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8000fc6:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fc8:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8000fcc:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000fd0:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8000fd2:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8000fd4:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000fd6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fda:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000fde:	6800      	ldr	r0, [r0, #0]
 8000fe0:	f000 fd62 	bl	8001aa8 <USB_EPStartXfer>
}
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}

08000fe8 <HAL_PCD_EP_SetStall>:
{
 8000fe8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000fea:	6843      	ldr	r3, [r0, #4]
 8000fec:	f001 0507 	and.w	r5, r1, #7
 8000ff0:	429d      	cmp	r5, r3
{
 8000ff2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000ff4:	d828      	bhi.n	8001048 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8000ff6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000ffa:	f04f 0328 	mov.w	r3, #40	; 0x28
 8000ffe:	d01a      	beq.n	8001036 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8001000:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001002:	fb05 3103 	mla	r1, r5, r3, r3
 8001006:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001008:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 800100a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800100c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800100e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001010:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8001014:	429a      	cmp	r2, r3
 8001016:	d019      	beq.n	800104c <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001018:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800101a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800101e:	f000 fcb9 	bl	8001994 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001022:	b925      	cbnz	r5, 800102e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800102a:	f000 fd2a 	bl	8001a82 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800102e:	2000      	movs	r0, #0
 8001030:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001034:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001036:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001038:	434b      	muls	r3, r1
 800103a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800103e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001040:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001042:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8001046:	e7e0      	b.n	800100a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
 800104a:	e7f3      	b.n	8001034 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800104c:	2002      	movs	r0, #2
 800104e:	e7f1      	b.n	8001034 <HAL_PCD_EP_SetStall+0x4c>

08001050 <HAL_PCD_EP_ClrStall>:
{
 8001050:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001052:	6843      	ldr	r3, [r0, #4]
 8001054:	f001 020f 	and.w	r2, r1, #15
 8001058:	429a      	cmp	r2, r3
{
 800105a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800105c:	d825      	bhi.n	80010aa <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 800105e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001062:	f04f 0328 	mov.w	r3, #40	; 0x28
 8001066:	f001 0207 	and.w	r2, r1, #7
 800106a:	d015      	beq.n	8001098 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800106c:	fb02 3103 	mla	r1, r2, r3, r3
 8001070:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001072:	2001      	movs	r0, #1
 8001074:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 8001076:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001078:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800107a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800107c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001080:	2b01      	cmp	r3, #1
 8001082:	d014      	beq.n	80010ae <HAL_PCD_EP_ClrStall+0x5e>
 8001084:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001086:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001088:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800108c:	f000 fca2 	bl	80019d4 <USB_EPClearStall>
  return HAL_OK;
 8001090:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001092:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8001096:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001098:	4353      	muls	r3, r2
 800109a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800109e:	4401      	add	r1, r0
    ep->is_in = 0U;
 80010a0:	4403      	add	r3, r0
 80010a2:	2000      	movs	r0, #0
 80010a4:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80010a8:	e7e5      	b.n	8001076 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
 80010ac:	e7f3      	b.n	8001096 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80010ae:	2002      	movs	r0, #2
 80010b0:	e7f1      	b.n	8001096 <HAL_PCD_EP_ClrStall+0x46>

080010b2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80010b2:	b510      	push	{r4, lr}
 80010b4:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80010b6:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ba:	bf1b      	ittet	ne
 80010bc:	f001 0107 	andne.w	r1, r1, #7
 80010c0:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80010c4:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010c8:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80010ca:	bf08      	it	eq
 80010cc:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80010d0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80010d2:	b91a      	cbnz	r2, 80010dc <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80010d4:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80010d6:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80010d8:	2000      	movs	r0, #0
 80010da:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80010dc:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80010de:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80010e0:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80010e2:	e7f9      	b.n	80010d8 <HAL_PCDEx_PMAConfig+0x26>

080010e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e8:	4605      	mov	r5, r0
 80010ea:	b338      	cbz	r0, 800113c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ec:	6803      	ldr	r3, [r0, #0]
 80010ee:	07db      	lsls	r3, r3, #31
 80010f0:	d410      	bmi.n	8001114 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	682b      	ldr	r3, [r5, #0]
 80010f4:	079f      	lsls	r7, r3, #30
 80010f6:	d45e      	bmi.n	80011b6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	0719      	lsls	r1, r3, #28
 80010fc:	f100 8095 	bmi.w	800122a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	075a      	lsls	r2, r3, #29
 8001104:	f100 80c1 	bmi.w	800128a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001108:	69e8      	ldr	r0, [r5, #28]
 800110a:	2800      	cmp	r0, #0
 800110c:	f040 812c 	bne.w	8001368 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001110:	2000      	movs	r0, #0
 8001112:	e029      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001114:	4c90      	ldr	r4, [pc, #576]	; (8001358 <HAL_RCC_OscConfig+0x274>)
 8001116:	6863      	ldr	r3, [r4, #4]
 8001118:	f003 030c 	and.w	r3, r3, #12
 800111c:	2b04      	cmp	r3, #4
 800111e:	d007      	beq.n	8001130 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001120:	6863      	ldr	r3, [r4, #4]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b08      	cmp	r3, #8
 8001128:	d10a      	bne.n	8001140 <HAL_RCC_OscConfig+0x5c>
 800112a:	6863      	ldr	r3, [r4, #4]
 800112c:	03de      	lsls	r6, r3, #15
 800112e:	d507      	bpl.n	8001140 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	039c      	lsls	r4, r3, #14
 8001134:	d5dd      	bpl.n	80010f2 <HAL_RCC_OscConfig+0xe>
 8001136:	686b      	ldr	r3, [r5, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1da      	bne.n	80010f2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800113c:	2001      	movs	r0, #1
 800113e:	e013      	b.n	8001168 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001140:	686b      	ldr	r3, [r5, #4]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001146:	d112      	bne.n	800116e <HAL_RCC_OscConfig+0x8a>
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001150:	f7ff f8f6 	bl	8000340 <HAL_GetTick>
 8001154:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	0398      	lsls	r0, r3, #14
 800115a:	d4ca      	bmi.n	80010f2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff f8f0 	bl	8000340 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	2864      	cmp	r0, #100	; 0x64
 8001164:	d9f7      	bls.n	8001156 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001166:	2003      	movs	r0, #3
}
 8001168:	b002      	add	sp, #8
 800116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116e:	b99b      	cbnz	r3, 8001198 <HAL_RCC_OscConfig+0xb4>
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6023      	str	r3, [r4, #0]
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001180:	f7ff f8de 	bl	8000340 <HAL_GetTick>
 8001184:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	0399      	lsls	r1, r3, #14
 800118a:	d5b2      	bpl.n	80010f2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff f8d8 	bl	8000340 <HAL_GetTick>
 8001190:	1b80      	subs	r0, r0, r6
 8001192:	2864      	cmp	r0, #100	; 0x64
 8001194:	d9f7      	bls.n	8001186 <HAL_RCC_OscConfig+0xa2>
 8001196:	e7e6      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	d103      	bne.n	80011a8 <HAL_RCC_OscConfig+0xc4>
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	e7cf      	b.n	8001148 <HAL_RCC_OscConfig+0x64>
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b4:	e7cb      	b.n	800114e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b6:	4c68      	ldr	r4, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x274>)
 80011b8:	6863      	ldr	r3, [r4, #4]
 80011ba:	f013 0f0c 	tst.w	r3, #12
 80011be:	d007      	beq.n	80011d0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011c0:	6863      	ldr	r3, [r4, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d110      	bne.n	80011ec <HAL_RCC_OscConfig+0x108>
 80011ca:	6863      	ldr	r3, [r4, #4]
 80011cc:	03da      	lsls	r2, r3, #15
 80011ce:	d40d      	bmi.n	80011ec <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	079b      	lsls	r3, r3, #30
 80011d4:	d502      	bpl.n	80011dc <HAL_RCC_OscConfig+0xf8>
 80011d6:	692b      	ldr	r3, [r5, #16]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d1af      	bne.n	800113c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	696a      	ldr	r2, [r5, #20]
 80011e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	e785      	b.n	80010f8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ec:	692a      	ldr	r2, [r5, #16]
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_RCC_OscConfig+0x278>)
 80011f0:	b16a      	cbz	r2, 800120e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011f6:	f7ff f8a3 	bl	8000340 <HAL_GetTick>
 80011fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	079f      	lsls	r7, r3, #30
 8001200:	d4ec      	bmi.n	80011dc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff f89d 	bl	8000340 <HAL_GetTick>
 8001206:	1b80      	subs	r0, r0, r6
 8001208:	2802      	cmp	r0, #2
 800120a:	d9f7      	bls.n	80011fc <HAL_RCC_OscConfig+0x118>
 800120c:	e7ab      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800120e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001210:	f7ff f896 	bl	8000340 <HAL_GetTick>
 8001214:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	0798      	lsls	r0, r3, #30
 800121a:	f57f af6d 	bpl.w	80010f8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff f88f 	bl	8000340 <HAL_GetTick>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	2802      	cmp	r0, #2
 8001226:	d9f6      	bls.n	8001216 <HAL_RCC_OscConfig+0x132>
 8001228:	e79d      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122a:	69aa      	ldr	r2, [r5, #24]
 800122c:	4e4a      	ldr	r6, [pc, #296]	; (8001358 <HAL_RCC_OscConfig+0x274>)
 800122e:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_OscConfig+0x278>)
 8001230:	b1e2      	cbz	r2, 800126c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001232:	2201      	movs	r2, #1
 8001234:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001238:	f7ff f882 	bl	8000340 <HAL_GetTick>
 800123c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001240:	079b      	lsls	r3, r3, #30
 8001242:	d50d      	bpl.n	8001260 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001244:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001248:	4b45      	ldr	r3, [pc, #276]	; (8001360 <HAL_RCC_OscConfig+0x27c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001250:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001252:	bf00      	nop
  }
  while (Delay --);
 8001254:	9b01      	ldr	r3, [sp, #4]
 8001256:	1e5a      	subs	r2, r3, #1
 8001258:	9201      	str	r2, [sp, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f9      	bne.n	8001252 <HAL_RCC_OscConfig+0x16e>
 800125e:	e74f      	b.n	8001100 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff f86e 	bl	8000340 <HAL_GetTick>
 8001264:	1b00      	subs	r0, r0, r4
 8001266:	2802      	cmp	r0, #2
 8001268:	d9e9      	bls.n	800123e <HAL_RCC_OscConfig+0x15a>
 800126a:	e77c      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800126c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001270:	f7ff f866 	bl	8000340 <HAL_GetTick>
 8001274:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001276:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001278:	079f      	lsls	r7, r3, #30
 800127a:	f57f af41 	bpl.w	8001100 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff f85f 	bl	8000340 <HAL_GetTick>
 8001282:	1b00      	subs	r0, r0, r4
 8001284:	2802      	cmp	r0, #2
 8001286:	d9f6      	bls.n	8001276 <HAL_RCC_OscConfig+0x192>
 8001288:	e76d      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128a:	4c33      	ldr	r4, [pc, #204]	; (8001358 <HAL_RCC_OscConfig+0x274>)
 800128c:	69e3      	ldr	r3, [r4, #28]
 800128e:	00d8      	lsls	r0, r3, #3
 8001290:	d424      	bmi.n	80012dc <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001292:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	69e3      	ldr	r3, [r4, #28]
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129a:	61e3      	str	r3, [r4, #28]
 800129c:	69e3      	ldr	r3, [r4, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a6:	4e2f      	ldr	r6, [pc, #188]	; (8001364 <HAL_RCC_OscConfig+0x280>)
 80012a8:	6833      	ldr	r3, [r6, #0]
 80012aa:	05d9      	lsls	r1, r3, #23
 80012ac:	d518      	bpl.n	80012e0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ae:	68eb      	ldr	r3, [r5, #12]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d126      	bne.n	8001302 <HAL_RCC_OscConfig+0x21e>
 80012b4:	6a23      	ldr	r3, [r4, #32]
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012bc:	f7ff f840 	bl	8000340 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c6:	6a23      	ldr	r3, [r4, #32]
 80012c8:	079b      	lsls	r3, r3, #30
 80012ca:	d53f      	bpl.n	800134c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80012cc:	2f00      	cmp	r7, #0
 80012ce:	f43f af1b 	beq.w	8001108 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d2:	69e3      	ldr	r3, [r4, #28]
 80012d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61e3      	str	r3, [r4, #28]
 80012da:	e715      	b.n	8001108 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80012dc:	2700      	movs	r7, #0
 80012de:	e7e2      	b.n	80012a6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e0:	6833      	ldr	r3, [r6, #0]
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80012e8:	f7ff f82a 	bl	8000340 <HAL_GetTick>
 80012ec:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ee:	6833      	ldr	r3, [r6, #0]
 80012f0:	05da      	lsls	r2, r3, #23
 80012f2:	d4dc      	bmi.n	80012ae <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f4:	f7ff f824 	bl	8000340 <HAL_GetTick>
 80012f8:	eba0 0008 	sub.w	r0, r0, r8
 80012fc:	2864      	cmp	r0, #100	; 0x64
 80012fe:	d9f6      	bls.n	80012ee <HAL_RCC_OscConfig+0x20a>
 8001300:	e731      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001302:	b9ab      	cbnz	r3, 8001330 <HAL_RCC_OscConfig+0x24c>
 8001304:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6223      	str	r3, [r4, #32]
 8001310:	6a23      	ldr	r3, [r4, #32]
 8001312:	f023 0304 	bic.w	r3, r3, #4
 8001316:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001318:	f7ff f812 	bl	8000340 <HAL_GetTick>
 800131c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131e:	6a23      	ldr	r3, [r4, #32]
 8001320:	0798      	lsls	r0, r3, #30
 8001322:	d5d3      	bpl.n	80012cc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001324:	f7ff f80c 	bl	8000340 <HAL_GetTick>
 8001328:	1b80      	subs	r0, r0, r6
 800132a:	4540      	cmp	r0, r8
 800132c:	d9f7      	bls.n	800131e <HAL_RCC_OscConfig+0x23a>
 800132e:	e71a      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001330:	2b05      	cmp	r3, #5
 8001332:	6a23      	ldr	r3, [r4, #32]
 8001334:	d103      	bne.n	800133e <HAL_RCC_OscConfig+0x25a>
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6223      	str	r3, [r4, #32]
 800133c:	e7ba      	b.n	80012b4 <HAL_RCC_OscConfig+0x1d0>
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6223      	str	r3, [r4, #32]
 8001344:	6a23      	ldr	r3, [r4, #32]
 8001346:	f023 0304 	bic.w	r3, r3, #4
 800134a:	e7b6      	b.n	80012ba <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7fe fff8 	bl	8000340 <HAL_GetTick>
 8001350:	1b80      	subs	r0, r0, r6
 8001352:	4540      	cmp	r0, r8
 8001354:	d9b7      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1e2>
 8001356:	e706      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
 8001358:	40021000 	.word	0x40021000
 800135c:	42420000 	.word	0x42420000
 8001360:	20000000 	.word	0x20000000
 8001364:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001368:	4c2a      	ldr	r4, [pc, #168]	; (8001414 <HAL_RCC_OscConfig+0x330>)
 800136a:	6863      	ldr	r3, [r4, #4]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b08      	cmp	r3, #8
 8001372:	d03e      	beq.n	80013f2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001374:	2200      	movs	r2, #0
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_RCC_OscConfig+0x334>)
 8001378:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800137a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800137c:	d12c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800137e:	f7fe ffdf 	bl	8000340 <HAL_GetTick>
 8001382:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	0199      	lsls	r1, r3, #6
 8001388:	d420      	bmi.n	80013cc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800138a:	6a2b      	ldr	r3, [r5, #32]
 800138c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001390:	d105      	bne.n	800139e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001392:	6862      	ldr	r2, [r4, #4]
 8001394:	68a9      	ldr	r1, [r5, #8]
 8001396:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800139a:	430a      	orrs	r2, r1
 800139c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800139e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80013a0:	6862      	ldr	r2, [r4, #4]
 80013a2:	430b      	orrs	r3, r1
 80013a4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80013a8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80013aa:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ac:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_RCC_OscConfig+0x334>)
 80013b0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80013b2:	f7fe ffc5 	bl	8000340 <HAL_GetTick>
 80013b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	019a      	lsls	r2, r3, #6
 80013bc:	f53f aea8 	bmi.w	8001110 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7fe ffbe 	bl	8000340 <HAL_GetTick>
 80013c4:	1b40      	subs	r0, r0, r5
 80013c6:	2802      	cmp	r0, #2
 80013c8:	d9f6      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2d4>
 80013ca:	e6cc      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7fe ffb8 	bl	8000340 <HAL_GetTick>
 80013d0:	1b80      	subs	r0, r0, r6
 80013d2:	2802      	cmp	r0, #2
 80013d4:	d9d6      	bls.n	8001384 <HAL_RCC_OscConfig+0x2a0>
 80013d6:	e6c6      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80013d8:	f7fe ffb2 	bl	8000340 <HAL_GetTick>
 80013dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	f57f ae95 	bpl.w	8001110 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e6:	f7fe ffab 	bl	8000340 <HAL_GetTick>
 80013ea:	1b40      	subs	r0, r0, r5
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9f6      	bls.n	80013de <HAL_RCC_OscConfig+0x2fa>
 80013f0:	e6b9      	b.n	8001166 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f2:	2801      	cmp	r0, #1
 80013f4:	f43f aeb8 	beq.w	8001168 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80013f8:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	6a2a      	ldr	r2, [r5, #32]
 80013fc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001400:	4291      	cmp	r1, r2
 8001402:	f47f ae9b 	bne.w	800113c <HAL_RCC_OscConfig+0x58>
 8001406:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001408:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140c:	4293      	cmp	r3, r2
 800140e:	f43f ae7f 	beq.w	8001110 <HAL_RCC_OscConfig+0x2c>
 8001412:	e693      	b.n	800113c <HAL_RCC_OscConfig+0x58>
 8001414:	40021000 	.word	0x40021000
 8001418:	42420000 	.word	0x42420000

0800141c <HAL_RCC_GetSysClockFreq>:
{
 800141c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001420:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001422:	ac02      	add	r4, sp, #8
 8001424:	f103 0510 	add.w	r5, r3, #16
 8001428:	4622      	mov	r2, r4
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	3308      	adds	r3, #8
 8001430:	c203      	stmia	r2!, {r0, r1}
 8001432:	42ab      	cmp	r3, r5
 8001434:	4614      	mov	r4, r2
 8001436:	d1f7      	bne.n	8001428 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001438:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800143c:	4911      	ldr	r1, [pc, #68]	; (8001484 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800143e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001442:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001444:	f003 020c 	and.w	r2, r3, #12
 8001448:	2a08      	cmp	r2, #8
 800144a:	d117      	bne.n	800147c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800144c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001450:	3218      	adds	r2, #24
 8001452:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001454:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001456:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800145a:	d50c      	bpl.n	8001476 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800145c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001460:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001464:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001466:	3318      	adds	r3, #24
 8001468:	446b      	add	r3, sp
 800146a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800146e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001472:	b007      	add	sp, #28
 8001474:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_GetSysClockFreq+0x70>)
 8001478:	4358      	muls	r0, r3
 800147a:	e7fa      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800147e:	e7f8      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x56>
 8001480:	08003064 	.word	0x08003064
 8001484:	40021000 	.word	0x40021000
 8001488:	007a1200 	.word	0x007a1200
 800148c:	003d0900 	.word	0x003d0900

08001490 <HAL_RCC_ClockConfig>:
{
 8001490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001494:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001496:	4604      	mov	r4, r0
 8001498:	b910      	cbnz	r0, 80014a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800149a:	2001      	movs	r0, #1
}
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4a44      	ldr	r2, [pc, #272]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	428b      	cmp	r3, r1
 80014aa:	d328      	bcc.n	80014fe <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	6821      	ldr	r1, [r4, #0]
 80014ae:	078e      	lsls	r6, r1, #30
 80014b0:	d430      	bmi.n	8001514 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b2:	07ca      	lsls	r2, r1, #31
 80014b4:	d443      	bmi.n	800153e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b6:	4a3f      	ldr	r2, [pc, #252]	; (80015b4 <HAL_RCC_ClockConfig+0x124>)
 80014b8:	6813      	ldr	r3, [r2, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	42ab      	cmp	r3, r5
 80014c0:	d865      	bhi.n	800158e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c2:	6822      	ldr	r2, [r4, #0]
 80014c4:	4d3c      	ldr	r5, [pc, #240]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 80014c6:	f012 0f04 	tst.w	r2, #4
 80014ca:	d16c      	bne.n	80015a6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014cc:	0713      	lsls	r3, r2, #28
 80014ce:	d506      	bpl.n	80014de <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014d0:	686b      	ldr	r3, [r5, #4]
 80014d2:	6922      	ldr	r2, [r4, #16]
 80014d4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014dc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014de:	f7ff ff9d 	bl	800141c <HAL_RCC_GetSysClockFreq>
 80014e2:	686b      	ldr	r3, [r5, #4]
 80014e4:	4a35      	ldr	r2, [pc, #212]	; (80015bc <HAL_RCC_ClockConfig+0x12c>)
 80014e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	40d8      	lsrs	r0, r3
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_ClockConfig+0x130>)
 80014f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_RCC_ClockConfig+0x134>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f7fe fee1 	bl	80002bc <HAL_InitTick>
  return HAL_OK;
 80014fa:	2000      	movs	r0, #0
 80014fc:	e7ce      	b.n	800149c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	6813      	ldr	r3, [r2, #0]
 8001500:	f023 0307 	bic.w	r3, r3, #7
 8001504:	430b      	orrs	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	428b      	cmp	r3, r1
 8001510:	d1c3      	bne.n	800149a <HAL_RCC_ClockConfig+0xa>
 8001512:	e7cb      	b.n	80014ac <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 8001516:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151a:	bf1e      	ittt	ne
 800151c:	685a      	ldrne	r2, [r3, #4]
 800151e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001522:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001524:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001526:	bf42      	ittt	mi
 8001528:	685a      	ldrmi	r2, [r3, #4]
 800152a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800152e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	68a0      	ldr	r0, [r4, #8]
 8001534:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001538:	4302      	orrs	r2, r0
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	e7b9      	b.n	80014b2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	6862      	ldr	r2, [r4, #4]
 8001540:	4e1d      	ldr	r6, [pc, #116]	; (80015b8 <HAL_RCC_ClockConfig+0x128>)
 8001542:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001544:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001546:	d11a      	bne.n	800157e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001548:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	d0a5      	beq.n	800149a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	4313      	orrs	r3, r2
 800155a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800155c:	f7fe fef0 	bl	8000340 <HAL_GetTick>
 8001560:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	6873      	ldr	r3, [r6, #4]
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800156e:	d0a2      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7fe fee6 	bl	8000340 <HAL_GetTick>
 8001574:	1bc0      	subs	r0, r0, r7
 8001576:	4540      	cmp	r0, r8
 8001578:	d9f3      	bls.n	8001562 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800157a:	2003      	movs	r0, #3
 800157c:	e78e      	b.n	800149c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800157e:	2a02      	cmp	r2, #2
 8001580:	d102      	bne.n	8001588 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001586:	e7e1      	b.n	800154c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	f013 0f02 	tst.w	r3, #2
 800158c:	e7de      	b.n	800154c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	f023 0307 	bic.w	r3, r3, #7
 8001594:	432b      	orrs	r3, r5
 8001596:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001598:	6813      	ldr	r3, [r2, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	42ab      	cmp	r3, r5
 80015a0:	f47f af7b 	bne.w	800149a <HAL_RCC_ClockConfig+0xa>
 80015a4:	e78d      	b.n	80014c2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a6:	686b      	ldr	r3, [r5, #4]
 80015a8:	68e1      	ldr	r1, [r4, #12]
 80015aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015ae:	430b      	orrs	r3, r1
 80015b0:	606b      	str	r3, [r5, #4]
 80015b2:	e78b      	b.n	80014cc <HAL_RCC_ClockConfig+0x3c>
 80015b4:	40022000 	.word	0x40022000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08003054 	.word	0x08003054
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000008 	.word	0x20000008

080015c8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015c8:	6803      	ldr	r3, [r0, #0]
{
 80015ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015ce:	07d9      	lsls	r1, r3, #31
{
 80015d0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015d2:	d520      	bpl.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d4:	4c36      	ldr	r4, [pc, #216]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80015d6:	69e3      	ldr	r3, [r4, #28]
 80015d8:	00da      	lsls	r2, r3, #3
 80015da:	d432      	bmi.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80015dc:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	69e3      	ldr	r3, [r4, #28]
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	61e3      	str	r3, [r4, #28]
 80015e6:	69e3      	ldr	r3, [r4, #28]
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	4f30      	ldr	r7, [pc, #192]	; (80016b4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	d526      	bpl.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015f8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015fa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80015fe:	d136      	bne.n	800166e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001600:	6a23      	ldr	r3, [r4, #32]
 8001602:	686a      	ldr	r2, [r5, #4]
 8001604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001608:	4313      	orrs	r3, r2
 800160a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800160c:	b11e      	cbz	r6, 8001616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160e:	69e3      	ldr	r3, [r4, #28]
 8001610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001614:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001616:	6828      	ldr	r0, [r5, #0]
 8001618:	0783      	lsls	r3, r0, #30
 800161a:	d506      	bpl.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800161c:	4924      	ldr	r1, [pc, #144]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800161e:	68ab      	ldr	r3, [r5, #8]
 8001620:	684a      	ldr	r2, [r1, #4]
 8001622:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001626:	431a      	orrs	r2, r3
 8001628:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800162a:	f010 0010 	ands.w	r0, r0, #16
 800162e:	d01b      	beq.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001632:	68e9      	ldr	r1, [r5, #12]
 8001634:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001636:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001638:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800163c:	430b      	orrs	r3, r1
 800163e:	6053      	str	r3, [r2, #4]
 8001640:	e012      	b.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8001642:	2600      	movs	r6, #0
 8001644:	e7d4      	b.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800164e:	f7fe fe77 	bl	8000340 <HAL_GetTick>
 8001652:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	05d8      	lsls	r0, r3, #23
 8001658:	d4ce      	bmi.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165a:	f7fe fe71 	bl	8000340 <HAL_GetTick>
 800165e:	eba0 0008 	sub.w	r0, r0, r8
 8001662:	2864      	cmp	r0, #100	; 0x64
 8001664:	d9f6      	bls.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001666:	2003      	movs	r0, #3
}
 8001668:	b002      	add	sp, #8
 800166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800166e:	686a      	ldr	r2, [r5, #4]
 8001670:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001674:	429a      	cmp	r2, r3
 8001676:	d0c3      	beq.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001678:	2001      	movs	r0, #1
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800167c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800167e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001682:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001684:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001688:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 800168c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800168e:	07d9      	lsls	r1, r3, #31
 8001690:	d5b6      	bpl.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001692:	f7fe fe55 	bl	8000340 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800169a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	6a23      	ldr	r3, [r4, #32]
 800169e:	079a      	lsls	r2, r3, #30
 80016a0:	d4ae      	bmi.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7fe fe4d 	bl	8000340 <HAL_GetTick>
 80016a6:	1bc0      	subs	r0, r0, r7
 80016a8:	4540      	cmp	r0, r8
 80016aa:	d9f7      	bls.n	800169c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80016ac:	e7db      	b.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42420000 	.word	0x42420000

080016bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80016bc:	b084      	sub	sp, #16
 80016be:	a801      	add	r0, sp, #4
 80016c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80016c4:	b004      	add	sp, #16
 80016c6:	2000      	movs	r0, #0
 80016c8:	4770      	bx	lr

080016ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80016ca:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80016cc:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 80016d0:	2000      	movs	r0, #0
 80016d2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80016d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80016da:	4770      	bx	lr

080016dc <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80016dc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80016e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80016e4:	045b      	lsls	r3, r3, #17
 80016e6:	0c5b      	lsrs	r3, r3, #17
 80016e8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80016ec:	2000      	movs	r0, #0
 80016ee:	4770      	bx	lr

080016f0 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80016f0:	2000      	movs	r0, #0
 80016f2:	4770      	bx	lr

080016f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80016f4:	b084      	sub	sp, #16
 80016f6:	b510      	push	{r4, lr}
 80016f8:	4604      	mov	r4, r0
 80016fa:	a803      	add	r0, sp, #12
 80016fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001700:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001702:	2301      	movs	r3, #1
 8001704:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8001708:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800170c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001710:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8001714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001718:	b004      	add	sp, #16
 800171a:	4770      	bx	lr

0800171c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800171e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8001720:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001722:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8001726:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001728:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 800172c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8001730:	0424      	lsls	r4, r4, #16
 8001732:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8001734:	2d03      	cmp	r5, #3
 8001736:	d848      	bhi.n	80017ca <USB_ActivateEndpoint+0xae>
 8001738:	e8df f005 	tbb	[pc, r5]
 800173c:	40424402 	.word	0x40424402
  HAL_StatusTypeDef ret = HAL_OK;
 8001740:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8001742:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8001746:	f248 0680 	movw	r6, #32896	; 0x8080
 800174a:	4334      	orrs	r4, r6
 800174c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001750:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001754:	4f8c      	ldr	r7, [pc, #560]	; (8001988 <USB_ActivateEndpoint+0x26c>)
 8001756:	b2a4      	uxth	r4, r4
 8001758:	403c      	ands	r4, r7
 800175a:	4314      	orrs	r4, r2
 800175c:	4334      	orrs	r4, r6
 800175e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8001762:	7b0c      	ldrb	r4, [r1, #12]
 8001764:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8001768:	2c00      	cmp	r4, #0
 800176a:	d17b      	bne.n	8001864 <USB_ActivateEndpoint+0x148>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800176c:	88ce      	ldrh	r6, [r1, #6]
    if (ep->is_in != 0U)
 800176e:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001770:	0876      	lsrs	r6, r6, #1
 8001772:	0076      	lsls	r6, r6, #1
    if (ep->is_in != 0U)
 8001774:	b35c      	cbz	r4, 80017ce <USB_ActivateEndpoint+0xb2>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001776:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800177a:	b2a4      	uxth	r4, r4
 800177c:	4464      	add	r4, ip
 800177e:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001782:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001786:	064e      	lsls	r6, r1, #25
 8001788:	d509      	bpl.n	800179e <USB_ActivateEndpoint+0x82>
 800178a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800178e:	b289      	uxth	r1, r1
 8001790:	4039      	ands	r1, r7
 8001792:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001796:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800179a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800179e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80017a2:	4c7a      	ldr	r4, [pc, #488]	; (800198c <USB_ActivateEndpoint+0x270>)
 80017a4:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 80017a6:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80017a8:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80017ac:	d001      	beq.n	80017b2 <USB_ActivateEndpoint+0x96>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80017ae:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017b2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80017b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80017ba:	e0a9      	b.n	8001910 <USB_ActivateEndpoint+0x1f4>
      wEpRegVal |= USB_EP_INTERRUPT;
 80017bc:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80017c0:	2000      	movs	r0, #0
      break;
 80017c2:	e7c0      	b.n	8001746 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80017c4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 80017c8:	e7fa      	b.n	80017c0 <USB_ActivateEndpoint+0xa4>
  switch (ep->type)
 80017ca:	2001      	movs	r0, #1
 80017cc:	e7bb      	b.n	8001746 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80017ce:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80017d2:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80017d4:	b2a4      	uxth	r4, r4
 80017d6:	4464      	add	r4, ip
 80017d8:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80017dc:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80017e0:	b2a4      	uxth	r4, r4
 80017e2:	4464      	add	r4, ip
 80017e4:	bb6d      	cbnz	r5, 8001842 <USB_ActivateEndpoint+0x126>
 80017e6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80017ea:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80017ee:	0409      	lsls	r1, r1, #16
 80017f0:	0c09      	lsrs	r1, r1, #16
 80017f2:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
 80017f6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 80017fa:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80017fe:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001802:	b289      	uxth	r1, r1
 8001804:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001808:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800180c:	044f      	lsls	r7, r1, #17
 800180e:	d50d      	bpl.n	800182c <USB_ActivateEndpoint+0x110>
 8001810:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001814:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001818:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800181c:	0409      	lsls	r1, r1, #16
 800181e:	0c09      	lsrs	r1, r1, #16
 8001820:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001824:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001828:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800182c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001830:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001834:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001838:	0409      	lsls	r1, r1, #16
 800183a:	0c09      	lsrs	r1, r1, #16
 800183c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8001840:	e7b7      	b.n	80017b2 <USB_ActivateEndpoint+0x96>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001842:	2d3e      	cmp	r5, #62	; 0x3e
 8001844:	d805      	bhi.n	8001852 <USB_ActivateEndpoint+0x136>
 8001846:	0869      	lsrs	r1, r5, #1
 8001848:	07ed      	lsls	r5, r5, #31
 800184a:	bf48      	it	mi
 800184c:	3101      	addmi	r1, #1
 800184e:	0289      	lsls	r1, r1, #10
 8001850:	e7d7      	b.n	8001802 <USB_ActivateEndpoint+0xe6>
 8001852:	096e      	lsrs	r6, r5, #5
 8001854:	06e9      	lsls	r1, r5, #27
 8001856:	494e      	ldr	r1, [pc, #312]	; (8001990 <USB_ActivateEndpoint+0x274>)
 8001858:	bf08      	it	eq
 800185a:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 800185e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8001862:	e7ce      	b.n	8001802 <USB_ActivateEndpoint+0xe6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001864:	f833 6022 	ldrh.w	r6, [r3, r2, lsl #2]
 8001868:	b2b6      	uxth	r6, r6
 800186a:	403e      	ands	r6, r7
 800186c:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 8001870:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8001874:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001878:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800187c:	890e      	ldrh	r6, [r1, #8]
 800187e:	b2a4      	uxth	r4, r4
 8001880:	0876      	lsrs	r6, r6, #1
 8001882:	4464      	add	r4, ip
 8001884:	0076      	lsls	r6, r6, #1
 8001886:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 800188a:	894e      	ldrh	r6, [r1, #10]
 800188c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8001890:	0876      	lsrs	r6, r6, #1
 8001892:	b2a4      	uxth	r4, r4
 8001894:	4464      	add	r4, ip
 8001896:	0076      	lsls	r6, r6, #1
 8001898:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 800189c:	7849      	ldrb	r1, [r1, #1]
 800189e:	bbd1      	cbnz	r1, 8001916 <USB_ActivateEndpoint+0x1fa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018a0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80018a4:	044e      	lsls	r6, r1, #17
 80018a6:	d509      	bpl.n	80018bc <USB_ActivateEndpoint+0x1a0>
 80018a8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80018ac:	b289      	uxth	r1, r1
 80018ae:	4039      	ands	r1, r7
 80018b0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80018b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80018b8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018bc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80018c0:	064d      	lsls	r5, r1, #25
 80018c2:	d50d      	bpl.n	80018e0 <USB_ActivateEndpoint+0x1c4>
 80018c4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80018c8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80018cc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80018d0:	0409      	lsls	r1, r1, #16
 80018d2:	0c09      	lsrs	r1, r1, #16
 80018d4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80018d8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80018dc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80018e0:	f248 0480 	movw	r4, #32896	; 0x8080
 80018e4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80018e8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80018ec:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80018f0:	0409      	lsls	r1, r1, #16
 80018f2:	0c09      	lsrs	r1, r1, #16
 80018f4:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 80018f8:	4321      	orrs	r1, r4
 80018fa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80018fe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001902:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001906:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800190a:	0409      	lsls	r1, r1, #16
 800190c:	0c09      	lsrs	r1, r1, #16
 800190e:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001910:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }

  return ret;
}
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001916:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800191a:	044c      	lsls	r4, r1, #17
 800191c:	d509      	bpl.n	8001932 <USB_ActivateEndpoint+0x216>
 800191e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001922:	b289      	uxth	r1, r1
 8001924:	4039      	ands	r1, r7
 8001926:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800192a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800192e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001932:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001936:	0649      	lsls	r1, r1, #25
 8001938:	d50d      	bpl.n	8001956 <USB_ActivateEndpoint+0x23a>
 800193a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800193e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001942:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001946:	0409      	lsls	r1, r1, #16
 8001948:	0c09      	lsrs	r1, r1, #16
 800194a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800194e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8001952:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001956:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800195a:	4c0c      	ldr	r4, [pc, #48]	; (800198c <USB_ActivateEndpoint+0x270>)
 800195c:	b289      	uxth	r1, r1
 800195e:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8001960:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001962:	bf18      	it	ne
 8001964:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001968:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800196c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001970:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001974:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001978:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800197c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001980:	0409      	lsls	r1, r1, #16
 8001982:	0c09      	lsrs	r1, r1, #16
 8001984:	e715      	b.n	80017b2 <USB_ActivateEndpoint+0x96>
 8001986:	bf00      	nop
 8001988:	ffff8f8f 	.word	0xffff8f8f
 800198c:	ffff8fbf 	.word	0xffff8fbf
 8001990:	ffff8000 	.word	0xffff8000

08001994 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8001994:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8001996:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8001998:	b18b      	cbz	r3, 80019be <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800199a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800199e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80019ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80019ba:	2000      	movs	r0, #0
 80019bc:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80019be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	0c1b      	lsrs	r3, r3, #16
 80019ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80019d2:	e7ec      	b.n	80019ae <USB_EPSetStall+0x1a>

080019d4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80019d4:	7b0b      	ldrb	r3, [r1, #12]
 80019d6:	bb3b      	cbnz	r3, 8001a28 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80019d8:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019da:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80019dc:	b333      	cbz	r3, 8001a2c <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019e2:	065b      	lsls	r3, r3, #25
 80019e4:	d50d      	bpl.n	8001a02 <USB_EPClearStall+0x2e>
 80019e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	0c1b      	lsrs	r3, r3, #16
 80019f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8001a02:	78cb      	ldrb	r3, [r1, #3]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d00f      	beq.n	8001a28 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001a08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a14:	041b      	lsls	r3, r3, #16
 8001a16:	0c1b      	lsrs	r3, r3, #16
 8001a18:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8001a28:	2000      	movs	r0, #0
 8001a2a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a30:	045b      	lsls	r3, r3, #17
 8001a32:	d50d      	bpl.n	8001a50 <USB_EPClearStall+0x7c>
 8001a34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a40:	041b      	lsls	r3, r3, #16
 8001a42:	0c1b      	lsrs	r3, r3, #16
 8001a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	0c1b      	lsrs	r3, r3, #16
 8001a60:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a64:	e7da      	b.n	8001a1c <USB_EPClearStall+0x48>

08001a66 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8001a66:	b911      	cbnz	r1, 8001a6e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8001a6e:	2000      	movs	r0, #0
 8001a70:	4770      	bx	lr

08001a72 <USB_DevConnect>:
 8001a72:	2000      	movs	r0, #0
 8001a74:	4770      	bx	lr

08001a76 <USB_DevDisconnect>:
 8001a76:	2000      	movs	r0, #0
 8001a78:	4770      	bx	lr

08001a7a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8001a7a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001a7e:	b280      	uxth	r0, r0
 8001a80:	4770      	bx	lr

08001a82 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a82:	2000      	movs	r0, #0
 8001a84:	4770      	bx	lr

08001a86 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001a86:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001a8a:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001a8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d100      	bne.n	8001a9c <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8001a9a:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8001a9c:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8001aa0:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8001aa4:	e7f7      	b.n	8001a96 <USB_WritePMA+0x10>
	...

08001aa8 <USB_EPStartXfer>:
{
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8001aac:	7849      	ldrb	r1, [r1, #1]
{
 8001aae:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8001ab0:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8001ab2:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8001ab4:	f040 818e 	bne.w	8001dd4 <USB_EPStartXfer+0x32c>
    if (ep->xfer_len > ep->maxpacket)
 8001ab8:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001abc:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001abe:	6961      	ldr	r1, [r4, #20]
 8001ac0:	4576      	cmp	r6, lr
 8001ac2:	bf28      	it	cs
 8001ac4:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8001ac6:	bb02      	cbnz	r2, 8001b0a <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001ac8:	b2b6      	uxth	r6, r6
 8001aca:	88e2      	ldrh	r2, [r4, #6]
 8001acc:	4633      	mov	r3, r6
 8001ace:	f7ff ffda 	bl	8001a86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001ad2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001ad6:	7821      	ldrb	r1, [r4, #0]
 8001ad8:	b290      	uxth	r0, r2
 8001ada:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8001ade:	0109      	lsls	r1, r1, #4
 8001ae0:	4402      	add	r2, r0
 8001ae2:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001ae4:	7822      	ldrb	r2, [r4, #0]
 8001ae6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001af2:	041b      	lsls	r3, r3, #16
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8001afa:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b04:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8001b0a:	78e2      	ldrb	r2, [r4, #3]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8001b0c:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 8001b0e:	2a02      	cmp	r2, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8001b10:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8001b12:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001b16:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8001b1a:	f040 80bb 	bne.w	8001c94 <USB_EPStartXfer+0x1ec>
        if (ep->xfer_len_db > ep->maxpacket)
 8001b1e:	459e      	cmp	lr, r3
 8001b20:	f080 809f 	bcs.w	8001c62 <USB_EPStartXfer+0x1ba>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8001b24:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001b28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b2c:	0412      	lsls	r2, r2, #16
 8001b2e:	0c12      	lsrs	r2, r2, #16
 8001b30:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b38:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001b3c:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
          ep->xfer_len_db -= len;
 8001b40:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001b42:	f017 0740 	ands.w	r7, r7, #64	; 0x40
          ep->xfer_len_db -= len;
 8001b46:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001b48:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001b4c:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001b4e:	d044      	beq.n	8001bda <USB_EPStartXfer+0x132>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001b50:	b297      	uxth	r7, r2
 8001b52:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8001b56:	443a      	add	r2, r7
 8001b58:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001b5c:	8962      	ldrh	r2, [r4, #10]
 8001b5e:	f7ff ff92 	bl	8001a86 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8001b62:	6a22      	ldr	r2, [r4, #32]
 8001b64:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8001b66:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8001b68:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8001b6a:	bf8a      	itet	hi
 8001b6c:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8001b6e:	2300      	movls	r3, #0
 8001b70:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001b72:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8001b74:	4431      	add	r1, r6
 8001b76:	6223      	str	r3, [r4, #32]
 8001b78:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001b7a:	b293      	uxth	r3, r2
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	f040 80d7 	bne.w	8001d30 <USB_EPStartXfer+0x288>
 8001b82:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8001b86:	7826      	ldrb	r6, [r4, #0]
 8001b88:	b280      	uxth	r0, r0
 8001b8a:	f205 4704 	addw	r7, r5, #1028	; 0x404
 8001b8e:	0136      	lsls	r6, r6, #4
 8001b90:	4438      	add	r0, r7
 8001b92:	b96a      	cbnz	r2, 8001bb0 <USB_EPStartXfer+0x108>
 8001b94:	5a32      	ldrh	r2, [r6, r0]
 8001b96:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001b9a:	0412      	lsls	r2, r2, #16
 8001b9c:	0c12      	lsrs	r2, r2, #16
 8001b9e:	5232      	strh	r2, [r6, r0]
 8001ba0:	5a32      	ldrh	r2, [r6, r0]
 8001ba2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001ba6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001baa:	b292      	uxth	r2, r2
 8001bac:	5232      	strh	r2, [r6, r0]
 8001bae:	e008      	b.n	8001bc2 <USB_EPStartXfer+0x11a>
 8001bb0:	2a3e      	cmp	r2, #62	; 0x3e
 8001bb2:	d809      	bhi.n	8001bc8 <USB_EPStartXfer+0x120>
 8001bb4:	0857      	lsrs	r7, r2, #1
 8001bb6:	07d2      	lsls	r2, r2, #31
 8001bb8:	bf48      	it	mi
 8001bba:	3701      	addmi	r7, #1
 8001bbc:	02bf      	lsls	r7, r7, #10
 8001bbe:	b2bf      	uxth	r7, r7
 8001bc0:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001bc2:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	e062      	b.n	8001c8e <USB_EPStartXfer+0x1e6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001bc8:	0957      	lsrs	r7, r2, #5
 8001bca:	06d2      	lsls	r2, r2, #27
 8001bcc:	4a91      	ldr	r2, [pc, #580]	; (8001e14 <USB_EPStartXfer+0x36c>)
 8001bce:	bf08      	it	eq
 8001bd0:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 8001bd4:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8001bd8:	e7e7      	b.n	8001baa <USB_EPStartXfer+0x102>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001bda:	fa1f fe82 	uxth.w	lr, r2
 8001bde:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001be2:	4472      	add	r2, lr
 8001be4:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001be8:	8922      	ldrh	r2, [r4, #8]
 8001bea:	f7ff ff4c 	bl	8001a86 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8001bee:	6a22      	ldr	r2, [r4, #32]
 8001bf0:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8001bf2:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8001bf4:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8001bf6:	bf84      	itt	hi
 8001bf8:	1b97      	subhi	r7, r2, r6
 8001bfa:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001bfc:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8001bfe:	4431      	add	r1, r6
 8001c00:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db -= len;
 8001c02:	6227      	str	r7, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c04:	b293      	uxth	r3, r2
 8001c06:	2800      	cmp	r0, #0
 8001c08:	f040 80d7 	bne.w	8001dba <USB_EPStartXfer+0x312>
 8001c0c:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8001c10:	7826      	ldrb	r6, [r4, #0]
 8001c12:	b280      	uxth	r0, r0
 8001c14:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 8001c18:	0136      	lsls	r6, r6, #4
 8001c1a:	4438      	add	r0, r7
 8001c1c:	b96a      	cbnz	r2, 8001c3a <USB_EPStartXfer+0x192>
 8001c1e:	5a32      	ldrh	r2, [r6, r0]
 8001c20:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001c24:	0412      	lsls	r2, r2, #16
 8001c26:	0c12      	lsrs	r2, r2, #16
 8001c28:	5232      	strh	r2, [r6, r0]
 8001c2a:	5a32      	ldrh	r2, [r6, r0]
 8001c2c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001c30:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001c34:	b292      	uxth	r2, r2
 8001c36:	5232      	strh	r2, [r6, r0]
 8001c38:	e008      	b.n	8001c4c <USB_EPStartXfer+0x1a4>
 8001c3a:	2a3e      	cmp	r2, #62	; 0x3e
 8001c3c:	d808      	bhi.n	8001c50 <USB_EPStartXfer+0x1a8>
 8001c3e:	0857      	lsrs	r7, r2, #1
 8001c40:	07d2      	lsls	r2, r2, #31
 8001c42:	bf48      	it	mi
 8001c44:	3701      	addmi	r7, #1
 8001c46:	02bf      	lsls	r7, r7, #10
 8001c48:	b2bf      	uxth	r7, r7
 8001c4a:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001c4c:	8962      	ldrh	r2, [r4, #10]
 8001c4e:	e7b9      	b.n	8001bc4 <USB_EPStartXfer+0x11c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c50:	0957      	lsrs	r7, r2, #5
 8001c52:	06d2      	lsls	r2, r2, #27
 8001c54:	4a6f      	ldr	r2, [pc, #444]	; (8001e14 <USB_EPStartXfer+0x36c>)
 8001c56:	bf08      	it	eq
 8001c58:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 8001c5c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8001c60:	e7e8      	b.n	8001c34 <USB_EPStartXfer+0x18c>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8001c62:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8001c66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c6a:	0412      	lsls	r2, r2, #16
 8001c6c:	0c12      	lsrs	r2, r2, #16
 8001c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c76:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001c7a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	b296      	uxth	r6, r2
 8001c82:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001c86:	4432      	add	r2, r6
 8001c88:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001c8c:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001c8e:	f7ff fefa 	bl	8001a86 <USB_WritePMA>
 8001c92:	e727      	b.n	8001ae4 <USB_EPStartXfer+0x3c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8001c94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001c98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c9c:	0412      	lsls	r2, r2, #16
 8001c9e:	0c12      	lsrs	r2, r2, #16
 8001ca0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001ca4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ca8:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001cac:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
        ep->xfer_len_db -= len;
 8001cb0:	1b9b      	subs	r3, r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001cb2:	f017 0740 	ands.w	r7, r7, #64	; 0x40
        ep->xfer_len_db -= len;
 8001cb6:	6223      	str	r3, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001cb8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001cbc:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001cbe:	d044      	beq.n	8001d4a <USB_EPStartXfer+0x2a2>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001cc0:	b297      	uxth	r7, r2
 8001cc2:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8001cc6:	443a      	add	r2, r7
 8001cc8:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001ccc:	8962      	ldrh	r2, [r4, #10]
 8001cce:	f7ff feda 	bl	8001a86 <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 8001cd2:	6a22      	ldr	r2, [r4, #32]
 8001cd4:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8001cd6:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8001cd8:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8001cda:	bf8a      	itet	hi
 8001cdc:	1b93      	subhi	r3, r2, r6
            ep->xfer_len_db = 0U;
 8001cde:	2300      	movls	r3, #0
 8001ce0:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8001ce2:	4431      	add	r1, r6
 8001ce4:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 8001ce6:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	f43f aefb 	beq.w	8001ae4 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001cee:	7860      	ldrb	r0, [r4, #1]
 8001cf0:	b293      	uxth	r3, r2
 8001cf2:	b9e8      	cbnz	r0, 8001d30 <USB_EPStartXfer+0x288>
 8001cf4:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8001cf8:	7827      	ldrb	r7, [r4, #0]
 8001cfa:	b2b0      	uxth	r0, r6
 8001cfc:	2a3e      	cmp	r2, #62	; 0x3e
 8001cfe:	f205 4604 	addw	r6, r5, #1028	; 0x404
 8001d02:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8001d06:	4406      	add	r6, r0
 8001d08:	d807      	bhi.n	8001d1a <USB_EPStartXfer+0x272>
 8001d0a:	0850      	lsrs	r0, r2, #1
 8001d0c:	07d2      	lsls	r2, r2, #31
 8001d0e:	bf48      	it	mi
 8001d10:	3001      	addmi	r0, #1
 8001d12:	0280      	lsls	r0, r0, #10
 8001d14:	b280      	uxth	r0, r0
 8001d16:	53b8      	strh	r0, [r7, r6]
 8001d18:	e753      	b.n	8001bc2 <USB_EPStartXfer+0x11a>
 8001d1a:	0950      	lsrs	r0, r2, #5
 8001d1c:	06d2      	lsls	r2, r2, #27
 8001d1e:	4a3d      	ldr	r2, [pc, #244]	; (8001e14 <USB_EPStartXfer+0x36c>)
 8001d20:	bf08      	it	eq
 8001d22:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8001d26:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	53ba      	strh	r2, [r7, r6]
 8001d2e:	e748      	b.n	8001bc2 <USB_EPStartXfer+0x11a>
 8001d30:	2801      	cmp	r0, #1
 8001d32:	f47f af46 	bne.w	8001bc2 <USB_EPStartXfer+0x11a>
 8001d36:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001d3a:	7820      	ldrb	r0, [r4, #0]
 8001d3c:	b296      	uxth	r6, r2
 8001d3e:	f205 4204 	addw	r2, r5, #1028	; 0x404
 8001d42:	0100      	lsls	r0, r0, #4
 8001d44:	4432      	add	r2, r6
 8001d46:	5283      	strh	r3, [r0, r2]
 8001d48:	e73b      	b.n	8001bc2 <USB_EPStartXfer+0x11a>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001d4a:	fa1f fe82 	uxth.w	lr, r2
 8001d4e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001d52:	4472      	add	r2, lr
 8001d54:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001d58:	8922      	ldrh	r2, [r4, #8]
 8001d5a:	f7ff fe94 	bl	8001a86 <USB_WritePMA>
          if (ep->xfer_len_db > ep->maxpacket)
 8001d5e:	6a22      	ldr	r2, [r4, #32]
 8001d60:	6923      	ldr	r3, [r4, #16]
          ep->xfer_buff += len;
 8001d62:	6961      	ldr	r1, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8001d64:	429a      	cmp	r2, r3
            ep->xfer_len_db -= len;
 8001d66:	bf84      	itt	hi
 8001d68:	1b97      	subhi	r7, r2, r6
 8001d6a:	4632      	movhi	r2, r6
          ep->xfer_buff += len;
 8001d6c:	4431      	add	r1, r6
 8001d6e:	6161      	str	r1, [r4, #20]
            ep->xfer_len_db -= len;
 8001d70:	6227      	str	r7, [r4, #32]
          if (len > 0U)
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	f43f aeb6 	beq.w	8001ae4 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001d78:	7860      	ldrb	r0, [r4, #1]
 8001d7a:	b293      	uxth	r3, r2
 8001d7c:	b9e8      	cbnz	r0, 8001dba <USB_EPStartXfer+0x312>
 8001d7e:	f8b5 6050 	ldrh.w	r6, [r5, #80]	; 0x50
 8001d82:	7827      	ldrb	r7, [r4, #0]
 8001d84:	b2b0      	uxth	r0, r6
 8001d86:	2a3e      	cmp	r2, #62	; 0x3e
 8001d88:	f205 460c 	addw	r6, r5, #1036	; 0x40c
 8001d8c:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8001d90:	4406      	add	r6, r0
 8001d92:	d807      	bhi.n	8001da4 <USB_EPStartXfer+0x2fc>
 8001d94:	0850      	lsrs	r0, r2, #1
 8001d96:	07d2      	lsls	r2, r2, #31
 8001d98:	bf48      	it	mi
 8001d9a:	3001      	addmi	r0, #1
 8001d9c:	0280      	lsls	r0, r0, #10
 8001d9e:	b280      	uxth	r0, r0
 8001da0:	53b8      	strh	r0, [r7, r6]
 8001da2:	e753      	b.n	8001c4c <USB_EPStartXfer+0x1a4>
 8001da4:	0950      	lsrs	r0, r2, #5
 8001da6:	06d2      	lsls	r2, r2, #27
 8001da8:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <USB_EPStartXfer+0x36c>)
 8001daa:	bf08      	it	eq
 8001dac:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8001db0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001db4:	b292      	uxth	r2, r2
 8001db6:	53ba      	strh	r2, [r7, r6]
 8001db8:	e748      	b.n	8001c4c <USB_EPStartXfer+0x1a4>
 8001dba:	2801      	cmp	r0, #1
 8001dbc:	f47f af46 	bne.w	8001c4c <USB_EPStartXfer+0x1a4>
 8001dc0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001dc4:	7820      	ldrb	r0, [r4, #0]
 8001dc6:	b296      	uxth	r6, r2
 8001dc8:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8001dcc:	0100      	lsls	r0, r0, #4
 8001dce:	4432      	add	r2, r6
 8001dd0:	5283      	strh	r3, [r0, r2]
 8001dd2:	e73b      	b.n	8001c4c <USB_EPStartXfer+0x1a4>
    if (ep->doublebuffer == 0U)
 8001dd4:	bb02      	cbnz	r2, 8001e18 <USB_EPStartXfer+0x370>
      if (ep->xfer_len > ep->maxpacket)
 8001dd6:	69a3      	ldr	r3, [r4, #24]
 8001dd8:	6921      	ldr	r1, [r4, #16]
 8001dda:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8001ddc:	bf88      	it	hi
 8001dde:	1a5a      	subhi	r2, r3, r1
 8001de0:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001de2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001de6:	bf88      	it	hi
 8001de8:	460b      	movhi	r3, r1
 8001dea:	7821      	ldrb	r1, [r4, #0]
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8001df2:	0109      	lsls	r1, r1, #4
 8001df4:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80c8 	beq.w	8001f8c <USB_EPStartXfer+0x4e4>
 8001dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8001dfe:	f200 80d3 	bhi.w	8001fa8 <USB_EPStartXfer+0x500>
 8001e02:	0858      	lsrs	r0, r3, #1
 8001e04:	07de      	lsls	r6, r3, #31
 8001e06:	bf48      	it	mi
 8001e08:	3001      	addmi	r0, #1
 8001e0a:	0280      	lsls	r0, r0, #10
 8001e0c:	b280      	uxth	r0, r0
 8001e0e:	5250      	strh	r0, [r2, r1]
 8001e10:	e04b      	b.n	8001eaa <USB_EPStartXfer+0x402>
 8001e12:	bf00      	nop
 8001e14:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8001e18:	78e3      	ldrb	r3, [r4, #3]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d179      	bne.n	8001f12 <USB_EPStartXfer+0x46a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8001e1e:	bb51      	cbnz	r1, 8001e76 <USB_EPStartXfer+0x3ce>
 8001e20:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001e24:	7821      	ldrb	r1, [r4, #0]
 8001e26:	b293      	uxth	r3, r2
 8001e28:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001e2c:	441a      	add	r2, r3
 8001e2e:	6923      	ldr	r3, [r4, #16]
 8001e30:	0109      	lsls	r1, r1, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d145      	bne.n	8001ec2 <USB_EPStartXfer+0x41a>
 8001e36:	5a88      	ldrh	r0, [r1, r2]
 8001e38:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8001e3c:	0400      	lsls	r0, r0, #16
 8001e3e:	0c00      	lsrs	r0, r0, #16
 8001e40:	5288      	strh	r0, [r1, r2]
 8001e42:	5a88      	ldrh	r0, [r1, r2]
 8001e44:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8001e48:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8001e4c:	b280      	uxth	r0, r0
 8001e4e:	5288      	strh	r0, [r1, r2]
 8001e50:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001e54:	7822      	ldrb	r2, [r4, #0]
 8001e56:	b289      	uxth	r1, r1
 8001e58:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	4401      	add	r1, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d03f      	beq.n	8001ee4 <USB_EPStartXfer+0x43c>
 8001e64:	2b3e      	cmp	r3, #62	; 0x3e
 8001e66:	d84b      	bhi.n	8001f00 <USB_EPStartXfer+0x458>
 8001e68:	0858      	lsrs	r0, r3, #1
 8001e6a:	07db      	lsls	r3, r3, #31
 8001e6c:	bf48      	it	mi
 8001e6e:	3001      	addmi	r0, #1
 8001e70:	0280      	lsls	r0, r0, #10
 8001e72:	b280      	uxth	r0, r0
 8001e74:	5250      	strh	r0, [r2, r1]
        if (ep->xfer_count != 0U)
 8001e76:	69e3      	ldr	r3, [r4, #28]
 8001e78:	b1bb      	cbz	r3, 8001eaa <USB_EPStartXfer+0x402>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8001e7a:	f244 0340 	movw	r3, #16448	; 0x4040
 8001e7e:	7822      	ldrb	r2, [r4, #0]
 8001e80:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8001e84:	ea03 0001 	and.w	r0, r3, r1
 8001e88:	438b      	bics	r3, r1
 8001e8a:	d000      	beq.n	8001e8e <USB_EPStartXfer+0x3e6>
 8001e8c:	b968      	cbnz	r0, 8001eaa <USB_EPStartXfer+0x402>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8001e8e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	0c1b      	lsrs	r3, r3, #16
 8001e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ea6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001eaa:	7822      	ldrb	r2, [r4, #0]
 8001eac:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	0c1b      	lsrs	r3, r3, #16
 8001ebc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001ec0:	e61b      	b.n	8001afa <USB_EPStartXfer+0x52>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8001ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8001ec4:	d805      	bhi.n	8001ed2 <USB_EPStartXfer+0x42a>
 8001ec6:	0858      	lsrs	r0, r3, #1
 8001ec8:	07de      	lsls	r6, r3, #31
 8001eca:	bf48      	it	mi
 8001ecc:	3001      	addmi	r0, #1
 8001ece:	0280      	lsls	r0, r0, #10
 8001ed0:	e7bc      	b.n	8001e4c <USB_EPStartXfer+0x3a4>
 8001ed2:	095e      	lsrs	r6, r3, #5
 8001ed4:	06d8      	lsls	r0, r3, #27
 8001ed6:	483a      	ldr	r0, [pc, #232]	; (8001fc0 <USB_EPStartXfer+0x518>)
 8001ed8:	bf08      	it	eq
 8001eda:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8001ede:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8001ee2:	e7b3      	b.n	8001e4c <USB_EPStartXfer+0x3a4>
 8001ee4:	5a53      	ldrh	r3, [r2, r1]
 8001ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	5253      	strh	r3, [r2, r1]
 8001ef0:	5a53      	ldrh	r3, [r2, r1]
 8001ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	5253      	strh	r3, [r2, r1]
 8001efe:	e7ba      	b.n	8001e76 <USB_EPStartXfer+0x3ce>
 8001f00:	0958      	lsrs	r0, r3, #5
 8001f02:	06df      	lsls	r7, r3, #27
 8001f04:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <USB_EPStartXfer+0x518>)
 8001f06:	bf08      	it	eq
 8001f08:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8001f0c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8001f10:	e7f3      	b.n	8001efa <USB_EPStartXfer+0x452>
      else if (ep->type == EP_TYPE_ISOC)
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d151      	bne.n	8001fba <USB_EPStartXfer+0x512>
        if (ep->xfer_len > ep->maxpacket)
 8001f16:	69a3      	ldr	r3, [r4, #24]
 8001f18:	6922      	ldr	r2, [r4, #16]
 8001f1a:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8001f1c:	bf94      	ite	ls
 8001f1e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8001f20:	1a98      	subhi	r0, r3, r2
 8001f22:	61a0      	str	r0, [r4, #24]
 8001f24:	bf88      	it	hi
 8001f26:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001f28:	2900      	cmp	r1, #0
 8001f2a:	d1be      	bne.n	8001eaa <USB_EPStartXfer+0x402>
 8001f2c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001f30:	7821      	ldrb	r1, [r4, #0]
 8001f32:	b292      	uxth	r2, r2
 8001f34:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8001f38:	0109      	lsls	r1, r1, #4
 8001f3a:	4402      	add	r2, r0
 8001f3c:	b9ab      	cbnz	r3, 8001f6a <USB_EPStartXfer+0x4c2>
 8001f3e:	5a88      	ldrh	r0, [r1, r2]
 8001f40:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8001f44:	0400      	lsls	r0, r0, #16
 8001f46:	0c00      	lsrs	r0, r0, #16
 8001f48:	5288      	strh	r0, [r1, r2]
 8001f4a:	5a88      	ldrh	r0, [r1, r2]
 8001f4c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8001f50:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8001f54:	b280      	uxth	r0, r0
 8001f56:	5288      	strh	r0, [r1, r2]
 8001f58:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001f5c:	7822      	ldrb	r2, [r4, #0]
 8001f5e:	b289      	uxth	r1, r1
 8001f60:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	4401      	add	r1, r0
 8001f68:	e745      	b.n	8001df6 <USB_EPStartXfer+0x34e>
 8001f6a:	2b3e      	cmp	r3, #62	; 0x3e
 8001f6c:	d805      	bhi.n	8001f7a <USB_EPStartXfer+0x4d2>
 8001f6e:	0858      	lsrs	r0, r3, #1
 8001f70:	07de      	lsls	r6, r3, #31
 8001f72:	bf48      	it	mi
 8001f74:	3001      	addmi	r0, #1
 8001f76:	0280      	lsls	r0, r0, #10
 8001f78:	e7ec      	b.n	8001f54 <USB_EPStartXfer+0x4ac>
 8001f7a:	095e      	lsrs	r6, r3, #5
 8001f7c:	4810      	ldr	r0, [pc, #64]	; (8001fc0 <USB_EPStartXfer+0x518>)
 8001f7e:	06df      	lsls	r7, r3, #27
 8001f80:	bf08      	it	eq
 8001f82:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 8001f86:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8001f8a:	e7e3      	b.n	8001f54 <USB_EPStartXfer+0x4ac>
 8001f8c:	5a53      	ldrh	r3, [r2, r1]
 8001f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	5253      	strh	r3, [r2, r1]
 8001f98:	5a53      	ldrh	r3, [r2, r1]
 8001f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	5253      	strh	r3, [r2, r1]
 8001fa6:	e780      	b.n	8001eaa <USB_EPStartXfer+0x402>
 8001fa8:	0958      	lsrs	r0, r3, #5
 8001faa:	06db      	lsls	r3, r3, #27
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <USB_EPStartXfer+0x518>)
 8001fae:	bf08      	it	eq
 8001fb0:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 8001fb4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8001fb8:	e7f3      	b.n	8001fa2 <USB_EPStartXfer+0x4fa>
        return HAL_ERROR;
 8001fba:	2001      	movs	r0, #1
 8001fbc:	e5a4      	b.n	8001b08 <USB_EPStartXfer+0x60>
 8001fbe:	bf00      	nop
 8001fc0:	ffff8000 	.word	0xffff8000

08001fc4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001fc4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8001fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8001fce:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8001fd0:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001fd2:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8001fd4:	462e      	mov	r6, r5
 8001fd6:	3402      	adds	r4, #2
 8001fd8:	b936      	cbnz	r6, 8001fe8 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8001fda:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8001fdc:	bf44      	itt	mi
 8001fde:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001fe2:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8001fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8001fe8:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8001fec:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8001fee:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001ff0:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8001ff4:	0a00      	lsrs	r0, r0, #8
 8001ff6:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8001ffa:	e7ec      	b.n	8001fd6 <USB_ReadPMA+0x12>

08001ffc <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_CfgDesc);
 8001ffc:	231b      	movs	r3, #27
 8001ffe:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8002000:	4800      	ldr	r0, [pc, #0]	; (8002004 <USBD_DFU_GetCfgDesc+0x8>)
 8002002:	4770      	bx	lr
 8002004:	20000048 	.word	0x20000048

08002008 <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{

  return USBD_OK;
}
 8002008:	2000      	movs	r0, #0
 800200a:	4770      	bx	lr

0800200c <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 800200c:	2000      	movs	r0, #0
 800200e:	4770      	bx	lr

08002010 <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8002010:	230a      	movs	r3, #10
 8002012:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8002014:	4800      	ldr	r0, [pc, #0]	; (8002018 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8002016:	4770      	bx	lr
 8002018:	20000064 	.word	0x20000064

0800201c <USBD_DFU_EP0_TxReady>:
{
 800201c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800201e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
{
 8002022:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8002024:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002028:	2b04      	cmp	r3, #4
 800202a:	d164      	bne.n	80020f6 <USBD_DFU_EP0_TxReady+0xda>
    if (hdfu->wblock_num == 0U)
 800202c:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 8002030:	2900      	cmp	r1, #0
 8002032:	d151      	bne.n	80020d8 <USBD_DFU_EP0_TxReady+0xbc>
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8002034:	7823      	ldrb	r3, [r4, #0]
 8002036:	b99b      	cbnz	r3, 8002060 <USBD_DFU_EP0_TxReady+0x44>
 8002038:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 800203c:	2b01      	cmp	r3, #1
 800203e:	d13c      	bne.n	80020ba <USBD_DFU_EP0_TxReady+0x9e>
    hdfu->wlength = 0U;
 8002040:	2000      	movs	r0, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002042:	2303      	movs	r3, #3
    hdfu->wlength = 0U;
 8002044:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8002048:	f8c4 0400 	str.w	r0, [r4, #1024]	; 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800204c:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8002050:	f884 0411 	strb.w	r0, [r4, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8002054:	f8a4 0412 	strh.w	r0, [r4, #1042]	; 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002058:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 800205c:	b003      	add	sp, #12
 800205e:	bd30      	pop	{r4, r5, pc}
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8002060:	2b21      	cmp	r3, #33	; 0x21
 8002062:	d110      	bne.n	8002086 <USBD_DFU_EP0_TxReady+0x6a>
 8002064:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002068:	2b05      	cmp	r3, #5
 800206a:	d126      	bne.n	80020ba <USBD_DFU_EP0_TxReady+0x9e>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800206c:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800206e:	78a2      	ldrb	r2, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8002076:	7862      	ldrb	r2, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002078:	4413      	add	r3, r2
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800207a:	7922      	ldrb	r2, [r4, #4]
 800207c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8002080:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
 8002084:	e7dc      	b.n	8002040 <USBD_DFU_EP0_TxReady+0x24>
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8002086:	2b41      	cmp	r3, #65	; 0x41
 8002088:	d117      	bne.n	80020ba <USBD_DFU_EP0_TxReady+0x9e>
 800208a:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 800208e:	2b05      	cmp	r3, #5
 8002090:	d113      	bne.n	80020ba <USBD_DFU_EP0_TxReady+0x9e>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002092:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8002094:	78a0      	ldrb	r0, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	eb03 2300 	add.w	r3, r3, r0, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 800209c:	7860      	ldrb	r0, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800209e:	4403      	add	r3, r0
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80020a0:	7920      	ldrb	r0, [r4, #4]
 80020a2:	eb03 6000 	add.w	r0, r3, r0, lsl #24
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 80020a6:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80020aa:	f8c4 0408 	str.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4798      	blx	r3
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d0c4      	beq.n	8002040 <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 80020b6:	2002      	movs	r0, #2
 80020b8:	e7d0      	b.n	800205c <USBD_DFU_EP0_TxReady+0x40>
        hdfu->wlength = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80020c0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
        req.bmRequest = 0U;
 80020c4:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 80020c8:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 80020ca:	4669      	mov	r1, sp
 80020cc:	4628      	mov	r0, r5
        req.wLength = 1U;
 80020ce:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 80020d2:	f000 fd7b 	bl	8002bcc <USBD_CtlError>
 80020d6:	e7b3      	b.n	8002040 <USBD_DFU_EP0_TxReady+0x24>
      if (hdfu->wblock_num > 1U)
 80020d8:	2901      	cmp	r1, #1
 80020da:	d0b1      	beq.n	8002040 <USBD_DFU_EP0_TxReady+0x24>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80020dc:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 80020e0:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80020e4:	3902      	subs	r1, #2
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 80020e6:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4620      	mov	r0, r4
 80020ee:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 80020f2:	4798      	blx	r3
 80020f4:	e7dd      	b.n	80020b2 <USBD_DFU_EP0_TxReady+0x96>
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80020f6:	2b07      	cmp	r3, #7
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	d10f      	bne.n	800211e <USBD_DFU_EP0_TxReady+0x102>

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <USBD_DFU_EP0_TxReady+0x140>)
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002100:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002104:	7d12      	ldrb	r2, [r2, #20]
 8002106:	f012 0204 	ands.w	r2, r2, #4
 800210a:	d00a      	beq.n	8002122 <USBD_DFU_EP0_TxReady+0x106>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800210c:	2206      	movs	r2, #6

    hdfu->dev_status[1] = 0U;
 800210e:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002112:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002116:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 800211a:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
  return USBD_OK;
 800211e:	4618      	mov	r0, r3
 8002120:	e79c      	b.n	800205c <USBD_DFU_EP0_TxReady+0x40>
    return;
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002122:	2308      	movs	r3, #8

    hdfu->dev_status[1] = 0U;
 8002124:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002128:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 800212c:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002130:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8002134:	f000 fa22 	bl	800257c <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002138:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002140:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002144:	4906      	ldr	r1, [pc, #24]	; (8002160 <USBD_DFU_EP0_TxReady+0x144>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002146:	4b07      	ldr	r3, [pc, #28]	; (8002164 <USBD_DFU_EP0_TxReady+0x148>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002148:	68ca      	ldr	r2, [r1, #12]
 800214a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800214e:	4313      	orrs	r3, r2
 8002150:	60cb      	str	r3, [r1, #12]
 8002152:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002156:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002158:	e7fd      	b.n	8002156 <USBD_DFU_EP0_TxReady+0x13a>
 800215a:	bf00      	nop
 800215c:	20000048 	.word	0x20000048
 8002160:	e000ed00 	.word	0xe000ed00
 8002164:	05fa0004 	.word	0x05fa0004

08002168 <USBD_DFU_DeInit>:
{
 8002168:	b538      	push	{r3, r4, r5, lr}
  hdfu->dev_state = DFU_STATE_IDLE;
 800216a:	2202      	movs	r2, #2
  hdfu->wblock_num = 0U;
 800216c:	2500      	movs	r5, #0
{
 800216e:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002170:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  hdfu->dev_state = DFU_STATE_IDLE;
 8002174:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002178:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800217c:	f883 5410 	strb.w	r5, [r3, #1040]	; 0x410
  hdfu->wblock_num = 0U;
 8002180:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8002184:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002188:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002190:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8002194:	f000 ff24 	bl	8002fe0 <USBD_static_free>
}
 8002198:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 800219a:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800219e:	bd38      	pop	{r3, r4, r5, pc}

080021a0 <USBD_DFU_Init>:
{
 80021a0:	b510      	push	{r4, lr}
 80021a2:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80021a4:	f240 401c 	movw	r0, #1052	; 0x41c
 80021a8:	f000 ff16 	bl	8002fd8 <USBD_static_malloc>
 80021ac:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80021b0:	b1b0      	cbz	r0, 80021e0 <USBD_DFU_Init+0x40>
    hdfu->wblock_num = 0U;
 80021b2:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 80021b4:	2202      	movs	r2, #2
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80021b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdfu->dev_state = DFU_STATE_IDLE;
 80021ba:	f8a0 2418 	strh.w	r2, [r0, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80021be:	f8c0 3410 	str.w	r3, [r0, #1040]	; 0x410
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 80021c2:	f8a0 2414 	strh.w	r2, [r0, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 80021c6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
    hdfu->wlength = 0U;
 80021ca:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
    hdfu->alt_setting = 0U;
 80021ce:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80021d2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80021d6:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4798      	blx	r3
 80021de:	b100      	cbz	r0, 80021e2 <USBD_DFU_Init+0x42>
      return USBD_FAIL;
 80021e0:	2002      	movs	r0, #2
}
 80021e2:	bd10      	pop	{r4, pc}

080021e4 <USBD_DFU_IsoOutIncomplete>:
 80021e4:	2000      	movs	r0, #0
 80021e6:	4770      	bx	lr

080021e8 <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80021e8:	2906      	cmp	r1, #6
{
 80021ea:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80021ec:	d807      	bhi.n	80021fe <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 80021ee:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80021f2:	4904      	ldr	r1, [pc, #16]	; (8002204 <USBD_DFU_GetUsrStringDesc+0x1c>)
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	f000 fcf4 	bl	8002be2 <USBD_GetString>
 80021fa:	4802      	ldr	r0, [pc, #8]	; (8002204 <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 80021fc:	bd08      	pop	{r3, pc}
    return NULL;
 80021fe:	2000      	movs	r0, #0
 8002200:	e7fc      	b.n	80021fc <USBD_DFU_GetUsrStringDesc+0x14>
 8002202:	bf00      	nop
 8002204:	200000fc 	.word	0x200000fc

08002208 <USBD_DFU_Setup>:
  uint16_t status_info = 0U;
 8002208:	2300      	movs	r3, #0
{
 800220a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800220e:	780d      	ldrb	r5, [r1, #0]
 8002210:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002212:	f015 0560 	ands.w	r5, r5, #96	; 0x60
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002216:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  uint16_t status_info = 0U;
 800221a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800221e:	f000 8143 	beq.w	80024a8 <USBD_DFU_Setup+0x2a0>
 8002222:	2d20      	cmp	r5, #32
 8002224:	f040 8156 	bne.w	80024d4 <USBD_DFU_Setup+0x2cc>
      switch (req->bRequest)
 8002228:	f891 8001 	ldrb.w	r8, [r1, #1]
 800222c:	f1b8 0f06 	cmp.w	r8, #6
 8002230:	f200 8150 	bhi.w	80024d4 <USBD_DFU_Setup+0x2cc>
 8002234:	e8df f018 	tbh	[pc, r8, lsl #1]
 8002238:	00070111 	.word	0x00070111
 800223c:	00980037 	.word	0x00980037
 8002240:	00f400de 	.word	0x00f400de
 8002244:	00f8      	.short	0x00f8
  if (req->wLength > 0U)
 8002246:	88ca      	ldrh	r2, [r1, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002248:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
  if (req->wLength > 0U)
 800224c:	b1ba      	cbz	r2, 800227e <USBD_DFU_Setup+0x76>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800224e:	2b02      	cmp	r3, #2
 8002250:	d001      	beq.n	8002256 <USBD_DFU_Setup+0x4e>
 8002252:	2b05      	cmp	r3, #5
 8002254:	d10f      	bne.n	8002276 <USBD_DFU_Setup+0x6e>
      hdfu->wblock_num = req->wValue;
 8002256:	884b      	ldrh	r3, [r1, #2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002258:	4630      	mov	r0, r6
      hdfu->wblock_num = req->wValue;
 800225a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800225e:	2303      	movs	r3, #3
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002260:	4621      	mov	r1, r4
      hdfu->wlength = req->wLength;
 8002262:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002266:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800226a:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 800226e:	f000 fce9 	bl	8002c44 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002272:	2500      	movs	r5, #0
 8002274:	e013      	b.n	800229e <USBD_DFU_Setup+0x96>
      USBD_CtlError(pdev, req);
 8002276:	4630      	mov	r0, r6
 8002278:	f000 fca8 	bl	8002bcc <USBD_CtlError>
 800227c:	e7f9      	b.n	8002272 <USBD_DFU_Setup+0x6a>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 800227e:	2b05      	cmp	r3, #5
 8002280:	d001      	beq.n	8002286 <USBD_DFU_Setup+0x7e>
 8002282:	2b02      	cmp	r3, #2
 8002284:	d1f7      	bne.n	8002276 <USBD_DFU_Setup+0x6e>
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002286:	f44f 7383 	mov.w	r3, #262	; 0x106
      hdfu->dev_status[1] = 0U;
 800228a:	2500      	movs	r5, #0
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800228c:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002290:	2306      	movs	r3, #6
      hdfu->dev_status[1] = 0U;
 8002292:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8002296:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
      hdfu->dev_status[4] = hdfu->dev_state;
 800229a:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 800229e:	4628      	mov	r0, r5
 80022a0:	b002      	add	sp, #8
 80022a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (req->wLength > 0U)
 80022a6:	88ca      	ldrh	r2, [r1, #6]
 80022a8:	2a00      	cmp	r2, #0
 80022aa:	d053      	beq.n	8002354 <USBD_DFU_Setup+0x14c>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80022ac:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d001      	beq.n	80022b8 <USBD_DFU_Setup+0xb0>
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	d147      	bne.n	8002348 <USBD_DFU_Setup+0x140>
      hdfu->wblock_num = req->wValue;
 80022b8:	884f      	ldrh	r7, [r1, #2]
      hdfu->wlength = req->wLength;
 80022ba:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->wblock_num = req->wValue;
 80022be:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
      if (hdfu->wblock_num == 0U)
 80022c2:	b9b7      	cbnz	r7, 80022f2 <USBD_DFU_Setup+0xea>
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80022c4:	f44f 5304 	mov.w	r3, #8448	; 0x2100
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80022c8:	2a03      	cmp	r2, #3
 80022ca:	bf98      	it	ls
 80022cc:	f04f 0809 	movls.w	r8, #9
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80022d0:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80022d2:	2341      	movs	r3, #65	; 0x41
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 80022d4:	2203      	movs	r2, #3
 80022d6:	4621      	mov	r1, r4
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80022d8:	f884 8418 	strb.w	r8, [r4, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80022dc:	f884 7411 	strb.w	r7, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80022e0:	f8a4 7412 	strh.w	r7, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 80022e4:	f884 8414 	strb.w	r8, [r4, #1044]	; 0x414
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80022e8:	70a3      	strb	r3, [r4, #2]
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80022ea:	4630      	mov	r0, r6
 80022ec:	f000 fc95 	bl	8002c1a <USBD_CtlSendData>
 80022f0:	e7bf      	b.n	8002272 <USBD_DFU_Setup+0x6a>
      else if (hdfu->wblock_num > 1U)
 80022f2:	2f01      	cmp	r7, #1
 80022f4:	f04f 0500 	mov.w	r5, #0
 80022f8:	d019      	beq.n	800232e <USBD_DFU_Setup+0x126>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80022fa:	2309      	movs	r3, #9
        hdfu->dev_status[1] = 0U;
 80022fc:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002300:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 8002304:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002308:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 800230c:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002310:	f8d6 32bc 	ldr.w	r3, [r6, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002314:	3f02      	subs	r7, #2
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002316:	4621      	mov	r1, r4
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	eb00 2087 	add.w	r0, r0, r7, lsl #10
 800231e:	4798      	blx	r3
 8002320:	4601      	mov	r1, r0
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8002322:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	; 0x404
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8002326:	4630      	mov	r0, r6
 8002328:	f000 fc77 	bl	8002c1a <USBD_CtlSendData>
 800232c:	e7b7      	b.n	800229e <USBD_DFU_Setup+0x96>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800232e:	230f      	movs	r3, #15
        hdfu->dev_status[1] = 0U;
 8002330:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002334:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 8002338:	f8a4 5412 	strh.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 800233c:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlError(pdev, req);
 8002340:	4630      	mov	r0, r6
 8002342:	f000 fc43 	bl	8002bcc <USBD_CtlError>
 8002346:	e7aa      	b.n	800229e <USBD_DFU_Setup+0x96>
      hdfu->wlength = 0U;
 8002348:	2500      	movs	r5, #0
 800234a:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800234e:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 8002352:	e7f5      	b.n	8002340 <USBD_DFU_Setup+0x138>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002354:	2302      	movs	r3, #2
    hdfu->dev_status[1] = 0U;
 8002356:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_IDLE;
 800235a:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 800235e:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002362:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 8002366:	e784      	b.n	8002272 <USBD_DFU_Setup+0x6a>
  switch (hdfu->dev_state)
 8002368:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800236c:	f504 6582 	add.w	r5, r4, #1040	; 0x410
  switch (hdfu->dev_state)
 8002370:	2b03      	cmp	r3, #3
 8002372:	d004      	beq.n	800237e <USBD_DFU_Setup+0x176>
 8002374:	2b06      	cmp	r3, #6
 8002376:	d026      	beq.n	80023c6 <USBD_DFU_Setup+0x1be>
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002378:	2206      	movs	r2, #6
 800237a:	4629      	mov	r1, r5
 800237c:	e7b5      	b.n	80022ea <USBD_DFU_Setup+0xe2>
      if (hdfu->wlength != 0U)
 800237e:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002382:	b1d3      	cbz	r3, 80023ba <USBD_DFU_Setup+0x1b2>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002384:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 8002386:	2200      	movs	r2, #0
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002388:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800238c:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002390:	f8a4 2412 	strh.w	r2, [r4, #1042]	; 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002394:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002398:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800239c:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80023a0:	699b      	ldr	r3, [r3, #24]
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 80023a2:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80023a6:	b929      	cbnz	r1, 80023b4 <USBD_DFU_Setup+0x1ac>
 80023a8:	7822      	ldrb	r2, [r4, #0]
 80023aa:	2a41      	cmp	r2, #65	; 0x41
 80023ac:	d102      	bne.n	80023b4 <USBD_DFU_Setup+0x1ac>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80023ae:	462a      	mov	r2, r5
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80023b0:	4798      	blx	r3
 80023b2:	e7e1      	b.n	8002378 <USBD_DFU_Setup+0x170>
 80023b4:	462a      	mov	r2, r5
 80023b6:	2101      	movs	r1, #1
 80023b8:	e7fa      	b.n	80023b0 <USBD_DFU_Setup+0x1a8>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80023ba:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 80023bc:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 80023c0:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
 80023c4:	e009      	b.n	80023da <USBD_DFU_Setup+0x1d2>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80023c6:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10a      	bne.n	80023e4 <USBD_DFU_Setup+0x1dc>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80023ce:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80023d0:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80023d4:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80023d6:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[2] = 0U;
 80023da:	f8a4 3412 	strh.w	r3, [r4, #1042]	; 0x412
          hdfu->dev_status[4] = hdfu->dev_state;
 80023de:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 80023e2:	e7c9      	b.n	8002378 <USBD_DFU_Setup+0x170>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1c7      	bne.n	8002378 <USBD_DFU_Setup+0x170>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 80023e8:	4a4c      	ldr	r2, [pc, #304]	; (800251c <USBD_DFU_Setup+0x314>)
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80023ea:	7d12      	ldrb	r2, [r2, #20]
 80023ec:	0752      	lsls	r2, r2, #29
 80023ee:	d5c3      	bpl.n	8002378 <USBD_DFU_Setup+0x170>
          hdfu->dev_state = DFU_STATE_IDLE;
 80023f0:	2202      	movs	r2, #2
 80023f2:	e7e3      	b.n	80023bc <USBD_DFU_Setup+0x1b4>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 80023f4:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80023f8:	2b0a      	cmp	r3, #10
 80023fa:	d108      	bne.n	800240e <USBD_DFU_Setup+0x206>
    hdfu->dev_state = DFU_STATE_IDLE;
 80023fc:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 80023fe:	2500      	movs	r5, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002400:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002404:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002408:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 800240c:	e747      	b.n	800229e <USBD_DFU_Setup+0x96>
    hdfu->dev_state = DFU_STATE_ERROR;
 800240e:	230a      	movs	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002410:	220e      	movs	r2, #14
    hdfu->dev_state = DFU_STATE_ERROR;
 8002412:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002416:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 800241a:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 800241e:	e728      	b.n	8002272 <USBD_DFU_Setup+0x6a>
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8002420:	2201      	movs	r2, #1
 8002422:	f504 6183 	add.w	r1, r4, #1048	; 0x418
 8002426:	e760      	b.n	80022ea <USBD_DFU_Setup+0xe2>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002428:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 800242c:	2b09      	cmp	r3, #9
 800242e:	f63f af20 	bhi.w	8002272 <USBD_DFU_Setup+0x6a>
 8002432:	f44f 751b 	mov.w	r5, #620	; 0x26c
 8002436:	40dd      	lsrs	r5, r3
 8002438:	43ed      	mvns	r5, r5
 800243a:	f015 0501 	ands.w	r5, r5, #1
 800243e:	f47f af18 	bne.w	8002272 <USBD_DFU_Setup+0x6a>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002442:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002444:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002448:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 800244c:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8002450:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002454:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
 8002458:	e721      	b.n	800229e <USBD_DFU_Setup+0x96>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 800245a:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800245e:	2a09      	cmp	r2, #9
 8002460:	d811      	bhi.n	8002486 <USBD_DFU_Setup+0x27e>
 8002462:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8002466:	40d3      	lsrs	r3, r2
 8002468:	43db      	mvns	r3, r3
 800246a:	f013 0301 	ands.w	r3, r3, #1
 800246e:	d10a      	bne.n	8002486 <USBD_DFU_Setup+0x27e>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002470:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002472:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002476:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 800247a:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 800247e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002482:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8002486:	4b25      	ldr	r3, [pc, #148]	; (800251c <USBD_DFU_Setup+0x314>)
 8002488:	7d5d      	ldrb	r5, [r3, #21]
 800248a:	f015 0510 	ands.w	r5, r5, #16
 800248e:	d007      	beq.n	80024a0 <USBD_DFU_Setup+0x298>
    USBD_Stop(pdev);
 8002490:	4630      	mov	r0, r6
 8002492:	f000 f873 	bl	800257c <USBD_Stop>
    USBD_Start(pdev);
 8002496:	4630      	mov	r0, r6
 8002498:	f000 f86b 	bl	8002572 <USBD_Start>
  uint8_t ret = USBD_OK;
 800249c:	4645      	mov	r5, r8
 800249e:	e6fe      	b.n	800229e <USBD_DFU_Setup+0x96>
    USBD_Delay((uint32_t)req->wValue);
 80024a0:	8848      	ldrh	r0, [r1, #2]
 80024a2:	f7fd ff53 	bl	800034c <HAL_Delay>
 80024a6:	e6fa      	b.n	800229e <USBD_DFU_Setup+0x96>
      switch (req->bRequest)
 80024a8:	784f      	ldrb	r7, [r1, #1]
 80024aa:	2f0b      	cmp	r7, #11
 80024ac:	d812      	bhi.n	80024d4 <USBD_DFU_Setup+0x2cc>
 80024ae:	e8df f007 	tbb	[pc, r7]
 80024b2:	1106      	.short	0x1106
 80024b4:	11111111 	.word	0x11111111
 80024b8:	11111116 	.word	0x11111116
 80024bc:	2b23      	.short	0x2b23
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80024be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d106      	bne.n	80024d4 <USBD_DFU_Setup+0x2cc>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80024c6:	2202      	movs	r2, #2
 80024c8:	f10d 0106 	add.w	r1, sp, #6
 80024cc:	f000 fba5 	bl	8002c1a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80024d0:	463d      	mov	r5, r7
 80024d2:	e6e4      	b.n	800229e <USBD_DFU_Setup+0x96>
            USBD_CtlError(pdev, req);
 80024d4:	4630      	mov	r0, r6
 80024d6:	f000 fb79 	bl	8002bcc <USBD_CtlError>
            ret = USBD_FAIL;
 80024da:	2502      	movs	r5, #2
 80024dc:	e6df      	b.n	800229e <USBD_DFU_Setup+0x96>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80024de:	884b      	ldrh	r3, [r1, #2]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	2b21      	cmp	r3, #33	; 0x21
 80024e4:	d105      	bne.n	80024f2 <USBD_DFU_Setup+0x2ea>
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80024e6:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80024e8:	490d      	ldr	r1, [pc, #52]	; (8002520 <USBD_DFU_Setup+0x318>)
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80024ea:	2a09      	cmp	r2, #9
 80024ec:	bf28      	it	cs
 80024ee:	2209      	movcs	r2, #9
 80024f0:	e719      	b.n	8002326 <USBD_DFU_Setup+0x11e>
  uint16_t len = 0U;
 80024f2:	2200      	movs	r2, #0
  uint8_t *pbuf = 0U;
 80024f4:	4611      	mov	r1, r2
          USBD_CtlSendData(pdev, pbuf, len);
 80024f6:	e716      	b.n	8002326 <USBD_DFU_Setup+0x11e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80024f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d1e9      	bne.n	80024d4 <USBD_DFU_Setup+0x2cc>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8002500:	2201      	movs	r2, #1
 8002502:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002506:	e70e      	b.n	8002326 <USBD_DFU_Setup+0x11e>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8002508:	788d      	ldrb	r5, [r1, #2]
 800250a:	2d00      	cmp	r5, #0
 800250c:	d1e2      	bne.n	80024d4 <USBD_DFU_Setup+0x2cc>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800250e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002512:	2b03      	cmp	r3, #3
 8002514:	d1de      	bne.n	80024d4 <USBD_DFU_Setup+0x2cc>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8002516:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
 800251a:	e6c0      	b.n	800229e <USBD_DFU_Setup+0x96>
 800251c:	20000048 	.word	0x20000048
 8002520:	2000005a 	.word	0x2000005a

08002524 <USBD_DFU_DataOut>:
 8002524:	2000      	movs	r0, #0
 8002526:	4770      	bx	lr

08002528 <USBD_DFU_IsoINIncomplete>:
 8002528:	2000      	movs	r0, #0
 800252a:	4770      	bx	lr

0800252c <USBD_DFU_SOF>:
 800252c:	2000      	movs	r0, #0
 800252e:	4770      	bx	lr

08002530 <USBD_DFU_RegisterMedia>:
  if (fops != NULL)
 8002530:	b109      	cbz	r1, 8002536 <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData = fops;
 8002532:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
}
 8002536:	2000      	movs	r0, #0
 8002538:	4770      	bx	lr

0800253a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800253a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800253c:	b180      	cbz	r0, 8002560 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800253e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002542:	b113      	cbz	r3, 800254a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800254a:	b109      	cbz	r1, 8002550 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800254c:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002550:	2301      	movs	r3, #1
  pdev->id = id;
 8002552:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002554:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002558:	f000 fcb6 	bl	8002ec8 <USBD_LL_Init>

  return USBD_OK;
 800255c:	2000      	movs	r0, #0
}
 800255e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002560:	2002      	movs	r0, #2
 8002562:	e7fc      	b.n	800255e <USBD_Init+0x24>

08002564 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002564:	b119      	cbz	r1, 800256e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002566:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800256a:	2000      	movs	r0, #0
 800256c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800256e:	2002      	movs	r0, #2
  }

  return status;
}
 8002570:	4770      	bx	lr

08002572 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002572:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002574:	f000 fcd2 	bl	8002f1c <USBD_LL_Start>

  return USBD_OK;
}
 8002578:	2000      	movs	r0, #0
 800257a:	bd08      	pop	{r3, pc}

0800257c <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800257c:	b510      	push	{r4, lr}
 800257e:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002580:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002584:	7901      	ldrb	r1, [r0, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 800258a:	4620      	mov	r0, r4
 800258c:	f000 fccf 	bl	8002f2e <USBD_LL_Stop>

  return USBD_OK;
}
 8002590:	2000      	movs	r0, #0
 8002592:	bd10      	pop	{r4, pc}

08002594 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002594:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002596:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800259a:	b90b      	cbnz	r3, 80025a0 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800259c:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800259e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4798      	blx	r3
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d0fa      	beq.n	800259e <USBD_SetClassConfig+0xa>
 80025a8:	e7f8      	b.n	800259c <USBD_SetClassConfig+0x8>

080025aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80025aa:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80025ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4798      	blx	r3

  return USBD_OK;
}
 80025b4:	2000      	movs	r0, #0
 80025b6:	bd08      	pop	{r3, pc}

080025b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80025b8:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80025ba:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80025be:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80025c0:	4628      	mov	r0, r5
 80025c2:	f000 faef 	bl	8002ba4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80025c6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80025c8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80025cc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80025d0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80025d4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80025d8:	f001 031f 	and.w	r3, r1, #31
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d008      	beq.n	80025f2 <USBD_LL_SetupStage+0x3a>
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d00b      	beq.n	80025fc <USBD_LL_SetupStage+0x44>
 80025e4:	b97b      	cbnz	r3, 8002606 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80025e6:	4629      	mov	r1, r5
 80025e8:	4620      	mov	r0, r4
 80025ea:	f000 f8fb 	bl	80027e4 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80025ee:	2000      	movs	r0, #0
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80025f2:	4629      	mov	r1, r5
 80025f4:	4620      	mov	r0, r4
 80025f6:	f000 fa27 	bl	8002a48 <USBD_StdItfReq>
      break;
 80025fa:	e7f8      	b.n	80025ee <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80025fc:	4629      	mov	r1, r5
 80025fe:	4620      	mov	r0, r4
 8002600:	f000 fa46 	bl	8002a90 <USBD_StdEPReq>
      break;
 8002604:	e7f3      	b.n	80025ee <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002606:	4620      	mov	r0, r4
 8002608:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800260c:	f000 fca4 	bl	8002f58 <USBD_LL_StallEP>
      break;
 8002610:	e7ed      	b.n	80025ee <USBD_LL_SetupStage+0x36>

08002612 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002614:	4604      	mov	r4, r0
 8002616:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002618:	460d      	mov	r5, r1
 800261a:	bb39      	cbnz	r1, 800266c <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800261c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002620:	2b03      	cmp	r3, #3
 8002622:	d11c      	bne.n	800265e <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8002624:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8002628:	4296      	cmp	r6, r2
 800262a:	d90b      	bls.n	8002644 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800262c:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 800262e:	42b2      	cmp	r2, r6
 8002630:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8002632:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002636:	bf8c      	ite	hi
 8002638:	b2b2      	uxthhi	r2, r6
 800263a:	b292      	uxthls	r2, r2
 800263c:	f000 fb0f 	bl	8002c5e <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002640:	4628      	mov	r0, r5
 8002642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002644:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	b123      	cbz	r3, 8002656 <USBD_LL_DataOutStage+0x44>
 800264c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002650:	2a03      	cmp	r2, #3
 8002652:	d100      	bne.n	8002656 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8002654:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002656:	4620      	mov	r0, r4
 8002658:	f000 fb09 	bl	8002c6e <USBD_CtlSendStatus>
 800265c:	e7f0      	b.n	8002640 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800265e:	2b05      	cmp	r3, #5
 8002660:	d1ee      	bne.n	8002640 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002662:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002666:	f000 fc77 	bl	8002f58 <USBD_LL_StallEP>
 800266a:	e7e9      	b.n	8002640 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800266c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	b133      	cbz	r3, 8002682 <USBD_LL_DataOutStage+0x70>
 8002674:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002678:	2a03      	cmp	r2, #3
 800267a:	d102      	bne.n	8002682 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800267c:	4798      	blx	r3
  return USBD_OK;
 800267e:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002680:	e7de      	b.n	8002640 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8002682:	2502      	movs	r5, #2
 8002684:	e7dc      	b.n	8002640 <USBD_LL_DataOutStage+0x2e>

08002686 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002688:	4604      	mov	r4, r0
 800268a:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800268c:	460d      	mov	r5, r1
 800268e:	2900      	cmp	r1, #0
 8002690:	d147      	bne.n	8002722 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002692:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002696:	2b02      	cmp	r3, #2
 8002698:	d13c      	bne.n	8002714 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800269a:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800269e:	429e      	cmp	r6, r3
 80026a0:	d914      	bls.n	80026cc <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80026a2:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80026a4:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80026a6:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	f000 fac3 	bl	8002c34 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80026ae:	462b      	mov	r3, r5
 80026b0:	462a      	mov	r2, r5
 80026b2:	4629      	mov	r1, r5
 80026b4:	4620      	mov	r0, r4
 80026b6:	f000 fc85 	bl	8002fc4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80026ba:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d102      	bne.n	80026c8 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80026c8:	4628      	mov	r0, r5
 80026ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80026cc:	69c2      	ldr	r2, [r0, #28]
 80026ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80026d2:	fb03 2616 	mls	r6, r3, r6, r2
 80026d6:	b95e      	cbnz	r6, 80026f0 <USBD_LL_DataInStage+0x6a>
 80026d8:	4293      	cmp	r3, r2
 80026da:	d809      	bhi.n	80026f0 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80026dc:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d205      	bcs.n	80026f0 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80026e4:	460a      	mov	r2, r1
 80026e6:	f000 faa5 	bl	8002c34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80026ea:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80026ee:	e7de      	b.n	80026ae <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80026f0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	b12b      	cbz	r3, 8002704 <USBD_LL_DataInStage+0x7e>
 80026f8:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80026fc:	2a03      	cmp	r2, #3
 80026fe:	d101      	bne.n	8002704 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8002700:	4620      	mov	r0, r4
 8002702:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	4620      	mov	r0, r4
 8002708:	f000 fc26 	bl	8002f58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800270c:	4620      	mov	r0, r4
 800270e:	f000 fab9 	bl	8002c84 <USBD_CtlReceiveStatus>
 8002712:	e7d2      	b.n	80026ba <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002714:	f033 0304 	bics.w	r3, r3, #4
 8002718:	d1cf      	bne.n	80026ba <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	f000 fc1c 	bl	8002f58 <USBD_LL_StallEP>
 8002720:	e7cb      	b.n	80026ba <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8002722:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	b133      	cbz	r3, 8002738 <USBD_LL_DataInStage+0xb2>
 800272a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800272e:	2a03      	cmp	r2, #3
 8002730:	d102      	bne.n	8002738 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8002732:	4798      	blx	r3
  return USBD_OK;
 8002734:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002736:	e7c7      	b.n	80026c8 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8002738:	2502      	movs	r5, #2
 800273a:	e7c5      	b.n	80026c8 <USBD_LL_DataInStage+0x42>

0800273c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800273c:	2200      	movs	r2, #0
{
 800273e:	b570      	push	{r4, r5, r6, lr}
 8002740:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002742:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002744:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002746:	4611      	mov	r1, r2
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	f000 fbf9 	bl	8002f40 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800274e:	4633      	mov	r3, r6
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	2200      	movs	r2, #0
 8002754:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002756:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800275a:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800275e:	f000 fbef 	bl	8002f40 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002762:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002764:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002768:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800276a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800276c:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002770:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002774:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002776:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800277a:	b123      	cbz	r3, 8002786 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800277c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002780:	4620      	mov	r0, r4
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002786:	2000      	movs	r0, #0
 8002788:	bd70      	pop	{r4, r5, r6, pc}

0800278a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800278a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800278c:	2000      	movs	r0, #0
 800278e:	4770      	bx	lr

08002790 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002790:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002794:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002798:	2304      	movs	r3, #4
 800279a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800279e:	2000      	movs	r0, #0
 80027a0:	4770      	bx	lr

080027a2 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80027a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80027a6:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80027a8:	bf04      	itt	eq
 80027aa:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80027ae:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80027b2:	2000      	movs	r0, #0
 80027b4:	4770      	bx	lr

080027b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80027b6:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80027b8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80027bc:	2a03      	cmp	r2, #3
 80027be:	d104      	bne.n	80027ca <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80027c0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	b103      	cbz	r3, 80027ca <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80027c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80027ca:	2000      	movs	r0, #0
 80027cc:	bd08      	pop	{r3, pc}

080027ce <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80027ce:	b510      	push	{r4, lr}
 80027d0:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80027d2:	2180      	movs	r1, #128	; 0x80
 80027d4:	f000 fbc0 	bl	8002f58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80027d8:	4620      	mov	r0, r4
}
 80027da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80027de:	2100      	movs	r1, #0
 80027e0:	f000 bbba 	b.w	8002f58 <USBD_LL_StallEP>

080027e4 <USBD_StdDevReq>:
{
 80027e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027e6:	780b      	ldrb	r3, [r1, #0]
 80027e8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80027ee:	2b20      	cmp	r3, #32
{
 80027f0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80027f2:	d012      	beq.n	800281a <USBD_StdDevReq+0x36>
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d010      	beq.n	800281a <USBD_StdDevReq+0x36>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d151      	bne.n	80028a0 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 80027fc:	784b      	ldrb	r3, [r1, #1]
 80027fe:	2b09      	cmp	r3, #9
 8002800:	d84e      	bhi.n	80028a0 <USBD_StdDevReq+0xbc>
 8002802:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002806:	00f7      	.short	0x00f7
 8002808:	004d0113 	.word	0x004d0113
 800280c:	004d010c 	.word	0x004d010c
 8002810:	00130090 	.word	0x00130090
 8002814:	00df004d 	.word	0x00df004d
 8002818:	00ac      	.short	0x00ac
      pdev->pClass->Setup(pdev, req);
 800281a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800281e:	4629      	mov	r1, r5
 8002820:	4620      	mov	r0, r4
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4798      	blx	r3
}
 8002826:	2000      	movs	r0, #0
 8002828:	b003      	add	sp, #12
 800282a:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800282c:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800282e:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 8002830:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002834:	0a0b      	lsrs	r3, r1, #8
 8002836:	3b01      	subs	r3, #1
 8002838:	2b06      	cmp	r3, #6
 800283a:	d831      	bhi.n	80028a0 <USBD_StdDevReq+0xbc>
 800283c:	e8df f003 	tbb	[pc, r3]
 8002840:	30231604 	.word	0x30231604
 8002844:	5130      	.short	0x5130
 8002846:	5b          	.byte	0x5b
 8002847:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002848:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800284c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800284e:	7c20      	ldrb	r0, [r4, #16]
 8002850:	f10d 0106 	add.w	r1, sp, #6
 8002854:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002856:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800285a:	2a00      	cmp	r2, #0
 800285c:	d05f      	beq.n	800291e <USBD_StdDevReq+0x13a>
 800285e:	88eb      	ldrh	r3, [r5, #6]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d153      	bne.n	800290c <USBD_StdDevReq+0x128>
        USBD_CtlSendStatus(pdev);
 8002864:	4620      	mov	r0, r4
 8002866:	f000 fa02 	bl	8002c6e <USBD_CtlSendStatus>
 800286a:	e7dc      	b.n	8002826 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800286c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800286e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002872:	b932      	cbnz	r2, 8002882 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002876:	f10d 0006 	add.w	r0, sp, #6
 800287a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800287c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800287e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8002880:	e7e9      	b.n	8002856 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	e7f7      	b.n	8002876 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8002886:	b2c9      	uxtb	r1, r1
 8002888:	2905      	cmp	r1, #5
 800288a:	d821      	bhi.n	80028d0 <USBD_StdDevReq+0xec>
 800288c:	e8df f001 	tbb	[pc, r1]
 8002890:	14100c03 	.word	0x14100c03
 8002894:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002896:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800289a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1d6      	bne.n	800284e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff ff94 	bl	80027ce <USBD_CtlError.constprop.0>
        break;
 80028a6:	e7be      	b.n	8002826 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80028a8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	e7f5      	b.n	800289c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80028b0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	e7f1      	b.n	800289c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80028b8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	e7ed      	b.n	800289c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80028c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	e7e9      	b.n	800289c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80028c8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	e7e5      	b.n	800289c <USBD_StdDevReq+0xb8>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80028d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0e2      	beq.n	80028a0 <USBD_StdDevReq+0xbc>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80028da:	f10d 0206 	add.w	r2, sp, #6
 80028de:	4798      	blx	r3
  if (err != 0U)
 80028e0:	e7b9      	b.n	8002856 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80028e2:	7c03      	ldrb	r3, [r0, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1db      	bne.n	80028a0 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80028e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80028ec:	f10d 0006 	add.w	r0, sp, #6
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	4798      	blx	r3
  if (err != 0U)
 80028f4:	e7af      	b.n	8002856 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80028f6:	7c03      	ldrb	r3, [r0, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1d1      	bne.n	80028a0 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80028fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002900:	f10d 0006 	add.w	r0, sp, #6
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002908:	2307      	movs	r3, #7
 800290a:	e7b8      	b.n	800287e <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800290c:	429a      	cmp	r2, r3
 800290e:	bf28      	it	cs
 8002910:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002912:	4601      	mov	r1, r0
 8002914:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002916:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800291a:	f000 f97e 	bl	8002c1a <USBD_CtlSendData>
    if (req->wLength == 0U)
 800291e:	88eb      	ldrh	r3, [r5, #6]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d180      	bne.n	8002826 <USBD_StdDevReq+0x42>
 8002924:	e79e      	b.n	8002864 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002926:	888b      	ldrh	r3, [r1, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1b9      	bne.n	80028a0 <USBD_StdDevReq+0xbc>
 800292c:	88cb      	ldrh	r3, [r1, #6]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1b6      	bne.n	80028a0 <USBD_StdDevReq+0xbc>
 8002932:	884d      	ldrh	r5, [r1, #2]
 8002934:	2d7f      	cmp	r5, #127	; 0x7f
 8002936:	d8b3      	bhi.n	80028a0 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002938:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800293c:	2b03      	cmp	r3, #3
 800293e:	d0af      	beq.n	80028a0 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002940:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8002942:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002946:	f000 fb2b 	bl	8002fa0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800294a:	4620      	mov	r0, r4
 800294c:	f000 f98f 	bl	8002c6e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002950:	b11d      	cbz	r5, 800295a <USBD_StdDevReq+0x176>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002952:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002954:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002958:	e765      	b.n	8002826 <USBD_StdDevReq+0x42>
 800295a:	2301      	movs	r3, #1
 800295c:	e7fa      	b.n	8002954 <USBD_StdDevReq+0x170>
  cfgidx = (uint8_t)(req->wValue);
 800295e:	7889      	ldrb	r1, [r1, #2]
 8002960:	4d38      	ldr	r5, [pc, #224]	; (8002a44 <USBD_StdDevReq+0x260>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002962:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002964:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002966:	d89b      	bhi.n	80028a0 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8002968:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800296c:	2b02      	cmp	r3, #2
 800296e:	d008      	beq.n	8002982 <USBD_StdDevReq+0x19e>
 8002970:	2b03      	cmp	r3, #3
 8002972:	d015      	beq.n	80029a0 <USBD_StdDevReq+0x1bc>
        USBD_CtlError(pdev, req);
 8002974:	f7ff ff2b 	bl	80027ce <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8002978:	4620      	mov	r0, r4
 800297a:	7829      	ldrb	r1, [r5, #0]
 800297c:	f7ff fe15 	bl	80025aa <USBD_ClrClassConfig>
        break;
 8002980:	e751      	b.n	8002826 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8002982:	2900      	cmp	r1, #0
 8002984:	f43f af6e 	beq.w	8002864 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8002988:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800298a:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800298c:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800298e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002992:	4620      	mov	r0, r4
 8002994:	f7ff fdfe 	bl	8002594 <USBD_SetClassConfig>
 8002998:	2802      	cmp	r0, #2
 800299a:	f47f af63 	bne.w	8002864 <USBD_StdDevReq+0x80>
 800299e:	e77f      	b.n	80028a0 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80029a0:	b931      	cbnz	r1, 80029b0 <USBD_StdDevReq+0x1cc>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80029a2:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80029a4:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80029a6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80029aa:	f7ff fdfe 	bl	80025aa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80029ae:	e759      	b.n	8002864 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80029b0:	6841      	ldr	r1, [r0, #4]
 80029b2:	2901      	cmp	r1, #1
 80029b4:	f43f af56 	beq.w	8002864 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80029b8:	b2c9      	uxtb	r1, r1
 80029ba:	f7ff fdf6 	bl	80025aa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80029be:	7829      	ldrb	r1, [r5, #0]
 80029c0:	6061      	str	r1, [r4, #4]
 80029c2:	e7e6      	b.n	8002992 <USBD_StdDevReq+0x1ae>
  if (req->wLength != 1U)
 80029c4:	88ca      	ldrh	r2, [r1, #6]
 80029c6:	2a01      	cmp	r2, #1
 80029c8:	f47f af6a 	bne.w	80028a0 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80029cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d80a      	bhi.n	80029ea <USBD_StdDevReq+0x206>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f43f af63 	beq.w	80028a0 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80029da:	4601      	mov	r1, r0
 80029dc:	2300      	movs	r3, #0
 80029de:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80029e2:	4620      	mov	r0, r4
 80029e4:	f000 f919 	bl	8002c1a <USBD_CtlSendData>
      break;
 80029e8:	e71d      	b.n	8002826 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	f47f af58 	bne.w	80028a0 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80029f0:	1d01      	adds	r1, r0, #4
 80029f2:	e7f6      	b.n	80029e2 <USBD_StdDevReq+0x1fe>
  switch (pdev->dev_state)
 80029f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80029f8:	3b01      	subs	r3, #1
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	f63f af50 	bhi.w	80028a0 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8002a00:	88cb      	ldrh	r3, [r1, #6]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	f47f af4c 	bne.w	80028a0 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8002a0c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8002a10:	b10b      	cbz	r3, 8002a16 <USBD_StdDevReq+0x232>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002a12:	2303      	movs	r3, #3
 8002a14:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002a16:	2202      	movs	r2, #2
 8002a18:	f104 010c 	add.w	r1, r4, #12
 8002a1c:	e7e1      	b.n	80029e2 <USBD_StdDevReq+0x1fe>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002a1e:	884b      	ldrh	r3, [r1, #2]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	f47f af00 	bne.w	8002826 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002a26:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8002a2a:	e71b      	b.n	8002864 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8002a2c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002a30:	3b01      	subs	r3, #1
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	f63f af34 	bhi.w	80028a0 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002a38:	884b      	ldrh	r3, [r1, #2]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	f47f aef3 	bne.w	8002826 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e7f0      	b.n	8002a26 <USBD_StdDevReq+0x242>
 8002a44:	200001fb 	.word	0x200001fb

08002a48 <USBD_StdItfReq>:
{
 8002a48:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a4a:	780b      	ldrb	r3, [r1, #0]
{
 8002a4c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a4e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a52:	2a40      	cmp	r2, #64	; 0x40
{
 8002a54:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a56:	d001      	beq.n	8002a5c <USBD_StdItfReq+0x14>
 8002a58:	065b      	lsls	r3, r3, #25
 8002a5a:	d415      	bmi.n	8002a88 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8002a5c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002a60:	3b01      	subs	r3, #1
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d810      	bhi.n	8002a88 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002a66:	792b      	ldrb	r3, [r5, #4]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d80d      	bhi.n	8002a88 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8002a6c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002a70:	4629      	mov	r1, r5
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4620      	mov	r0, r4
 8002a76:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8002a78:	88eb      	ldrh	r3, [r5, #6]
 8002a7a:	b91b      	cbnz	r3, 8002a84 <USBD_StdItfReq+0x3c>
 8002a7c:	b910      	cbnz	r0, 8002a84 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f000 f8f5 	bl	8002c6e <USBD_CtlSendStatus>
}
 8002a84:	2000      	movs	r0, #0
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7ff fea0 	bl	80027ce <USBD_CtlError.constprop.0>
          break;
 8002a8e:	e7f9      	b.n	8002a84 <USBD_StdItfReq+0x3c>

08002a90 <USBD_StdEPReq>:
{
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	780a      	ldrb	r2, [r1, #0]
 8002a94:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a96:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002a9a:	2a20      	cmp	r2, #32
{
 8002a9c:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002a9e:	d027      	beq.n	8002af0 <USBD_StdEPReq+0x60>
 8002aa0:	2a40      	cmp	r2, #64	; 0x40
 8002aa2:	d025      	beq.n	8002af0 <USBD_StdEPReq+0x60>
 8002aa4:	bb92      	cbnz	r2, 8002b0c <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8002aa6:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002aa8:	888d      	ldrh	r5, [r1, #4]
 8002aaa:	2a01      	cmp	r2, #1
 8002aac:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8002aae:	d03d      	beq.n	8002b2c <USBD_StdEPReq+0x9c>
 8002ab0:	2a03      	cmp	r2, #3
 8002ab2:	d025      	beq.n	8002b00 <USBD_StdEPReq+0x70>
 8002ab4:	bb52      	cbnz	r2, 8002b0c <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8002ab6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d04d      	beq.n	8002b5a <USBD_StdEPReq+0xca>
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d124      	bne.n	8002b0c <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 8002ac2:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002ac4:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8002ac8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002acc:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8002ad0:	d054      	beq.n	8002b7c <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	b1d3      	cbz	r3, 8002b0c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002ad6:	2314      	movs	r3, #20
 8002ad8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002adc:	fb05 3303 	mla	r3, r5, r3, r3
 8002ae0:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002ae2:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8002ae6:	d155      	bne.n	8002b94 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8002ae8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002aea:	2202      	movs	r2, #2
 8002aec:	4629      	mov	r1, r5
 8002aee:	e041      	b.n	8002b74 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8002af0:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4620      	mov	r0, r4
 8002af8:	6892      	ldr	r2, [r2, #8]
 8002afa:	4790      	blx	r2
}
 8002afc:	2000      	movs	r0, #0
 8002afe:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8002b00:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002b04:	2a02      	cmp	r2, #2
 8002b06:	d01f      	beq.n	8002b48 <USBD_StdEPReq+0xb8>
 8002b08:	2a03      	cmp	r2, #3
 8002b0a:	d003      	beq.n	8002b14 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff fe5e 	bl	80027ce <USBD_CtlError.constprop.0>
              break;
 8002b12:	e7f3      	b.n	8002afc <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002b14:	885a      	ldrh	r2, [r3, #2]
 8002b16:	b92a      	cbnz	r2, 8002b24 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8002b18:	064a      	lsls	r2, r1, #25
 8002b1a:	d003      	beq.n	8002b24 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002b1c:	88db      	ldrh	r3, [r3, #6]
 8002b1e:	b90b      	cbnz	r3, 8002b24 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8002b20:	f000 fa1a 	bl	8002f58 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8002b24:	4620      	mov	r0, r4
 8002b26:	f000 f8a2 	bl	8002c6e <USBD_CtlSendStatus>
              break;
 8002b2a:	e7e7      	b.n	8002afc <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8002b2c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002b30:	2a02      	cmp	r2, #2
 8002b32:	d009      	beq.n	8002b48 <USBD_StdEPReq+0xb8>
 8002b34:	2a03      	cmp	r2, #3
 8002b36:	d1e9      	bne.n	8002b0c <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002b38:	885b      	ldrh	r3, [r3, #2]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1de      	bne.n	8002afc <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8002b3e:	064d      	lsls	r5, r1, #25
 8002b40:	d0f0      	beq.n	8002b24 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8002b42:	f000 fa12 	bl	8002f6a <USBD_LL_ClearStallEP>
 8002b46:	e7ed      	b.n	8002b24 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002b48:	064b      	lsls	r3, r1, #25
 8002b4a:	d0df      	beq.n	8002b0c <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8002b4c:	f000 fa04 	bl	8002f58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	4620      	mov	r0, r4
 8002b54:	f000 fa00 	bl	8002f58 <USBD_LL_StallEP>
 8002b58:	e7d0      	b.n	8002afc <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002b5a:	064a      	lsls	r2, r1, #25
 8002b5c:	d1d6      	bne.n	8002b0c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002b5e:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8002b60:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002b64:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002b68:	bf4c      	ite	mi
 8002b6a:	f100 0114 	addmi.w	r1, r0, #20
 8002b6e:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8002b72:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002b74:	4620      	mov	r0, r4
 8002b76:	f000 f850 	bl	8002c1a <USBD_CtlSendData>
              break;
 8002b7a:	e7bf      	b.n	8002afc <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8002b7c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0c3      	beq.n	8002b0c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002b84:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8002b86:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002b8a:	fb03 0505 	mla	r5, r3, r5, r0
 8002b8e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8002b92:	e7a6      	b.n	8002ae2 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8002b94:	4620      	mov	r0, r4
 8002b96:	f000 f9f1 	bl	8002f7c <USBD_LL_IsStallEP>
 8002b9a:	b108      	cbz	r0, 8002ba0 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e7a3      	b.n	8002ae8 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8002ba0:	6028      	str	r0, [r5, #0]
 8002ba2:	e7a2      	b.n	8002aea <USBD_StdEPReq+0x5a>

08002ba4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8002ba4:	780b      	ldrb	r3, [r1, #0]
 8002ba6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8002ba8:	784b      	ldrb	r3, [r1, #1]
 8002baa:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8002bac:	78ca      	ldrb	r2, [r1, #3]
 8002bae:	788b      	ldrb	r3, [r1, #2]
 8002bb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bb4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8002bb6:	794a      	ldrb	r2, [r1, #5]
 8002bb8:	790b      	ldrb	r3, [r1, #4]
 8002bba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bbe:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8002bc0:	79ca      	ldrb	r2, [r1, #7]
 8002bc2:	798b      	ldrb	r3, [r1, #6]
 8002bc4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002bc8:	80c3      	strh	r3, [r0, #6]
}
 8002bca:	4770      	bx	lr

08002bcc <USBD_CtlError>:
{
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	f000 f9c1 	bl	8002f58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002bd6:	4620      	mov	r0, r4
}
 8002bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002bdc:	2100      	movs	r1, #0
 8002bde:	f000 b9bb 	b.w	8002f58 <USBD_LL_StallEP>

08002be2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002be2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8002be4:	b188      	cbz	r0, 8002c0a <USBD_GetString+0x28>
 8002be6:	2400      	movs	r4, #0
 8002be8:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8002bea:	4623      	mov	r3, r4
 8002bec:	3401      	adds	r4, #1
 8002bee:	5d05      	ldrb	r5, [r0, r4]
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	d1fa      	bne.n	8002bea <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8002bfc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	704b      	strb	r3, [r1, #1]
 8002c02:	2302      	movs	r3, #2
    while (*desc != '\0')
 8002c04:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8002c08:	b904      	cbnz	r4, 8002c0c <USBD_GetString+0x2a>
}
 8002c0a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	54cc      	strb	r4, [r1, r3]
 8002c10:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8002c12:	3302      	adds	r3, #2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	548d      	strb	r5, [r1, r2]
 8002c18:	e7f4      	b.n	8002c04 <USBD_GetString+0x22>

08002c1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8002c1a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002c1c:	2202      	movs	r2, #2
{
 8002c1e:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8002c20:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8002c24:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002c28:	460a      	mov	r2, r1
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f000 f9c1 	bl	8002fb2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002c30:	2000      	movs	r0, #0
 8002c32:	bd10      	pop	{r4, pc}

08002c34 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8002c34:	b508      	push	{r3, lr}
 8002c36:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8002c38:	460a      	mov	r2, r1
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f000 f9b9 	bl	8002fb2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002c40:	2000      	movs	r0, #0
 8002c42:	bd08      	pop	{r3, pc}

08002c44 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8002c44:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002c46:	2203      	movs	r2, #3
{
 8002c48:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8002c4a:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002c4e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002c52:	460a      	mov	r2, r1
 8002c54:	2100      	movs	r1, #0
 8002c56:	f000 f9b5 	bl	8002fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8002c5e:	b508      	push	{r3, lr}
 8002c60:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002c62:	460a      	mov	r2, r1
 8002c64:	2100      	movs	r1, #0
 8002c66:	f000 f9ad 	bl	8002fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	bd08      	pop	{r3, pc}

08002c6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8002c6e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002c70:	2304      	movs	r3, #4
 8002c72:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8002c76:	2300      	movs	r3, #0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f000 f999 	bl	8002fb2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002c80:	2000      	movs	r0, #0
 8002c82:	bd08      	pop	{r3, pc}

08002c84 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8002c84:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002c86:	2305      	movs	r3, #5
 8002c88:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4619      	mov	r1, r3
 8002c92:	f000 f997 	bl	8002fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002c96:	2000      	movs	r0, #0
 8002c98:	bd08      	pop	{r3, pc}
	...

08002c9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	490e      	ldr	r1, [pc, #56]	; (8002cdc <MX_USB_DEVICE_Init+0x40>)
 8002ca2:	480f      	ldr	r0, [pc, #60]	; (8002ce0 <MX_USB_DEVICE_Init+0x44>)
 8002ca4:	f7ff fc49 	bl	800253a <USBD_Init>
 8002ca8:	b108      	cbz	r0, 8002cae <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8002caa:	f7fd faab 	bl	8000204 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8002cae:	490d      	ldr	r1, [pc, #52]	; (8002ce4 <MX_USB_DEVICE_Init+0x48>)
 8002cb0:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <MX_USB_DEVICE_Init+0x44>)
 8002cb2:	f7ff fc57 	bl	8002564 <USBD_RegisterClass>
 8002cb6:	b108      	cbz	r0, 8002cbc <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8002cb8:	f7fd faa4 	bl	8000204 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8002cbc:	490a      	ldr	r1, [pc, #40]	; (8002ce8 <MX_USB_DEVICE_Init+0x4c>)
 8002cbe:	4808      	ldr	r0, [pc, #32]	; (8002ce0 <MX_USB_DEVICE_Init+0x44>)
 8002cc0:	f7ff fc36 	bl	8002530 <USBD_DFU_RegisterMedia>
 8002cc4:	b108      	cbz	r0, 8002cca <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8002cc6:	f7fd fa9d 	bl	8000204 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8002cca:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <MX_USB_DEVICE_Init+0x44>)
 8002ccc:	f7ff fc51 	bl	8002572 <USBD_Start>
 8002cd0:	b118      	cbz	r0, 8002cda <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002cd6:	f7fd ba95 	b.w	8000204 <Error_Handler>
}
 8002cda:	bd08      	pop	{r3, pc}
 8002cdc:	20000070 	.word	0x20000070
 8002ce0:	200001fc 	.word	0x200001fc
 8002ce4:	2000000c 	.word	0x2000000c
 8002ce8:	200000c0 	.word	0x200000c0

08002cec <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8002cec:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002cee:	4801      	ldr	r0, [pc, #4]	; (8002cf4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002cf0:	800b      	strh	r3, [r1, #0]
}
 8002cf2:	4770      	bx	lr
 8002cf4:	2000008c 	.word	0x2000008c

08002cf8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8002cf8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002cfa:	4801      	ldr	r0, [pc, #4]	; (8002d00 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002cfc:	800b      	strh	r3, [r1, #0]
}
 8002cfe:	4770      	bx	lr
 8002d00:	200000a0 	.word	0x200000a0

08002d04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8002d04:	2300      	movs	r3, #0
 8002d06:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8002d08:	461e      	mov	r6, r3
 8002d0a:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8002d0c:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8002d0e:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8002d12:	bf34      	ite	cc
 8002d14:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8002d16:	3437      	addcs	r4, #55	; 0x37
 8002d18:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8002d1c:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2dc      	uxtb	r4, r3
 8002d24:	42a2      	cmp	r2, r4
    value = value << 4;
 8002d26:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8002d2a:	d8ef      	bhi.n	8002d0c <IntToUnicode+0x8>
  }
}
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d30 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8002d30:	231a      	movs	r3, #26
{
 8002d32:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8002d34:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <USBD_FS_SerialStrDescriptor+0x30>)
 8002d38:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8002d3c:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8002d40:	1880      	adds	r0, r0, r2
 8002d42:	d00a      	beq.n	8002d5a <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8002d44:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8002d48:	4906      	ldr	r1, [pc, #24]	; (8002d64 <USBD_FS_SerialStrDescriptor+0x34>)
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	f7ff ffda 	bl	8002d04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8002d50:	2204      	movs	r2, #4
 8002d52:	4620      	mov	r0, r4
 8002d54:	3110      	adds	r1, #16
 8002d56:	f7ff ffd5 	bl	8002d04 <IntToUnicode>
}
 8002d5a:	4803      	ldr	r0, [pc, #12]	; (8002d68 <USBD_FS_SerialStrDescriptor+0x38>)
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	bf00      	nop
 8002d60:	1ffff000 	.word	0x1ffff000
 8002d64:	200000a6 	.word	0x200000a6
 8002d68:	200000a4 	.word	0x200000a4

08002d6c <USBD_FS_ManufacturerStrDescriptor>:
{
 8002d6c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002d6e:	4c04      	ldr	r4, [pc, #16]	; (8002d80 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8002d70:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002d72:	4804      	ldr	r0, [pc, #16]	; (8002d84 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002d74:	4621      	mov	r1, r4
 8002d76:	f7ff ff34 	bl	8002be2 <USBD_GetString>
}
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	bd10      	pop	{r4, pc}
 8002d7e:	bf00      	nop
 8002d80:	200004c0 	.word	0x200004c0
 8002d84:	08003075 	.word	0x08003075

08002d88 <USBD_FS_ProductStrDescriptor>:
{
 8002d88:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002d8a:	4c04      	ldr	r4, [pc, #16]	; (8002d9c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8002d8c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002d8e:	4804      	ldr	r0, [pc, #16]	; (8002da0 <USBD_FS_ProductStrDescriptor+0x18>)
 8002d90:	4621      	mov	r1, r4
 8002d92:	f7ff ff26 	bl	8002be2 <USBD_GetString>
}
 8002d96:	4620      	mov	r0, r4
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200004c0 	.word	0x200004c0
 8002da0:	0800308a 	.word	0x0800308a

08002da4 <USBD_FS_ConfigStrDescriptor>:
{
 8002da4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002da6:	4c04      	ldr	r4, [pc, #16]	; (8002db8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8002da8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002daa:	4804      	ldr	r0, [pc, #16]	; (8002dbc <USBD_FS_ConfigStrDescriptor+0x18>)
 8002dac:	4621      	mov	r1, r4
 8002dae:	f7ff ff18 	bl	8002be2 <USBD_GetString>
}
 8002db2:	4620      	mov	r0, r4
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	bf00      	nop
 8002db8:	200004c0 	.word	0x200004c0
 8002dbc:	08003099 	.word	0x08003099

08002dc0 <USBD_FS_InterfaceStrDescriptor>:
{
 8002dc0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002dc2:	4c04      	ldr	r4, [pc, #16]	; (8002dd4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8002dc4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002dc6:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002dc8:	4621      	mov	r1, r4
 8002dca:	f7ff ff0a 	bl	8002be2 <USBD_GetString>
}
 8002dce:	4620      	mov	r0, r4
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200004c0 	.word	0x200004c0
 8002dd8:	080030a4 	.word	0x080030a4

08002ddc <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 8002ddc:	2000      	movs	r0, #0
 8002dde:	4770      	bx	lr

08002de0 <MEM_If_Erase_FS>:
{
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
  /* USER CODE END 2 */
}
 8002de0:	2000      	movs	r0, #0
 8002de2:	4770      	bx	lr

08002de4 <MEM_If_Write_FS>:
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8002de4:	2000      	movs	r0, #0
 8002de6:	4770      	bx	lr

08002de8 <MEM_If_Read_FS>:
{
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
  /* USER CODE END 4 */
}
 8002de8:	2000      	movs	r0, #0
 8002dea:	4770      	bx	lr

08002dec <MEM_If_GetStatus_FS>:

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8002dec:	2000      	movs	r0, #0
 8002dee:	4770      	bx	lr

08002df0 <MEM_If_DeInit_FS>:
 8002df0:	2000      	movs	r0, #0
 8002df2:	4770      	bx	lr

08002df4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8002df4:	2803      	cmp	r0, #3
 8002df6:	bf9a      	itte	ls
 8002df8:	4b01      	ldrls	r3, [pc, #4]	; (8002e00 <USBD_Get_USB_Status+0xc>)
 8002dfa:	5c18      	ldrbls	r0, [r3, r0]
{
 8002dfc:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002dfe:	4770      	bx	lr
 8002e00:	0800310f 	.word	0x0800310f

08002e04 <HAL_PCD_MspInit>:
{
 8002e04:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_PCD_MspInit+0x3c>)
 8002e08:	6802      	ldr	r2, [r0, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d115      	bne.n	8002e3a <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8002e0e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002e12:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002e14:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002e16:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e1a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002e1c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002e1e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002e20:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002e2a:	f7fd fab3 	bl	8000394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002e2e:	2014      	movs	r0, #20
}
 8002e30:	b003      	add	sp, #12
 8002e32:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002e36:	f7fd badf 	b.w	80003f8 <HAL_NVIC_EnableIRQ>
}
 8002e3a:	b003      	add	sp, #12
 8002e3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e40:	40005c00 	.word	0x40005c00

08002e44 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002e44:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8002e48:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8002e4c:	f7ff bbb4 	b.w	80025b8 <USBD_LL_SetupStage>

08002e50 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002e50:	2328      	movs	r3, #40	; 0x28
 8002e52:	fb03 0301 	mla	r3, r3, r1, r0
 8002e56:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8002e5a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002e5e:	f7ff bbd8 	b.w	8002612 <USBD_LL_DataOutStage>

08002e62 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002e62:	2328      	movs	r3, #40	; 0x28
 8002e64:	fb03 0301 	mla	r3, r3, r1, r0
 8002e68:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8002e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e6e:	f7ff bc0a 	b.w	8002686 <USBD_LL_DataInStage>

08002e72 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002e72:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8002e76:	f7ff bc9e 	b.w	80027b6 <USBD_LL_SOF>

08002e7a <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002e7a:	6883      	ldr	r3, [r0, #8]
{
 8002e7c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002e7e:	2b02      	cmp	r3, #2
{
 8002e80:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8002e82:	d001      	beq.n	8002e88 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8002e84:	f7fd f9be 	bl	8000204 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002e88:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	f7ff fc7c 	bl	800278a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002e92:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8002e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002e9a:	f7ff bc4f 	b.w	800273c <USBD_LL_Reset>
	...

08002ea0 <HAL_PCD_SuspendCallback>:
{
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002ea4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8002ea8:	f7ff fc72 	bl	8002790 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8002eac:	69a3      	ldr	r3, [r4, #24]
 8002eae:	b123      	cbz	r3, 8002eba <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002eb0:	4a02      	ldr	r2, [pc, #8]	; (8002ebc <HAL_PCD_SuspendCallback+0x1c>)
 8002eb2:	6913      	ldr	r3, [r2, #16]
 8002eb4:	f043 0306 	orr.w	r3, r3, #6
 8002eb8:	6113      	str	r3, [r2, #16]
}
 8002eba:	bd10      	pop	{r4, pc}
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002ec0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8002ec4:	f7ff bc6d 	b.w	80027a2 <USBD_LL_Resume>

08002ec8 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002ec8:	2308      	movs	r3, #8
{
 8002eca:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002ecc:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <USBD_LL_Init+0x4c>)
{
 8002ece:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8002ed0:	4811      	ldr	r0, [pc, #68]	; (8002f18 <USBD_LL_Init+0x50>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002ed2:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002eda:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002edc:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8002ee0:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002ee4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002ee8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002eea:	f7fd faa7 	bl	800043c <HAL_PCD_Init>
 8002eee:	b108      	cbz	r0, 8002ef4 <USBD_LL_Init+0x2c>
    Error_Handler( );
 8002ef0:	f7fd f988 	bl	8000204 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2318      	movs	r3, #24
 8002ef8:	4611      	mov	r1, r2
 8002efa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002efe:	f7fe f8d8 	bl	80010b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002f02:	2358      	movs	r3, #88	; 0x58
 8002f04:	2200      	movs	r2, #0
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8002f0c:	f7fe f8d1 	bl	80010b2 <HAL_PCDEx_PMAConfig>
}
 8002f10:	2000      	movs	r0, #0
 8002f12:	bd10      	pop	{r4, pc}
 8002f14:	40005c00 	.word	0x40005c00
 8002f18:	200006c0 	.word	0x200006c0

08002f1c <USBD_LL_Start>:
{
 8002f1c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8002f1e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f22:	f7fd fb04 	bl	800052e <HAL_PCD_Start>
}
 8002f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002f2a:	f7ff bf63 	b.w	8002df4 <USBD_Get_USB_Status>

08002f2e <USBD_LL_Stop>:
{
 8002f2e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 8002f30:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f34:	f7fd fb14 	bl	8000560 <HAL_PCD_Stop>
}
 8002f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002f3c:	f7ff bf5a 	b.w	8002df4 <USBD_Get_USB_Status>

08002f40 <USBD_LL_OpenEP>:
{
 8002f40:	b510      	push	{r4, lr}
 8002f42:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002f44:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8002f48:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	f7fd ffea 	bl	8000f24 <HAL_PCD_EP_Open>
}
 8002f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002f54:	f7ff bf4e 	b.w	8002df4 <USBD_Get_USB_Status>

08002f58 <USBD_LL_StallEP>:
{
 8002f58:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002f5a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f5e:	f7fe f843 	bl	8000fe8 <HAL_PCD_EP_SetStall>
}
 8002f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002f66:	f7ff bf45 	b.w	8002df4 <USBD_Get_USB_Status>

08002f6a <USBD_LL_ClearStallEP>:
{
 8002f6a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002f6c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002f70:	f7fe f86e 	bl	8001050 <HAL_PCD_EP_ClrStall>
}
 8002f74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002f78:	f7ff bf3c 	b.w	8002df4 <USBD_Get_USB_Status>

08002f7c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002f7c:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8002f7e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002f82:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002f86:	bf1b      	ittet	ne
 8002f88:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8002f8c:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002f90:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002f94:	185b      	addne	r3, r3, r1
 8002f96:	bf14      	ite	ne
 8002f98:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002f9a:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8002f9e:	4770      	bx	lr

08002fa0 <USBD_LL_SetUSBAddress>:
{
 8002fa0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002fa2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002fa6:	f7fd faf4 	bl	8000592 <HAL_PCD_SetAddress>
}
 8002faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002fae:	f7ff bf21 	b.w	8002df4 <USBD_Get_USB_Status>

08002fb2 <USBD_LL_Transmit>:
{
 8002fb2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002fb4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002fb8:	f7fd fffc 	bl	8000fb4 <HAL_PCD_EP_Transmit>
}
 8002fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002fc0:	f7ff bf18 	b.w	8002df4 <USBD_Get_USB_Status>

08002fc4 <USBD_LL_PrepareReceive>:
{
 8002fc4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002fc6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8002fca:	f7fd ffdc 	bl	8000f86 <HAL_PCD_EP_Receive>
}
 8002fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8002fd2:	f7ff bf0f 	b.w	8002df4 <USBD_Get_USB_Status>
	...

08002fd8 <USBD_static_malloc>:
}
 8002fd8:	4800      	ldr	r0, [pc, #0]	; (8002fdc <USBD_static_malloc+0x4>)
 8002fda:	4770      	bx	lr
 8002fdc:	200009ac 	.word	0x200009ac

08002fe0 <USBD_static_free>:
}
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_PCDEx_SetConnectionState>:
}
 8002fe2:	4770      	bx	lr

08002fe4 <__libc_init_array>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	4d0c      	ldr	r5, [pc, #48]	; (800301c <__libc_init_array+0x38>)
 8002fea:	4c0d      	ldr	r4, [pc, #52]	; (8003020 <__libc_init_array+0x3c>)
 8002fec:	1b64      	subs	r4, r4, r5
 8002fee:	10a4      	asrs	r4, r4, #2
 8002ff0:	42a6      	cmp	r6, r4
 8002ff2:	d109      	bne.n	8003008 <__libc_init_array+0x24>
 8002ff4:	f000 f822 	bl	800303c <_init>
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	4d0a      	ldr	r5, [pc, #40]	; (8003024 <__libc_init_array+0x40>)
 8002ffc:	4c0a      	ldr	r4, [pc, #40]	; (8003028 <__libc_init_array+0x44>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	42a6      	cmp	r6, r4
 8003004:	d105      	bne.n	8003012 <__libc_init_array+0x2e>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	f855 3b04 	ldr.w	r3, [r5], #4
 800300c:	4798      	blx	r3
 800300e:	3601      	adds	r6, #1
 8003010:	e7ee      	b.n	8002ff0 <__libc_init_array+0xc>
 8003012:	f855 3b04 	ldr.w	r3, [r5], #4
 8003016:	4798      	blx	r3
 8003018:	3601      	adds	r6, #1
 800301a:	e7f2      	b.n	8003002 <__libc_init_array+0x1e>
 800301c:	08003114 	.word	0x08003114
 8003020:	08003114 	.word	0x08003114
 8003024:	08003114 	.word	0x08003114
 8003028:	08003118 	.word	0x08003118

0800302c <memset>:
 800302c:	4603      	mov	r3, r0
 800302e:	4402      	add	r2, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	d100      	bne.n	8003036 <memset+0xa>
 8003034:	4770      	bx	lr
 8003036:	f803 1b01 	strb.w	r1, [r3], #1
 800303a:	e7f9      	b.n	8003030 <memset+0x4>

0800303c <_init>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr

08003048 <_fini>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr
