
boot_dfu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0801c000  0801c000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003120  0801c10c  0801c10c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0801f22c  0801f22c  0000422c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f2c0  0801f2c0  000050dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f2c0  0801f2c0  000042c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f2c8  0801f2c8  000050dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f2c8  0801f2c8  000042c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f2cc  0801f2cc  000042cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  0801f2d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cdc  200000dc  0801f3ac  000050dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000db8  0801f3ac  00005db8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1d6  00000000  00000000  00005105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322f  00000000  00000000  000132db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000058a5  00000000  00000000  0001650a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0001bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bac  00000000  00000000  0001c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001914c  00000000  00000000  0001d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6bf  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084a70  00000000  00000000  00045aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ca56f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000151c  00000000  00000000  000ca5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000cbad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0801c10c <__do_global_dtors_aux>:
 801c10c:	b510      	push	{r4, lr}
 801c10e:	4c05      	ldr	r4, [pc, #20]	@ (801c124 <__do_global_dtors_aux+0x18>)
 801c110:	7823      	ldrb	r3, [r4, #0]
 801c112:	b933      	cbnz	r3, 801c122 <__do_global_dtors_aux+0x16>
 801c114:	4b04      	ldr	r3, [pc, #16]	@ (801c128 <__do_global_dtors_aux+0x1c>)
 801c116:	b113      	cbz	r3, 801c11e <__do_global_dtors_aux+0x12>
 801c118:	4804      	ldr	r0, [pc, #16]	@ (801c12c <__do_global_dtors_aux+0x20>)
 801c11a:	f3af 8000 	nop.w
 801c11e:	2301      	movs	r3, #1
 801c120:	7023      	strb	r3, [r4, #0]
 801c122:	bd10      	pop	{r4, pc}
 801c124:	200000dc 	.word	0x200000dc
 801c128:	00000000 	.word	0x00000000
 801c12c:	0801f214 	.word	0x0801f214

0801c130 <frame_dummy>:
 801c130:	b508      	push	{r3, lr}
 801c132:	4b03      	ldr	r3, [pc, #12]	@ (801c140 <frame_dummy+0x10>)
 801c134:	b11b      	cbz	r3, 801c13e <frame_dummy+0xe>
 801c136:	4903      	ldr	r1, [pc, #12]	@ (801c144 <frame_dummy+0x14>)
 801c138:	4803      	ldr	r0, [pc, #12]	@ (801c148 <frame_dummy+0x18>)
 801c13a:	f3af 8000 	nop.w
 801c13e:	bd08      	pop	{r3, pc}
 801c140:	00000000 	.word	0x00000000
 801c144:	200000e0 	.word	0x200000e0
 801c148:	0801f214 	.word	0x0801f214

0801c14c <strlen>:
 801c14c:	4603      	mov	r3, r0
 801c14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c152:	2a00      	cmp	r2, #0
 801c154:	d1fb      	bne.n	801c14e <strlen+0x2>
 801c156:	1a18      	subs	r0, r3, r0
 801c158:	3801      	subs	r0, #1
 801c15a:	4770      	bx	lr

0801c15c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801c15c:	b530      	push	{r4, r5, lr}
 801c15e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801c160:	2214      	movs	r2, #20
 801c162:	2100      	movs	r1, #0
 801c164:	a80c      	add	r0, sp, #48	@ 0x30
 801c166:	f003 f829 	bl	801f1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801c16a:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801c16c:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801c16e:	2100      	movs	r1, #0
 801c170:	eb0d 0002 	add.w	r0, sp, r2
 801c174:	f003 f822 	bl	801f1bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801c178:	462a      	mov	r2, r5
 801c17a:	2100      	movs	r1, #0
 801c17c:	a801      	add	r0, sp, #4
 801c17e:	f003 f81d 	bl	801f1bc <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801c182:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801c184:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801c188:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801c18a:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801c18e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 801c192:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801c196:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801c198:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 801c19a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801c19c:	f001 f8ec 	bl	801d378 <HAL_RCC_OscConfig>
 801c1a0:	b108      	cbz	r0, 801c1a6 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801c1a2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801c1a4:	e7fe      	b.n	801c1a4 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801c1a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801c1a8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801c1ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801c1b0:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801c1b2:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801c1b6:	4621      	mov	r1, r4
 801c1b8:	a805      	add	r0, sp, #20
 801c1ba:	f001 fa9f 	bl	801d6fc <HAL_RCC_ClockConfig>
 801c1be:	b108      	cbz	r0, 801c1c4 <SystemClock_Config+0x68>
 801c1c0:	b672      	cpsid	i
  while (1)
 801c1c2:	e7fe      	b.n	801c1c2 <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 801c1c4:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801c1c6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801c1c8:	9501      	str	r5, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801c1ca:	f001 fb33 	bl	801d834 <HAL_RCCEx_PeriphCLKConfig>
 801c1ce:	b108      	cbz	r0, 801c1d4 <SystemClock_Config+0x78>
 801c1d0:	b672      	cpsid	i
  while (1)
 801c1d2:	e7fe      	b.n	801c1d2 <SystemClock_Config+0x76>
}
 801c1d4:	b015      	add	sp, #84	@ 0x54
 801c1d6:	bd30      	pop	{r4, r5, pc}

0801c1d8 <main>:
{
 801c1d8:	b570      	push	{r4, r5, r6, lr}
 801c1da:	b086      	sub	sp, #24
  HAL_Init();
 801c1dc:	f000 f8c4 	bl	801c368 <HAL_Init>
  SystemClock_Config();
 801c1e0:	f7ff ffbc 	bl	801c15c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c1e4:	2210      	movs	r2, #16
 801c1e6:	2100      	movs	r1, #0
 801c1e8:	a802      	add	r0, sp, #8
 801c1ea:	f002 ffe7 	bl	801f1bc <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801c1ee:	4b1b      	ldr	r3, [pc, #108]	@ (801c25c <main+0x84>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 801c1f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801c1f4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 801c1f6:	481a      	ldr	r0, [pc, #104]	@ (801c260 <main+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801c1f8:	f042 0220 	orr.w	r2, r2, #32
 801c1fc:	619a      	str	r2, [r3, #24]
 801c1fe:	699a      	ldr	r2, [r3, #24]
      now = uwTick;
 801c200:	4e18      	ldr	r6, [pc, #96]	@ (801c264 <main+0x8c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801c202:	f002 0220 	and.w	r2, r2, #32
 801c206:	9200      	str	r2, [sp, #0]
 801c208:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801c20a:	699a      	ldr	r2, [r3, #24]
          HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 801c20c:	4d14      	ldr	r5, [pc, #80]	@ (801c260 <main+0x88>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801c20e:	f042 0204 	orr.w	r2, r2, #4
 801c212:	619a      	str	r2, [r3, #24]
 801c214:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 801c216:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801c218:	f003 0304 	and.w	r3, r3, #4
 801c21c:	9301      	str	r3, [sp, #4]
 801c21e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 801c220:	f000 fa10 	bl	801c644 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c228:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c22a:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c22c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c230:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 801c232:	480b      	ldr	r0, [pc, #44]	@ (801c260 <main+0x88>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c234:	e9cd 1304 	strd	r1, r3, [sp, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 801c238:	a902      	add	r1, sp, #8
 801c23a:	f000 f92f 	bl	801c49c <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 801c23e:	f002 fe1d 	bl	801ee7c <MX_USB_DEVICE_Init>
  uint32_t now = 0, next_blink = 200;
 801c242:	23c8      	movs	r3, #200	@ 0xc8
      now = uwTick;
 801c244:	6834      	ldr	r4, [r6, #0]
      if (now >= next_blink) {
 801c246:	42a3      	cmp	r3, r4
 801c248:	d8fc      	bhi.n	801c244 <main+0x6c>
          HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 801c24a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c24e:	4628      	mov	r0, r5
 801c250:	f000 f9fd 	bl	801c64e <HAL_GPIO_TogglePin>
          next_blink = now + 200;
 801c254:	f104 03c8 	add.w	r3, r4, #200	@ 0xc8
 801c258:	e7f4      	b.n	801c244 <main+0x6c>
 801c25a:	bf00      	nop
 801c25c:	40021000 	.word	0x40021000
 801c260:	40010800 	.word	0x40010800
 801c264:	200000f8 	.word	0x200000f8

0801c268 <Error_Handler>:
 801c268:	b672      	cpsid	i
  while (1)
 801c26a:	e7fe      	b.n	801c26a <Error_Handler+0x2>

0801c26c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 801c26c:	4b0e      	ldr	r3, [pc, #56]	@ (801c2a8 <HAL_MspInit+0x3c>)
{
 801c26e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 801c270:	699a      	ldr	r2, [r3, #24]
 801c272:	f042 0201 	orr.w	r2, r2, #1
 801c276:	619a      	str	r2, [r3, #24]
 801c278:	699a      	ldr	r2, [r3, #24]
 801c27a:	f002 0201 	and.w	r2, r2, #1
 801c27e:	9200      	str	r2, [sp, #0]
 801c280:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801c282:	69da      	ldr	r2, [r3, #28]
 801c284:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 801c288:	61da      	str	r2, [r3, #28]
 801c28a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 801c28c:	4a07      	ldr	r2, [pc, #28]	@ (801c2ac <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 801c28e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c292:	9301      	str	r3, [sp, #4]
 801c294:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 801c296:	6853      	ldr	r3, [r2, #4]
 801c298:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 801c29c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801c2a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801c2a2:	b002      	add	sp, #8
 801c2a4:	4770      	bx	lr
 801c2a6:	bf00      	nop
 801c2a8:	40021000 	.word	0x40021000
 801c2ac:	40010000 	.word	0x40010000

0801c2b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801c2b0:	e7fe      	b.n	801c2b0 <NMI_Handler>

0801c2b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801c2b2:	e7fe      	b.n	801c2b2 <HardFault_Handler>

0801c2b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801c2b4:	e7fe      	b.n	801c2b4 <MemManage_Handler>

0801c2b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801c2b6:	e7fe      	b.n	801c2b6 <BusFault_Handler>

0801c2b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801c2b8:	e7fe      	b.n	801c2b8 <UsageFault_Handler>

0801c2ba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801c2ba:	4770      	bx	lr

0801c2bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 801c2bc:	4770      	bx	lr

0801c2be <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 801c2be:	4770      	bx	lr

0801c2c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801c2c0:	f000 b864 	b.w	801c38c <HAL_IncTick>

0801c2c4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 801c2c4:	4801      	ldr	r0, [pc, #4]	@ (801c2cc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 801c2c6:	f000 ba73 	b.w	801c7b0 <HAL_PCD_IRQHandler>
 801c2ca:	bf00      	nop
 801c2cc:	20000ae0 	.word	0x20000ae0

0801c2d0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801c2d0:	4770      	bx	lr
	...

0801c2d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801c2d4:	480c      	ldr	r0, [pc, #48]	@ (801c308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801c2d6:	490d      	ldr	r1, [pc, #52]	@ (801c30c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801c2d8:	4a0d      	ldr	r2, [pc, #52]	@ (801c310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801c2da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801c2dc:	e002      	b.n	801c2e4 <LoopCopyDataInit>

0801c2de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801c2de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801c2e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801c2e2:	3304      	adds	r3, #4

0801c2e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801c2e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801c2e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801c2e8:	d3f9      	bcc.n	801c2de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801c2ea:	4a0a      	ldr	r2, [pc, #40]	@ (801c314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801c2ec:	4c0a      	ldr	r4, [pc, #40]	@ (801c318 <LoopFillZerobss+0x22>)
  movs r3, #0
 801c2ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 801c2f0:	e001      	b.n	801c2f6 <LoopFillZerobss>

0801c2f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801c2f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801c2f4:	3204      	adds	r2, #4

0801c2f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801c2f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801c2f8:	d3fb      	bcc.n	801c2f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801c2fa:	f7ff ffe9 	bl	801c2d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801c2fe:	f002 ff65 	bl	801f1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801c302:	f7ff ff69 	bl	801c1d8 <main>
  bx lr
 801c306:	4770      	bx	lr
  ldr r0, =_sdata
 801c308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801c30c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 801c310:	0801f2d0 	.word	0x0801f2d0
  ldr r2, =_sbss
 801c314:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 801c318:	20000db8 	.word	0x20000db8

0801c31c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801c31c:	e7fe      	b.n	801c31c <ADC1_2_IRQHandler>
	...

0801c320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801c320:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801c322:	4b0e      	ldr	r3, [pc, #56]	@ (801c35c <HAL_InitTick+0x3c>)
{
 801c324:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801c326:	781a      	ldrb	r2, [r3, #0]
 801c328:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c32c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c330:	4a0b      	ldr	r2, [pc, #44]	@ (801c360 <HAL_InitTick+0x40>)
 801c332:	6810      	ldr	r0, [r2, #0]
 801c334:	fbb0 f0f3 	udiv	r0, r0, r3
 801c338:	f000 f89c 	bl	801c474 <HAL_SYSTICK_Config>
 801c33c:	4604      	mov	r4, r0
 801c33e:	b958      	cbnz	r0, 801c358 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801c340:	2d0f      	cmp	r5, #15
 801c342:	d809      	bhi.n	801c358 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801c344:	4602      	mov	r2, r0
 801c346:	4629      	mov	r1, r5
 801c348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c34c:	f000 f854 	bl	801c3f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801c350:	4620      	mov	r0, r4
 801c352:	4b04      	ldr	r3, [pc, #16]	@ (801c364 <HAL_InitTick+0x44>)
 801c354:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 801c356:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801c358:	2001      	movs	r0, #1
 801c35a:	e7fc      	b.n	801c356 <HAL_InitTick+0x36>
 801c35c:	20000004 	.word	0x20000004
 801c360:	20000000 	.word	0x20000000
 801c364:	20000008 	.word	0x20000008

0801c368 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801c368:	4a07      	ldr	r2, [pc, #28]	@ (801c388 <HAL_Init+0x20>)
{
 801c36a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801c36c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801c36e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801c370:	f043 0310 	orr.w	r3, r3, #16
 801c374:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801c376:	f000 f82d 	bl	801c3d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 801c37a:	200f      	movs	r0, #15
 801c37c:	f7ff ffd0 	bl	801c320 <HAL_InitTick>
  HAL_MspInit();
 801c380:	f7ff ff74 	bl	801c26c <HAL_MspInit>
}
 801c384:	2000      	movs	r0, #0
 801c386:	bd08      	pop	{r3, pc}
 801c388:	40022000 	.word	0x40022000

0801c38c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 801c38c:	4a03      	ldr	r2, [pc, #12]	@ (801c39c <HAL_IncTick+0x10>)
 801c38e:	4b04      	ldr	r3, [pc, #16]	@ (801c3a0 <HAL_IncTick+0x14>)
 801c390:	6811      	ldr	r1, [r2, #0]
 801c392:	781b      	ldrb	r3, [r3, #0]
 801c394:	440b      	add	r3, r1
 801c396:	6013      	str	r3, [r2, #0]
}
 801c398:	4770      	bx	lr
 801c39a:	bf00      	nop
 801c39c:	200000f8 	.word	0x200000f8
 801c3a0:	20000004 	.word	0x20000004

0801c3a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801c3a4:	4b01      	ldr	r3, [pc, #4]	@ (801c3ac <HAL_GetTick+0x8>)
 801c3a6:	6818      	ldr	r0, [r3, #0]
}
 801c3a8:	4770      	bx	lr
 801c3aa:	bf00      	nop
 801c3ac:	200000f8 	.word	0x200000f8

0801c3b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801c3b0:	b538      	push	{r3, r4, r5, lr}
 801c3b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801c3b4:	f7ff fff6 	bl	801c3a4 <HAL_GetTick>
 801c3b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801c3ba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 801c3bc:	bf1e      	ittt	ne
 801c3be:	4b04      	ldrne	r3, [pc, #16]	@ (801c3d0 <HAL_Delay+0x20>)
 801c3c0:	781b      	ldrbne	r3, [r3, #0]
 801c3c2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801c3c4:	f7ff ffee 	bl	801c3a4 <HAL_GetTick>
 801c3c8:	1b43      	subs	r3, r0, r5
 801c3ca:	42a3      	cmp	r3, r4
 801c3cc:	d3fa      	bcc.n	801c3c4 <HAL_Delay+0x14>
  {
  }
}
 801c3ce:	bd38      	pop	{r3, r4, r5, pc}
 801c3d0:	20000004 	.word	0x20000004

0801c3d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c3d4:	4907      	ldr	r1, [pc, #28]	@ (801c3f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 801c3d6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c3d8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 801c3da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801c3de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 801c3e2:	0412      	lsls	r2, r2, #16
 801c3e4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801c3e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801c3e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801c3ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 801c3f0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 801c3f2:	4770      	bx	lr
 801c3f4:	e000ed00 	.word	0xe000ed00

0801c3f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801c3f8:	4b15      	ldr	r3, [pc, #84]	@ (801c450 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801c3fa:	b530      	push	{r4, r5, lr}
 801c3fc:	68dc      	ldr	r4, [r3, #12]
 801c3fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c402:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c406:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c408:	2b04      	cmp	r3, #4
 801c40a:	bf28      	it	cs
 801c40c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c40e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c410:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c414:	bf94      	ite	ls
 801c416:	2400      	movls	r4, #0
 801c418:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c41a:	fa05 f303 	lsl.w	r3, r5, r3
 801c41e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801c422:	40a5      	lsls	r5, r4
 801c424:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c428:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 801c42a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c42c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c430:	bfac      	ite	ge
 801c432:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c436:	4a07      	ldrlt	r2, [pc, #28]	@ (801c454 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c438:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c43c:	b2db      	uxtb	r3, r3
 801c43e:	bfab      	itete	ge
 801c440:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c444:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c448:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c44c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 801c44e:	bd30      	pop	{r4, r5, pc}
 801c450:	e000ed00 	.word	0xe000ed00
 801c454:	e000ed14 	.word	0xe000ed14

0801c458 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 801c458:	2800      	cmp	r0, #0
 801c45a:	db07      	blt.n	801c46c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c45c:	2301      	movs	r3, #1
 801c45e:	0941      	lsrs	r1, r0, #5
 801c460:	4a03      	ldr	r2, [pc, #12]	@ (801c470 <HAL_NVIC_EnableIRQ+0x18>)
 801c462:	f000 001f 	and.w	r0, r0, #31
 801c466:	4083      	lsls	r3, r0
 801c468:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 801c46c:	4770      	bx	lr
 801c46e:	bf00      	nop
 801c470:	e000e100 	.word	0xe000e100

0801c474 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801c474:	3801      	subs	r0, #1
 801c476:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 801c47a:	d20b      	bcs.n	801c494 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c47c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c480:	21f0      	movs	r1, #240	@ 0xf0
 801c482:	4a05      	ldr	r2, [pc, #20]	@ (801c498 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c484:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c486:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c48a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c48c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c48e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c490:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801c492:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 801c494:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 801c496:	4770      	bx	lr
 801c498:	e000ed00 	.word	0xe000ed00

0801c49c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 801c4a0:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 801c4a2:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 801c4a6:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 801c4a8:	f8df c184 	ldr.w	ip, [pc, #388]	@ 801c630 <HAL_GPIO_Init+0x194>
 801c4ac:	4b61      	ldr	r3, [pc, #388]	@ (801c634 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 801c4ae:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801c4b2:	680a      	ldr	r2, [r1, #0]
 801c4b4:	fa32 f506 	lsrs.w	r5, r2, r6
 801c4b8:	d102      	bne.n	801c4c0 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 801c4ba:	b003      	add	sp, #12
 801c4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 801c4c0:	2501      	movs	r5, #1
 801c4c2:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801c4c6:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 801c4ca:	ea37 0202 	bics.w	r2, r7, r2
 801c4ce:	d176      	bne.n	801c5be <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 801c4d0:	684a      	ldr	r2, [r1, #4]
 801c4d2:	2a03      	cmp	r2, #3
 801c4d4:	d807      	bhi.n	801c4e6 <HAL_GPIO_Init+0x4a>
 801c4d6:	3a01      	subs	r2, #1
 801c4d8:	2a02      	cmp	r2, #2
 801c4da:	f200 8083 	bhi.w	801c5e4 <HAL_GPIO_Init+0x148>
 801c4de:	e8df f002 	tbb	[pc, r2]
 801c4e2:	9691      	.short	0x9691
 801c4e4:	9c          	.byte	0x9c
 801c4e5:	00          	.byte	0x00
 801c4e6:	2a12      	cmp	r2, #18
 801c4e8:	f000 8094 	beq.w	801c614 <HAL_GPIO_Init+0x178>
 801c4ec:	d869      	bhi.n	801c5c2 <HAL_GPIO_Init+0x126>
 801c4ee:	2a11      	cmp	r2, #17
 801c4f0:	f000 808a 	beq.w	801c608 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 801c4f4:	2dff      	cmp	r5, #255	@ 0xff
 801c4f6:	bf94      	ite	ls
 801c4f8:	4681      	movls	r9, r0
 801c4fa:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 801c4fc:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 801c500:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 801c504:	bf88      	it	hi
 801c506:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 801c508:	fa0e fa02 	lsl.w	sl, lr, r2
 801c50c:	ea27 070a 	bic.w	r7, r7, sl
 801c510:	fa04 f202 	lsl.w	r2, r4, r2
 801c514:	4317      	orrs	r7, r2
 801c516:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801c51a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 801c51e:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 801c522:	d04c      	beq.n	801c5be <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 801c524:	f8dc 2018 	ldr.w	r2, [ip, #24]
 801c528:	f026 0703 	bic.w	r7, r6, #3
 801c52c:	f042 0201 	orr.w	r2, r2, #1
 801c530:	f8cc 2018 	str.w	r2, [ip, #24]
 801c534:	f8dc 2018 	ldr.w	r2, [ip, #24]
 801c538:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 801c53c:	f002 0201 	and.w	r2, r2, #1
 801c540:	9201      	str	r2, [sp, #4]
 801c542:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 801c546:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 801c54a:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 801c54c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 801c550:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 801c552:	fa0e fb0a 	lsl.w	fp, lr, sl
 801c556:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 801c55a:	4a37      	ldr	r2, [pc, #220]	@ (801c638 <HAL_GPIO_Init+0x19c>)
 801c55c:	4290      	cmp	r0, r2
 801c55e:	d060      	beq.n	801c622 <HAL_GPIO_Init+0x186>
 801c560:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801c564:	4290      	cmp	r0, r2
 801c566:	d05e      	beq.n	801c626 <HAL_GPIO_Init+0x18a>
 801c568:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801c56c:	4290      	cmp	r0, r2
 801c56e:	d05c      	beq.n	801c62a <HAL_GPIO_Init+0x18e>
 801c570:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801c574:	4290      	cmp	r0, r2
 801c576:	bf14      	ite	ne
 801c578:	2204      	movne	r2, #4
 801c57a:	2203      	moveq	r2, #3
 801c57c:	fa02 f20a 	lsl.w	r2, r2, sl
 801c580:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 801c584:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 801c586:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801c588:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 801c58c:	bf14      	ite	ne
 801c58e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 801c590:	43aa      	biceq	r2, r5
 801c592:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 801c594:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801c596:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 801c59a:	bf14      	ite	ne
 801c59c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 801c59e:	43aa      	biceq	r2, r5
 801c5a0:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 801c5a2:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801c5a4:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 801c5a8:	bf14      	ite	ne
 801c5aa:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 801c5ac:	43aa      	biceq	r2, r5
 801c5ae:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 801c5b0:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801c5b2:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 801c5b6:	bf14      	ite	ne
 801c5b8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 801c5ba:	43aa      	biceq	r2, r5
 801c5bc:	601a      	str	r2, [r3, #0]
	position++;
 801c5be:	3601      	adds	r6, #1
 801c5c0:	e777      	b.n	801c4b2 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 801c5c2:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 801c63c <HAL_GPIO_Init+0x1a0>
 801c5c6:	454a      	cmp	r2, r9
 801c5c8:	d00c      	beq.n	801c5e4 <HAL_GPIO_Init+0x148>
 801c5ca:	d814      	bhi.n	801c5f6 <HAL_GPIO_Init+0x15a>
 801c5cc:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 801c5d0:	454a      	cmp	r2, r9
 801c5d2:	d007      	beq.n	801c5e4 <HAL_GPIO_Init+0x148>
 801c5d4:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 801c5d8:	454a      	cmp	r2, r9
 801c5da:	d003      	beq.n	801c5e4 <HAL_GPIO_Init+0x148>
 801c5dc:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 801c5e0:	454a      	cmp	r2, r9
 801c5e2:	d187      	bne.n	801c4f4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 801c5e4:	688a      	ldr	r2, [r1, #8]
 801c5e6:	b1d2      	cbz	r2, 801c61e <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 801c5e8:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 801c5ea:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 801c5ee:	bf0c      	ite	eq
 801c5f0:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 801c5f2:	6147      	strne	r7, [r0, #20]
 801c5f4:	e77e      	b.n	801c4f4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 801c5f6:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 801c640 <HAL_GPIO_Init+0x1a4>
 801c5fa:	454a      	cmp	r2, r9
 801c5fc:	d0f2      	beq.n	801c5e4 <HAL_GPIO_Init+0x148>
 801c5fe:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 801c602:	e7ed      	b.n	801c5e0 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 801c604:	68cc      	ldr	r4, [r1, #12]
          break;
 801c606:	e775      	b.n	801c4f4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 801c608:	68cc      	ldr	r4, [r1, #12]
 801c60a:	3404      	adds	r4, #4
          break;
 801c60c:	e772      	b.n	801c4f4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 801c60e:	68cc      	ldr	r4, [r1, #12]
 801c610:	3408      	adds	r4, #8
          break;
 801c612:	e76f      	b.n	801c4f4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 801c614:	68cc      	ldr	r4, [r1, #12]
 801c616:	340c      	adds	r4, #12
          break;
 801c618:	e76c      	b.n	801c4f4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 801c61a:	2400      	movs	r4, #0
 801c61c:	e76a      	b.n	801c4f4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 801c61e:	2404      	movs	r4, #4
 801c620:	e768      	b.n	801c4f4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 801c622:	2200      	movs	r2, #0
 801c624:	e7aa      	b.n	801c57c <HAL_GPIO_Init+0xe0>
 801c626:	2201      	movs	r2, #1
 801c628:	e7a8      	b.n	801c57c <HAL_GPIO_Init+0xe0>
 801c62a:	2202      	movs	r2, #2
 801c62c:	e7a6      	b.n	801c57c <HAL_GPIO_Init+0xe0>
 801c62e:	bf00      	nop
 801c630:	40021000 	.word	0x40021000
 801c634:	40010400 	.word	0x40010400
 801c638:	40010800 	.word	0x40010800
 801c63c:	10220000 	.word	0x10220000
 801c640:	10310000 	.word	0x10310000

0801c644 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c644:	b10a      	cbz	r2, 801c64a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 801c646:	6101      	str	r1, [r0, #16]
  }
}
 801c648:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 801c64a:	0409      	lsls	r1, r1, #16
 801c64c:	e7fb      	b.n	801c646 <HAL_GPIO_WritePin+0x2>

0801c64e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801c64e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801c650:	ea01 0203 	and.w	r2, r1, r3
 801c654:	ea21 0103 	bic.w	r1, r1, r3
 801c658:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c65c:	6101      	str	r1, [r0, #16]
}
 801c65e:	4770      	bx	lr

0801c660 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801c662:	4604      	mov	r4, r0
 801c664:	b1e0      	cbz	r0, 801c6a0 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801c666:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 801c66a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801c66e:	b91b      	cbnz	r3, 801c678 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801c670:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801c674:	f002 fcb4 	bl	801efe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801c678:	2303      	movs	r3, #3
 801c67a:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 801c67e:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801c680:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 801c682:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 801c684:	f855 0b04 	ldr.w	r0, [r5], #4
 801c688:	f001 f95e 	bl	801d948 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801c68c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801c690:	6820      	ldr	r0, [r4, #0]
 801c692:	f001 f949 	bl	801d928 <USB_CoreInit>
 801c696:	4601      	mov	r1, r0
 801c698:	b128      	cbz	r0, 801c6a6 <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801c69a:	2302      	movs	r3, #2
 801c69c:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 801c6a0:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 801c6a6:	6820      	ldr	r0, [r4, #0]
 801c6a8:	f001 f958 	bl	801d95c <USB_SetCurrentMode>
 801c6ac:	2800      	cmp	r0, #0
 801c6ae:	d1f4      	bne.n	801c69a <HAL_PCD_Init+0x3a>
 801c6b0:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 801c6b2:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801c6b4:	7926      	ldrb	r6, [r4, #4]
 801c6b6:	f104 0310 	add.w	r3, r4, #16
 801c6ba:	b2c1      	uxtb	r1, r0
 801c6bc:	428e      	cmp	r6, r1
 801c6be:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 801c6c2:	d818      	bhi.n	801c6f6 <HAL_PCD_Init+0x96>
 801c6c4:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 801c6c6:	460a      	mov	r2, r1
 801c6c8:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 801c6cc:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801c6ce:	4286      	cmp	r6, r0
 801c6d0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 801c6d4:	d81b      	bhi.n	801c70e <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801c6d6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801c6da:	6820      	ldr	r0, [r4, #0]
 801c6dc:	f001 f940 	bl	801d960 <USB_DevInit>
 801c6e0:	4605      	mov	r5, r0
 801c6e2:	2800      	cmp	r0, #0
 801c6e4:	d1d9      	bne.n	801c69a <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 801c6e6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 801c6e8:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 801c6ea:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 801c6ec:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 801c6f0:	f001 fb19 	bl	801dd26 <USB_DevDisconnect>
  return HAL_OK;
 801c6f4:	e7d5      	b.n	801c6a2 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 801c6f6:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 801c6fa:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 801c6fe:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801c702:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 801c706:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801c70a:	3001      	adds	r0, #1
 801c70c:	e7d5      	b.n	801c6ba <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801c70e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 801c712:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 801c716:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801c71a:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801c71e:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801c722:	3101      	adds	r1, #1
 801c724:	e7d2      	b.n	801c6cc <HAL_PCD_Init+0x6c>

0801c726 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801c726:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 801c728:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 801c72c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 801c72e:	2b01      	cmp	r3, #1
 801c730:	d010      	beq.n	801c754 <HAL_PCD_Start+0x2e>
 801c732:	2501      	movs	r5, #1
 801c734:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 801c738:	6800      	ldr	r0, [r0, #0]
 801c73a:	f001 f8fc 	bl	801d936 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 801c73e:	4629      	mov	r1, r5
 801c740:	4620      	mov	r0, r4
 801c742:	f002 fd3a 	bl	801f1ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 801c746:	6820      	ldr	r0, [r4, #0]
 801c748:	f001 faeb 	bl	801dd22 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801c74c:	2000      	movs	r0, #0
 801c74e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 801c752:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 801c754:	2002      	movs	r0, #2
 801c756:	e7fc      	b.n	801c752 <HAL_PCD_Start+0x2c>

0801c758 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 801c758:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 801c75a:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 801c75e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 801c760:	2b01      	cmp	r3, #1
 801c762:	d010      	beq.n	801c786 <HAL_PCD_Stop+0x2e>
 801c764:	2301      	movs	r3, #1
 801c766:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 801c76a:	6800      	ldr	r0, [r0, #0]
 801c76c:	f001 f8ec 	bl	801d948 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 801c770:	2100      	movs	r1, #0
 801c772:	4620      	mov	r0, r4
 801c774:	f002 fd21 	bl	801f1ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 801c778:	6820      	ldr	r0, [r4, #0]
 801c77a:	f001 fad4 	bl	801dd26 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 801c77e:	2000      	movs	r0, #0
 801c780:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 801c784:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 801c786:	2002      	movs	r0, #2
 801c788:	e7fc      	b.n	801c784 <HAL_PCD_Stop+0x2c>

0801c78a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801c78a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 801c78c:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 801c790:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 801c792:	2a01      	cmp	r2, #1
 801c794:	d00a      	beq.n	801c7ac <HAL_PCD_SetAddress+0x22>
 801c796:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 801c798:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 801c79a:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801c79e:	6800      	ldr	r0, [r0, #0]
 801c7a0:	f001 fab9 	bl	801dd16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801c7a4:	2000      	movs	r0, #0
 801c7a6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 801c7aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 801c7ac:	2002      	movs	r0, #2
 801c7ae:	e7fc      	b.n	801c7aa <HAL_PCD_SetAddress+0x20>

0801c7b0 <HAL_PCD_IRQHandler>:
{
 801c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b4:	4604      	mov	r4, r0
 801c7b6:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801c7b8:	6800      	ldr	r0, [r0, #0]
 801c7ba:	f001 fab6 	bl	801dd2a <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801c7be:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 801c7c2:	f000 844f 	beq.w	801d064 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 801c7c6:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801c7c8:	4ec6      	ldr	r6, [pc, #792]	@ (801cae4 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801c7ca:	6820      	ldr	r0, [r4, #0]
 801c7cc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 801c7d0:	041f      	lsls	r7, r3, #16
 801c7d2:	d402      	bmi.n	801c7da <HAL_PCD_IRQHandler+0x2a>
}
 801c7d4:	b005      	add	sp, #20
 801c7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 801c7da:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 801c7de:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 801c7e2:	b299      	uxth	r1, r3
    if (epindex == 0U)
 801c7e4:	f040 80c0 	bne.w	801c968 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 801c7e8:	f011 0110 	ands.w	r1, r1, #16
 801c7ec:	d126      	bne.n	801c83c <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801c7ee:	8803      	ldrh	r3, [r0, #0]
 801c7f0:	b29b      	uxth	r3, r3
 801c7f2:	4033      	ands	r3, r6
 801c7f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801c7f8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801c7fa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 801c7fe:	7c22      	ldrb	r2, [r4, #16]
 801c800:	b29b      	uxth	r3, r3
 801c802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c806:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c80a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 801c80e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801c810:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 801c814:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801c816:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801c818:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 801c81a:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801c81c:	f002 fc0f 	bl	801f03e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801c820:	7b63      	ldrb	r3, [r4, #13]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d0d1      	beq.n	801c7ca <HAL_PCD_IRQHandler+0x1a>
 801c826:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801c828:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801c82a:	2a00      	cmp	r2, #0
 801c82c:	d1cd      	bne.n	801c7ca <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801c82e:	7b63      	ldrb	r3, [r4, #13]
 801c830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c834:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 801c838:	7362      	strb	r2, [r4, #13]
 801c83a:	e7c6      	b.n	801c7ca <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801c83c:	8807      	ldrh	r7, [r0, #0]
 801c83e:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 801c840:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 801c844:	d021      	beq.n	801c88a <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801c846:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 801c84a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 801c84e:	b29b      	uxth	r3, r3
 801c850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c854:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c858:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801c85c:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 801c860:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801c864:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801c868:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 801c86c:	f001 fca8 	bl	801e1c0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801c870:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 801c872:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801c874:	8813      	ldrh	r3, [r2, #0]
 801c876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c87a:	051b      	lsls	r3, r3, #20
 801c87c:	0d1b      	lsrs	r3, r3, #20
 801c87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c882:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 801c884:	f002 fbcc 	bl	801f020 <HAL_PCD_SetupStageCallback>
 801c888:	e79f      	b.n	801c7ca <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801c88a:	0419      	lsls	r1, r3, #16
 801c88c:	d59d      	bpl.n	801c7ca <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801c88e:	8803      	ldrh	r3, [r0, #0]
 801c890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c894:	051b      	lsls	r3, r3, #20
 801c896:	0d1b      	lsrs	r3, r3, #20
 801c898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c89c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801c89e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 801c8a2:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 801c8a6:	b29b      	uxth	r3, r3
 801c8a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c8ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c8b0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 801c8b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c8b8:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801c8bc:	b18b      	cbz	r3, 801c8e2 <HAL_PCD_IRQHandler+0x132>
 801c8be:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 801c8c2:	b171      	cbz	r1, 801c8e2 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801c8c4:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 801c8c8:	f001 fc7a 	bl	801e1c0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 801c8cc:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 801c8d0:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801c8d4:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 801c8d6:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801c8d8:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 801c8da:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801c8de:	f002 fba5 	bl	801f02c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801c8e2:	6821      	ldr	r1, [r4, #0]
 801c8e4:	880a      	ldrh	r2, [r1, #0]
 801c8e6:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801c8e8:	0512      	lsls	r2, r2, #20
 801c8ea:	f53f af6e 	bmi.w	801c7ca <HAL_PCD_IRQHandler+0x1a>
 801c8ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 801c8f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801c8f6:	f43f af68 	beq.w	801c7ca <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801c8fa:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 801c8fe:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 801c902:	b292      	uxth	r2, r2
 801c904:	5a83      	ldrh	r3, [r0, r2]
 801c906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c90a:	5283      	strh	r3, [r0, r2]
 801c90c:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 801c910:	2b3e      	cmp	r3, #62	@ 0x3e
 801c912:	d91d      	bls.n	801c950 <HAL_PCD_IRQHandler+0x1a0>
 801c914:	095f      	lsrs	r7, r3, #5
 801c916:	06db      	lsls	r3, r3, #27
 801c918:	5a83      	ldrh	r3, [r0, r2]
 801c91a:	bf08      	it	eq
 801c91c:	f107 37ff 	addeq.w	r7, r7, #4294967295	@ 0xffffffff
 801c920:	b29b      	uxth	r3, r3
 801c922:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 801c926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801c92a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801c92e:	b29b      	uxth	r3, r3
 801c930:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801c932:	880b      	ldrh	r3, [r1, #0]
 801c934:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801c938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c93c:	041b      	lsls	r3, r3, #16
 801c93e:	0c1b      	lsrs	r3, r3, #16
 801c940:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 801c944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801c948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c94c:	800b      	strh	r3, [r1, #0]
 801c94e:	e73c      	b.n	801c7ca <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801c950:	b90b      	cbnz	r3, 801c956 <HAL_PCD_IRQHandler+0x1a6>
 801c952:	5a83      	ldrh	r3, [r0, r2]
 801c954:	e7e7      	b.n	801c926 <HAL_PCD_IRQHandler+0x176>
 801c956:	085f      	lsrs	r7, r3, #1
 801c958:	07db      	lsls	r3, r3, #31
 801c95a:	5a83      	ldrh	r3, [r0, r2]
 801c95c:	bf48      	it	mi
 801c95e:	3701      	addmi	r7, #1
 801c960:	b29b      	uxth	r3, r3
 801c962:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 801c966:	e7e2      	b.n	801c92e <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801c968:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801c96c:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801c96e:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801c972:	f140 80f6 	bpl.w	801cb62 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801c976:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 801c97a:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801c97e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801c982:	051b      	lsls	r3, r3, #20
 801c984:	0d1b      	lsrs	r3, r3, #20
 801c986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c98a:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 801c98e:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 801c992:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 801c996:	b9bb      	cbnz	r3, 801c9c8 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801c998:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 801c99c:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 801c9a0:	b29b      	uxth	r3, r3
 801c9a2:	3306      	adds	r3, #6
 801c9a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c9a8:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 801c9ac:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 801c9b0:	f1b9 0f00 	cmp.w	r9, #0
 801c9b4:	f000 80ba 	beq.w	801cb2c <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801c9b8:	464b      	mov	r3, r9
 801c9ba:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801c9be:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 801c9c2:	f001 fbfd 	bl	801e1c0 <USB_ReadPMA>
 801c9c6:	e0b1      	b.n	801cb2c <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 801c9c8:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801c9cc:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 801c9d0:	2b02      	cmp	r3, #2
 801c9d2:	f040 8089 	bne.w	801cae8 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801c9d6:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 801c9da:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 801c9de:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801c9e2:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 801c9e6:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801c9ea:	44d9      	add	r9, fp
 801c9ec:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801c9f0:	d03c      	beq.n	801ca6c <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801c9f2:	f109 0902 	add.w	r9, r9, #2
 801c9f6:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 801c9fa:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 801c9fe:	4599      	cmp	r9, r3
 801ca00:	d913      	bls.n	801ca2a <HAL_PCD_IRQHandler+0x27a>
 801ca02:	2300      	movs	r3, #0
 801ca04:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801ca08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801ca0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801ca10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ca14:	041b      	lsls	r3, r3, #16
 801ca16:	0c1b      	lsrs	r3, r3, #16
 801ca18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801ca1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801ca20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 801ca28:	e005      	b.n	801ca36 <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 801ca2a:	eba3 0309 	sub.w	r3, r3, r9
 801ca2e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d0e8      	beq.n	801ca08 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801ca36:	f1bc 0f00 	cmp.w	ip, #0
 801ca3a:	d00d      	beq.n	801ca58 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801ca3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801ca40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801ca44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ca48:	041b      	lsls	r3, r3, #16
 801ca4a:	0c1b      	lsrs	r3, r3, #16
 801ca4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801ca50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801ca54:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 801ca58:	f1b9 0f00 	cmp.w	r9, #0
 801ca5c:	d066      	beq.n	801cb2c <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801ca5e:	2128      	movs	r1, #40	@ 0x28
 801ca60:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801ca64:	464b      	mov	r3, r9
 801ca66:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 801ca6a:	e7a8      	b.n	801c9be <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ca6c:	f109 0906 	add.w	r9, r9, #6
 801ca70:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 801ca74:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 801ca78:	4599      	cmp	r9, r3
 801ca7a:	d912      	bls.n	801caa2 <HAL_PCD_IRQHandler+0x2f2>
 801ca7c:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801ca80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801ca84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801ca88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ca8c:	041b      	lsls	r3, r3, #16
 801ca8e:	0c1b      	lsrs	r3, r3, #16
 801ca90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801ca94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801ca98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 801caa0:	e005      	b.n	801caae <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 801caa2:	eba3 0309 	sub.w	r3, r3, r9
 801caa6:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d0e8      	beq.n	801ca80 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801caae:	f1bc 0f00 	cmp.w	ip, #0
 801cab2:	d10d      	bne.n	801cad0 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801cab4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801cab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801cabc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801cac0:	041b      	lsls	r3, r3, #16
 801cac2:	0c1b      	lsrs	r3, r3, #16
 801cac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801cac8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801cacc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 801cad0:	f1b9 0f00 	cmp.w	r9, #0
 801cad4:	d02a      	beq.n	801cb2c <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801cad6:	2128      	movs	r1, #40	@ 0x28
 801cad8:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801cadc:	464b      	mov	r3, r9
 801cade:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 801cae2:	e76c      	b.n	801c9be <HAL_PCD_IRQHandler+0x20e>
 801cae4:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801cae8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801caec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801caf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801caf4:	041b      	lsls	r3, r3, #16
 801caf6:	0c1b      	lsrs	r3, r3, #16
 801caf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801cafc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801cb00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801cb04:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 801cb08:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 801cb0c:	00db      	lsls	r3, r3, #3
 801cb0e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801cb12:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801cb16:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801cb18:	d054      	beq.n	801cbc4 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801cb1a:	3202      	adds	r2, #2
 801cb1c:	4413      	add	r3, r2
 801cb1e:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 801cb22:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 801cb26:	f1b9 0f00 	cmp.w	r9, #0
 801cb2a:	d19b      	bne.n	801ca64 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 801cb2c:	fb05 f107 	mul.w	r1, r5, r7
 801cb30:	1863      	adds	r3, r4, r1
 801cb32:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 801cb36:	444a      	add	r2, r9
 801cb38:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 801cb3c:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 801cb40:	444a      	add	r2, r9
 801cb42:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801cb46:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 801cb4a:	b11a      	cbz	r2, 801cb54 <HAL_PCD_IRQHandler+0x3a4>
 801cb4c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801cb50:	4599      	cmp	r9, r3
 801cb52:	d241      	bcs.n	801cbd8 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801cb54:	fb05 4307 	mla	r3, r5, r7, r4
 801cb58:	4620      	mov	r0, r4
 801cb5a:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 801cb5e:	f002 fa65 	bl	801f02c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801cb62:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801cb66:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801cb68:	f43f ae2f 	beq.w	801c7ca <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801cb6c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 801cb70:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801cb74:	b29b      	uxth	r3, r3
 801cb76:	4033      	ands	r3, r6
 801cb78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801cb7c:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 801cb80:	eb04 030c 	add.w	r3, r4, ip
 801cb84:	7cda      	ldrb	r2, [r3, #19]
 801cb86:	2a01      	cmp	r2, #1
 801cb88:	d156      	bne.n	801cc38 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 801cb8a:	2100      	movs	r1, #0
 801cb8c:	fb07 5205 	mla	r2, r7, r5, r5
 801cb90:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 801cb92:	7f1a      	ldrb	r2, [r3, #28]
 801cb94:	b392      	cbz	r2, 801cbfc <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801cb96:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cb9a:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801cb9c:	d036      	beq.n	801cc0c <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cb9e:	bb12      	cbnz	r2, 801cbe6 <HAL_PCD_IRQHandler+0x436>
 801cba0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801cba4:	7c1b      	ldrb	r3, [r3, #16]
 801cba6:	b292      	uxth	r2, r2
 801cba8:	011b      	lsls	r3, r3, #4
 801cbaa:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cbae:	4410      	add	r0, r2
 801cbb0:	5a1a      	ldrh	r2, [r3, r0]
 801cbb2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801cbb6:	521a      	strh	r2, [r3, r0]
 801cbb8:	5a1a      	ldrh	r2, [r3, r0]
 801cbba:	b292      	uxth	r2, r2
 801cbbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801cbc0:	521a      	strh	r2, [r3, r0]
 801cbc2:	e01b      	b.n	801cbfc <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801cbc4:	3206      	adds	r2, #6
 801cbc6:	4413      	add	r3, r2
 801cbc8:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 801cbcc:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 801cbd0:	f1b9 0f00 	cmp.w	r9, #0
 801cbd4:	d0aa      	beq.n	801cb2c <HAL_PCD_IRQHandler+0x37c>
 801cbd6:	e781      	b.n	801cadc <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 801cbd8:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801cbdc:	6820      	ldr	r0, [r4, #0]
 801cbde:	4421      	add	r1, r4
 801cbe0:	f001 f8b9 	bl	801dd56 <USB_EPStartXfer>
 801cbe4:	e7bd      	b.n	801cb62 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cbe6:	2a01      	cmp	r2, #1
 801cbe8:	d108      	bne.n	801cbfc <HAL_PCD_IRQHandler+0x44c>
 801cbea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801cbee:	7c1b      	ldrb	r3, [r3, #16]
 801cbf0:	b292      	uxth	r2, r2
 801cbf2:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 801cbf6:	011b      	lsls	r3, r3, #4
 801cbf8:	4410      	add	r0, r2
 801cbfa:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801cbfc:	2328      	movs	r3, #40	@ 0x28
 801cbfe:	fb03 4307 	mla	r3, r3, r7, r4
 801cc02:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801cc04:	4620      	mov	r0, r4
 801cc06:	f002 fa1a 	bl	801f03e <HAL_PCD_DataInStageCallback>
 801cc0a:	e5de      	b.n	801c7ca <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cc0c:	b93a      	cbnz	r2, 801cc1e <HAL_PCD_IRQHandler+0x46e>
 801cc0e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801cc12:	7c1b      	ldrb	r3, [r3, #16]
 801cc14:	b292      	uxth	r2, r2
 801cc16:	011b      	lsls	r3, r3, #4
 801cc18:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 801cc1c:	e7c7      	b.n	801cbae <HAL_PCD_IRQHandler+0x3fe>
 801cc1e:	2a01      	cmp	r2, #1
 801cc20:	d1ec      	bne.n	801cbfc <HAL_PCD_IRQHandler+0x44c>
 801cc22:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801cc26:	7c1b      	ldrb	r3, [r3, #16]
 801cc28:	b292      	uxth	r2, r2
 801cc2a:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 801cc2e:	011b      	lsls	r3, r3, #4
 801cc30:	4410      	add	r0, r2
 801cc32:	f823 8000 	strh.w	r8, [r3, r0]
 801cc36:	e7e1      	b.n	801cbfc <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801cc38:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 801cc3a:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 801cc3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801cc40:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 801cc44:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 801cc48:	d11b      	bne.n	801cc82 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801cc4a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 801cc4e:	b2bf      	uxth	r7, r7
 801cc50:	4457      	add	r7, sl
 801cc52:	3702      	adds	r7, #2
 801cc54:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 801cc58:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801cc5c:	4297      	cmp	r7, r2
 801cc5e:	d302      	bcc.n	801cc66 <HAL_PCD_IRQHandler+0x4b6>
 801cc60:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 801cc64:	e7ce      	b.n	801cc04 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 801cc66:	1bd2      	subs	r2, r2, r7
 801cc68:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 801cc6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 801cc6c:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 801cc70:	443a      	add	r2, r7
 801cc72:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 801cc74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801cc76:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 801cc78:	443a      	add	r2, r7
 801cc7a:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801cc7c:	f001 f86b 	bl	801dd56 <USB_EPStartXfer>
 801cc80:	e5a3      	b.n	801c7ca <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801cc82:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801cc86:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801cc8a:	fa1f fc8c 	uxth.w	ip, ip
 801cc8e:	44d4      	add	ip, sl
 801cc90:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801cc94:	f000 80f4 	beq.w	801ce80 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801cc98:	f10c 0c02 	add.w	ip, ip, #2
 801cc9c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 801cca0:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 801cca4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801cca8:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 801ccaa:	bf2c      	ite	cs
 801ccac:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 801ccae:	eba2 020c 	subcc.w	r2, r2, ip
 801ccb2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801ccb4:	2a00      	cmp	r2, #0
 801ccb6:	d15b      	bne.n	801cd70 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ccb8:	2328      	movs	r3, #40	@ 0x28
 801ccba:	fb03 4307 	mla	r3, r3, r7, r4
 801ccbe:	7c5b      	ldrb	r3, [r3, #17]
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d141      	bne.n	801cd48 <HAL_PCD_IRQHandler+0x598>
 801ccc4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801ccc8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 801cccc:	b292      	uxth	r2, r2
 801ccce:	010b      	lsls	r3, r1, #4
 801ccd0:	4494      	add	ip, r2
 801ccd2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 801ccd6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801ccda:	f82c 2003 	strh.w	r2, [ip, r3]
 801ccde:	f83c 2003 	ldrh.w	r2, [ip, r3]
 801cce2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801cce6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801ccea:	b292      	uxth	r2, r2
 801ccec:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ccf0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801ccf4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 801ccf8:	b292      	uxth	r2, r2
 801ccfa:	4410      	add	r0, r2
 801ccfc:	5ac2      	ldrh	r2, [r0, r3]
 801ccfe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801cd02:	52c2      	strh	r2, [r0, r3]
 801cd04:	5ac2      	ldrh	r2, [r0, r3]
 801cd06:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801cd0a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801cd0e:	b292      	uxth	r2, r2
 801cd10:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801cd12:	4620      	mov	r0, r4
 801cd14:	f002 f993 	bl	801f03e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801cd18:	f1b8 0f00 	cmp.w	r8, #0
 801cd1c:	f000 80f4 	beq.w	801cf08 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801cd20:	2328      	movs	r3, #40	@ 0x28
 801cd22:	fb03 4307 	mla	r3, r3, r7, r4
 801cd26:	6822      	ldr	r2, [r4, #0]
 801cd28:	7c19      	ldrb	r1, [r3, #16]
 801cd2a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 801cd2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801cd32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801cd36:	041b      	lsls	r3, r3, #16
 801cd38:	0c1b      	lsrs	r3, r3, #16
 801cd3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801cd3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cd42:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 801cd46:	e0df      	b.n	801cf08 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cd48:	2b01      	cmp	r3, #1
 801cd4a:	d1e2      	bne.n	801cd12 <HAL_PCD_IRQHandler+0x562>
 801cd4c:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 801cd50:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 801cd54:	fa1f fe8e 	uxth.w	lr, lr
 801cd58:	44f4      	add	ip, lr
 801cd5a:	010b      	lsls	r3, r1, #4
 801cd5c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cd60:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 801cd64:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 801cd68:	fa1f fc8c 	uxth.w	ip, ip
 801cd6c:	4460      	add	r0, ip
 801cd6e:	e7cf      	b.n	801cd10 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801cd70:	f1b8 0f00 	cmp.w	r8, #0
 801cd74:	d00d      	beq.n	801cd92 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801cd76:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 801cd7a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 801cd7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801cd82:	0412      	lsls	r2, r2, #16
 801cd84:	0c12      	lsrs	r2, r2, #16
 801cd86:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 801cd8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801cd8e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 801cd92:	f04f 0828 	mov.w	r8, #40	@ 0x28
 801cd96:	fb08 4807 	mla	r8, r8, r7, r4
 801cd9a:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 801cd9e:	2a01      	cmp	r2, #1
 801cda0:	f040 80b2 	bne.w	801cf08 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 801cda4:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 801cda8:	eb02 0e0c 	add.w	lr, r2, ip
 801cdac:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 801cdb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801cdb2:	4462      	add	r2, ip
 801cdb4:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 801cdb6:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 801cdba:	f8d8 2020 	ldr.w	r2, [r8, #32]
 801cdbe:	4293      	cmp	r3, r2
 801cdc0:	d335      	bcc.n	801ce2e <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 801cdc2:	1a9b      	subs	r3, r3, r2
 801cdc4:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801cdc8:	2328      	movs	r3, #40	@ 0x28
 801cdca:	fb03 4307 	mla	r3, r3, r7, r4
 801cdce:	f893 c011 	ldrb.w	ip, [r3, #17]
 801cdd2:	b293      	uxth	r3, r2
 801cdd4:	f1bc 0f00 	cmp.w	ip, #0
 801cdd8:	d145      	bne.n	801ce66 <HAL_PCD_IRQHandler+0x6b6>
 801cdda:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 801cdde:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 801cde2:	fa1f f888 	uxth.w	r8, r8
 801cde6:	44c4      	add	ip, r8
 801cde8:	0109      	lsls	r1, r1, #4
 801cdea:	f83c 8001 	ldrh.w	r8, [ip, r1]
 801cdee:	2a3e      	cmp	r2, #62	@ 0x3e
 801cdf0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801cdf4:	f82c 8001 	strh.w	r8, [ip, r1]
 801cdf8:	d925      	bls.n	801ce46 <HAL_PCD_IRQHandler+0x696>
 801cdfa:	ea4f 1852 	mov.w	r8, r2, lsr #5
 801cdfe:	06d2      	lsls	r2, r2, #27
 801ce00:	f83c 2001 	ldrh.w	r2, [ip, r1]
 801ce04:	bf08      	it	eq
 801ce06:	f108 38ff 	addeq.w	r8, r8, #4294967295	@ 0xffffffff
 801ce0a:	b292      	uxth	r2, r2
 801ce0c:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 801ce10:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801ce14:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801ce18:	b292      	uxth	r2, r2
 801ce1a:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801ce1e:	2228      	movs	r2, #40	@ 0x28
 801ce20:	fb02 4207 	mla	r2, r2, r7, r4
 801ce24:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801ce26:	4671      	mov	r1, lr
 801ce28:	f000 ff85 	bl	801dd36 <USB_WritePMA>
 801ce2c:	e06c      	b.n	801cf08 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 801ce2e:	b91b      	cbnz	r3, 801ce38 <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 801ce30:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 801ce32:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 801ce36:	e7c7      	b.n	801cdc8 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 801ce38:	2200      	movs	r2, #0
 801ce3a:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 801ce3e:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 801ce42:	461a      	mov	r2, r3
 801ce44:	e7c0      	b.n	801cdc8 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801ce46:	b912      	cbnz	r2, 801ce4e <HAL_PCD_IRQHandler+0x69e>
 801ce48:	f83c 2001 	ldrh.w	r2, [ip, r1]
 801ce4c:	e7e0      	b.n	801ce10 <HAL_PCD_IRQHandler+0x660>
 801ce4e:	ea4f 0852 	mov.w	r8, r2, lsr #1
 801ce52:	07d2      	lsls	r2, r2, #31
 801ce54:	f83c 2001 	ldrh.w	r2, [ip, r1]
 801ce58:	bf48      	it	mi
 801ce5a:	f108 0801 	addmi.w	r8, r8, #1
 801ce5e:	b292      	uxth	r2, r2
 801ce60:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 801ce64:	e7d8      	b.n	801ce18 <HAL_PCD_IRQHandler+0x668>
 801ce66:	f1bc 0f01 	cmp.w	ip, #1
 801ce6a:	d1d8      	bne.n	801ce1e <HAL_PCD_IRQHandler+0x66e>
 801ce6c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 801ce70:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 801ce74:	fa1f fc8c 	uxth.w	ip, ip
 801ce78:	4462      	add	r2, ip
 801ce7a:	0109      	lsls	r1, r1, #4
 801ce7c:	5253      	strh	r3, [r2, r1]
 801ce7e:	e7ce      	b.n	801ce1e <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ce80:	f10c 0c06 	add.w	ip, ip, #6
 801ce84:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 801ce88:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 801ce8c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801ce90:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 801ce92:	bf8c      	ite	hi
 801ce94:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 801ce96:	eba2 020c 	subls.w	r2, r2, ip
 801ce9a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 801ce9c:	2a00      	cmp	r2, #0
 801ce9e:	d15d      	bne.n	801cf5c <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cea0:	2328      	movs	r3, #40	@ 0x28
 801cea2:	fb03 4307 	mla	r3, r3, r7, r4
 801cea6:	7c5b      	ldrb	r3, [r3, #17]
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d143      	bne.n	801cf34 <HAL_PCD_IRQHandler+0x784>
 801ceac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801ceb0:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 801ceb4:	b292      	uxth	r2, r2
 801ceb6:	010b      	lsls	r3, r1, #4
 801ceb8:	4494      	add	ip, r2
 801ceba:	f83c 2003 	ldrh.w	r2, [ip, r3]
 801cebe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801cec2:	f82c 2003 	strh.w	r2, [ip, r3]
 801cec6:	f83c 2003 	ldrh.w	r2, [ip, r3]
 801ceca:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801cece:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801ced2:	b292      	uxth	r2, r2
 801ced4:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ced8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801cedc:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 801cee0:	b292      	uxth	r2, r2
 801cee2:	4410      	add	r0, r2
 801cee4:	5ac2      	ldrh	r2, [r0, r3]
 801cee6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801ceea:	52c2      	strh	r2, [r0, r3]
 801ceec:	5ac2      	ldrh	r2, [r0, r3]
 801ceee:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801cef2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801cef6:	b292      	uxth	r2, r2
 801cef8:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801cefa:	4620      	mov	r0, r4
 801cefc:	f002 f89f 	bl	801f03e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801cf00:	f1b8 0f00 	cmp.w	r8, #0
 801cf04:	f43f af0c 	beq.w	801cd20 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801cf08:	2328      	movs	r3, #40	@ 0x28
 801cf0a:	fb03 4307 	mla	r3, r3, r7, r4
 801cf0e:	6822      	ldr	r2, [r4, #0]
 801cf10:	7c19      	ldrb	r1, [r3, #16]
 801cf12:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 801cf16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801cf1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801cf1e:	041b      	lsls	r3, r3, #16
 801cf20:	0c1b      	lsrs	r3, r3, #16
 801cf22:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 801cf26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801cf2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cf2e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 801cf32:	e44a      	b.n	801c7ca <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cf34:	2b01      	cmp	r3, #1
 801cf36:	d1e0      	bne.n	801cefa <HAL_PCD_IRQHandler+0x74a>
 801cf38:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 801cf3c:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 801cf40:	fa1f fe8e 	uxth.w	lr, lr
 801cf44:	44f4      	add	ip, lr
 801cf46:	010b      	lsls	r3, r1, #4
 801cf48:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801cf4c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 801cf50:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 801cf54:	fa1f fc8c 	uxth.w	ip, ip
 801cf58:	4460      	add	r0, ip
 801cf5a:	e7cd      	b.n	801cef8 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801cf5c:	f1b8 0f00 	cmp.w	r8, #0
 801cf60:	d10d      	bne.n	801cf7e <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801cf62:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 801cf66:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 801cf6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801cf6e:	0412      	lsls	r2, r2, #16
 801cf70:	0c12      	lsrs	r2, r2, #16
 801cf72:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 801cf76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801cf7a:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 801cf7e:	f04f 0828 	mov.w	r8, #40	@ 0x28
 801cf82:	fb08 4807 	mla	r8, r8, r7, r4
 801cf86:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 801cf8a:	2a01      	cmp	r2, #1
 801cf8c:	d1bc      	bne.n	801cf08 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 801cf8e:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 801cf92:	eb02 0e0c 	add.w	lr, r2, ip
 801cf96:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 801cf9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801cf9c:	4462      	add	r2, ip
 801cf9e:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 801cfa0:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 801cfa4:	f8d8 2020 	ldr.w	r2, [r8, #32]
 801cfa8:	4293      	cmp	r3, r2
 801cfaa:	d332      	bcc.n	801d012 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 801cfac:	1a9b      	subs	r3, r3, r2
 801cfae:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801cfb2:	2328      	movs	r3, #40	@ 0x28
 801cfb4:	fb03 4307 	mla	r3, r3, r7, r4
 801cfb8:	f893 c011 	ldrb.w	ip, [r3, #17]
 801cfbc:	b293      	uxth	r3, r2
 801cfbe:	f1bc 0f00 	cmp.w	ip, #0
 801cfc2:	d142      	bne.n	801d04a <HAL_PCD_IRQHandler+0x89a>
 801cfc4:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 801cfc8:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 801cfcc:	fa1f f888 	uxth.w	r8, r8
 801cfd0:	44c4      	add	ip, r8
 801cfd2:	0109      	lsls	r1, r1, #4
 801cfd4:	f83c 8001 	ldrh.w	r8, [ip, r1]
 801cfd8:	2a3e      	cmp	r2, #62	@ 0x3e
 801cfda:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801cfde:	f82c 8001 	strh.w	r8, [ip, r1]
 801cfe2:	d922      	bls.n	801d02a <HAL_PCD_IRQHandler+0x87a>
 801cfe4:	ea4f 1852 	mov.w	r8, r2, lsr #5
 801cfe8:	06d2      	lsls	r2, r2, #27
 801cfea:	f83c 2001 	ldrh.w	r2, [ip, r1]
 801cfee:	bf08      	it	eq
 801cff0:	f108 38ff 	addeq.w	r8, r8, #4294967295	@ 0xffffffff
 801cff4:	b292      	uxth	r2, r2
 801cff6:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 801cffa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801cffe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801d002:	b292      	uxth	r2, r2
 801d004:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801d008:	2228      	movs	r2, #40	@ 0x28
 801d00a:	fb02 4207 	mla	r2, r2, r7, r4
 801d00e:	8b52      	ldrh	r2, [r2, #26]
 801d010:	e709      	b.n	801ce26 <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 801d012:	b91b      	cbnz	r3, 801d01c <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 801d014:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 801d016:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 801d01a:	e7ca      	b.n	801cfb2 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 801d01c:	2200      	movs	r2, #0
 801d01e:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 801d022:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 801d026:	461a      	mov	r2, r3
 801d028:	e7c3      	b.n	801cfb2 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801d02a:	b912      	cbnz	r2, 801d032 <HAL_PCD_IRQHandler+0x882>
 801d02c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 801d030:	e7e3      	b.n	801cffa <HAL_PCD_IRQHandler+0x84a>
 801d032:	ea4f 0852 	mov.w	r8, r2, lsr #1
 801d036:	07d2      	lsls	r2, r2, #31
 801d038:	f83c 2001 	ldrh.w	r2, [ip, r1]
 801d03c:	bf48      	it	mi
 801d03e:	f108 0801 	addmi.w	r8, r8, #1
 801d042:	b292      	uxth	r2, r2
 801d044:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 801d048:	e7db      	b.n	801d002 <HAL_PCD_IRQHandler+0x852>
 801d04a:	f1bc 0f01 	cmp.w	ip, #1
 801d04e:	d1db      	bne.n	801d008 <HAL_PCD_IRQHandler+0x858>
 801d050:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801d054:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 801d058:	b292      	uxth	r2, r2
 801d05a:	4494      	add	ip, r2
 801d05c:	010a      	lsls	r2, r1, #4
 801d05e:	f82c 3002 	strh.w	r3, [ip, r2]
 801d062:	e7d1      	b.n	801d008 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801d064:	0546      	lsls	r6, r0, #21
 801d066:	d512      	bpl.n	801d08e <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801d068:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 801d06a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801d06c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 801d070:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801d074:	041b      	lsls	r3, r3, #16
 801d076:	0c1b      	lsrs	r3, r3, #16
 801d078:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 801d07c:	f001 ffeb 	bl	801f056 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801d080:	4629      	mov	r1, r5
 801d082:	4620      	mov	r0, r4
}
 801d084:	b005      	add	sp, #20
 801d086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801d08a:	f7ff bb7e 	b.w	801c78a <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801d08e:	0441      	lsls	r1, r0, #17
 801d090:	d50a      	bpl.n	801d0a8 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 801d092:	6822      	ldr	r2, [r4, #0]
 801d094:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 801d098:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 801d09c:	041b      	lsls	r3, r3, #16
 801d09e:	0c1b      	lsrs	r3, r3, #16
 801d0a0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 801d0a4:	f7ff bb96 	b.w	801c7d4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 801d0a8:	0482      	lsls	r2, r0, #18
 801d0aa:	d505      	bpl.n	801d0b8 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801d0ac:	6822      	ldr	r2, [r4, #0]
 801d0ae:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 801d0b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801d0b6:	e7f1      	b.n	801d09c <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801d0b8:	04c3      	lsls	r3, r0, #19
 801d0ba:	d519      	bpl.n	801d0f0 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 801d0bc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 801d0be:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 801d0c0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 801d0c4:	f023 0304 	bic.w	r3, r3, #4
 801d0c8:	041b      	lsls	r3, r3, #16
 801d0ca:	0c1b      	lsrs	r3, r3, #16
 801d0cc:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801d0d0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 801d0d4:	f023 0308 	bic.w	r3, r3, #8
 801d0d8:	041b      	lsls	r3, r3, #16
 801d0da:	0c1b      	lsrs	r3, r3, #16
 801d0dc:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 801d0e0:	f001 ffdc 	bl	801f09c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801d0e4:	6822      	ldr	r2, [r4, #0]
 801d0e6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 801d0ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d0ee:	e7d5      	b.n	801d09c <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 801d0f0:	0507      	lsls	r7, r0, #20
 801d0f2:	d548      	bpl.n	801d186 <HAL_PCD_IRQHandler+0x9d6>
 801d0f4:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 801d0f6:	6823      	ldr	r3, [r4, #0]
 801d0f8:	4606      	mov	r6, r0
 801d0fa:	4619      	mov	r1, r3
 801d0fc:	461a      	mov	r2, r3
 801d0fe:	f103 0520 	add.w	r5, r3, #32
 801d102:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 801d106:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 801d108:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 801d10c:	d1f9      	bne.n	801d102 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 801d10e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 801d112:	b292      	uxth	r2, r2
 801d114:	f042 0201 	orr.w	r2, r2, #1
 801d118:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 801d11c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 801d120:	f022 0201 	bic.w	r2, r2, #1
 801d124:	0412      	lsls	r2, r2, #16
 801d126:	0c12      	lsrs	r2, r2, #16
 801d128:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 801d12c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 801d130:	0556      	lsls	r6, r2, #21
 801d132:	d5fb      	bpl.n	801d12c <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801d134:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 801d138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801d13c:	0412      	lsls	r2, r2, #16
 801d13e:	0c12      	lsrs	r2, r2, #16
 801d140:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 801d144:	f830 2b02 	ldrh.w	r2, [r0], #2
 801d148:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 801d14c:	428d      	cmp	r5, r1
 801d14e:	d1f9      	bne.n	801d144 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801d150:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 801d154:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801d156:	b292      	uxth	r2, r2
 801d158:	f042 0208 	orr.w	r2, r2, #8
 801d15c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801d160:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 801d164:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801d168:	0412      	lsls	r2, r2, #16
 801d16a:	0c12      	lsrs	r2, r2, #16
 801d16c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 801d170:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 801d174:	b292      	uxth	r2, r2
 801d176:	f042 0204 	orr.w	r2, r2, #4
 801d17a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 801d17e:	f001 ff7d 	bl	801f07c <HAL_PCD_SuspendCallback>
    return;
 801d182:	f7ff bb27 	b.w	801c7d4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801d186:	0582      	lsls	r2, r0, #22
 801d188:	d50d      	bpl.n	801d1a6 <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801d18a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 801d18c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801d18e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 801d192:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801d196:	041b      	lsls	r3, r3, #16
 801d198:	0c1b      	lsrs	r3, r3, #16
 801d19a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 801d19e:	f001 ff56 	bl	801f04e <HAL_PCD_SOFCallback>
    return;
 801d1a2:	f7ff bb17 	b.w	801c7d4 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801d1a6:	05c3      	lsls	r3, r0, #23
 801d1a8:	f57f ab14 	bpl.w	801c7d4 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 801d1ac:	6822      	ldr	r2, [r4, #0]
 801d1ae:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 801d1b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d1b6:	e771      	b.n	801d09c <HAL_PCD_IRQHandler+0x8ec>

0801d1b8 <HAL_PCD_EP_Open>:
{
 801d1b8:	b570      	push	{r4, r5, r6, lr}
 801d1ba:	2428      	movs	r4, #40	@ 0x28
 801d1bc:	4605      	mov	r5, r0
 801d1be:	f001 0007 	and.w	r0, r1, #7
 801d1c2:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 801d1c4:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d1c8:	bf14      	ite	ne
 801d1ca:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d1ce:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 801d1d2:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 801d1d6:	bf15      	itete	ne
 801d1d8:	2401      	movne	r4, #1
    ep->is_in = 0U;
 801d1da:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 801d1dc:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 801d1de:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d1e2:	bf14      	ite	ne
 801d1e4:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d1e6:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 801d1e8:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 801d1ea:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 801d1ec:	bf08      	it	eq
 801d1ee:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 801d1f0:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 801d1f2:	bf08      	it	eq
 801d1f4:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 801d1f6:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 801d1f8:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 801d1fc:	2b01      	cmp	r3, #1
 801d1fe:	d009      	beq.n	801d214 <HAL_PCD_EP_Open+0x5c>
 801d200:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801d202:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 801d204:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801d208:	f000 fbbc 	bl	801d984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801d20c:	2000      	movs	r0, #0
 801d20e:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 801d212:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 801d214:	2002      	movs	r0, #2
 801d216:	e7fc      	b.n	801d212 <HAL_PCD_EP_Open+0x5a>

0801d218 <HAL_PCD_EP_Receive>:
{
 801d218:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 801d21a:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 801d21c:	2600      	movs	r6, #0
 801d21e:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 801d222:	434c      	muls	r4, r1
 801d224:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 801d226:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d22a:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801d22e:	4401      	add	r1, r0
  ep->xfer_len = len;
 801d230:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 801d234:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 801d238:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801d23c:	6800      	ldr	r0, [r0, #0]
 801d23e:	f000 fd8a 	bl	801dd56 <USB_EPStartXfer>
}
 801d242:	4630      	mov	r0, r6
 801d244:	bd70      	pop	{r4, r5, r6, pc}

0801d246 <HAL_PCD_EP_Transmit>:
{
 801d246:	b570      	push	{r4, r5, r6, lr}
 801d248:	2528      	movs	r5, #40	@ 0x28
 801d24a:	f001 0107 	and.w	r1, r1, #7
 801d24e:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 801d250:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 801d252:	2600      	movs	r6, #0
  ep->xfer_len = len;
 801d254:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 801d258:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 801d25a:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d25c:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801d260:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 801d262:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 801d266:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 801d268:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 801d26a:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801d26c:	6800      	ldr	r0, [r0, #0]
 801d26e:	f000 fd72 	bl	801dd56 <USB_EPStartXfer>
}
 801d272:	4630      	mov	r0, r6
 801d274:	bd70      	pop	{r4, r5, r6, pc}

0801d276 <HAL_PCD_EP_SetStall>:
{
 801d276:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801d278:	7903      	ldrb	r3, [r0, #4]
 801d27a:	f001 0507 	and.w	r5, r1, #7
 801d27e:	42ab      	cmp	r3, r5
{
 801d280:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801d282:	d32a      	bcc.n	801d2da <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 801d284:	f011 0f80 	tst.w	r1, #128	@ 0x80
 801d288:	f04f 0328 	mov.w	r3, #40	@ 0x28
 801d28c:	d01c      	beq.n	801d2c8 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 801d28e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d290:	436b      	muls	r3, r5
 801d292:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 801d296:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d298:	4401      	add	r1, r0
    ep->is_in = 1U;
 801d29a:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 801d29c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 801d29e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 801d2a0:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 801d2a2:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 801d2a6:	429a      	cmp	r2, r3
 801d2a8:	d019      	beq.n	801d2de <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 801d2aa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 801d2ac:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 801d2b0:	f000 fcc8 	bl	801dc44 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801d2b4:	b925      	cbnz	r5, 801d2c0 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 801d2b6:	6820      	ldr	r0, [r4, #0]
 801d2b8:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 801d2bc:	f000 fd39 	bl	801dd32 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 801d2c0:	2000      	movs	r0, #0
 801d2c2:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 801d2c6:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 801d2c8:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 801d2ca:	434b      	muls	r3, r1
 801d2cc:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 801d2d0:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 801d2d2:	4401      	add	r1, r0
    ep->is_in = 0U;
 801d2d4:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 801d2d8:	e7e0      	b.n	801d29c <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 801d2da:	2001      	movs	r0, #1
 801d2dc:	e7f3      	b.n	801d2c6 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 801d2de:	2002      	movs	r0, #2
 801d2e0:	e7f1      	b.n	801d2c6 <HAL_PCD_EP_SetStall+0x50>

0801d2e2 <HAL_PCD_EP_ClrStall>:
{
 801d2e2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801d2e4:	7902      	ldrb	r2, [r0, #4]
 801d2e6:	f001 030f 	and.w	r3, r1, #15
 801d2ea:	429a      	cmp	r2, r3
{
 801d2ec:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801d2ee:	d326      	bcc.n	801d33e <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 801d2f0:	2328      	movs	r3, #40	@ 0x28
 801d2f2:	f001 0207 	and.w	r2, r1, #7
 801d2f6:	4353      	muls	r3, r2
 801d2f8:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d2fc:	bf14      	ite	ne
 801d2fe:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d302:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 801d306:	4418      	add	r0, r3
  ep->is_stall = 0U;
 801d308:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 801d30c:	bf15      	itete	ne
 801d30e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 801d310:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d312:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801d314:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 801d316:	bf14      	ite	ne
 801d318:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 801d31a:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 801d31e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801d320:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 801d322:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 801d326:	2b01      	cmp	r3, #1
 801d328:	d00b      	beq.n	801d342 <HAL_PCD_EP_ClrStall+0x60>
 801d32a:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801d32c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 801d32e:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801d332:	f000 fca7 	bl	801dc84 <USB_EPClearStall>
  return HAL_OK;
 801d336:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 801d338:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 801d33c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801d33e:	2001      	movs	r0, #1
 801d340:	e7fc      	b.n	801d33c <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 801d342:	2002      	movs	r0, #2
 801d344:	e7fa      	b.n	801d33c <HAL_PCD_EP_ClrStall+0x5a>

0801d346 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801d346:	b510      	push	{r4, lr}
 801d348:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801d34a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d34e:	bf1b      	ittet	ne
 801d350:	f001 0107 	andne.w	r1, r1, #7
 801d354:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801d358:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801d35c:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 801d35e:	bf08      	it	eq
 801d360:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801d364:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 801d366:	b91a      	cbnz	r2, 801d370 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 801d368:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 801d36a:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 801d36c:	2000      	movs	r0, #0
 801d36e:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 801d370:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801d372:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 801d374:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801d376:	e7f9      	b.n	801d36c <HAL_PCDEx_PMAConfig+0x26>

0801d378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801d378:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801d37c:	4605      	mov	r5, r0
 801d37e:	b338      	cbz	r0, 801d3d0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801d380:	6803      	ldr	r3, [r0, #0]
 801d382:	07db      	lsls	r3, r3, #31
 801d384:	d410      	bmi.n	801d3a8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d386:	682b      	ldr	r3, [r5, #0]
 801d388:	079f      	lsls	r7, r3, #30
 801d38a:	d45e      	bmi.n	801d44a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d38c:	682b      	ldr	r3, [r5, #0]
 801d38e:	0719      	lsls	r1, r3, #28
 801d390:	f100 8095 	bmi.w	801d4be <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d394:	682b      	ldr	r3, [r5, #0]
 801d396:	075a      	lsls	r2, r3, #29
 801d398:	f100 80c1 	bmi.w	801d51e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d39c:	69eb      	ldr	r3, [r5, #28]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	f040 812c 	bne.w	801d5fc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 801d3a4:	2000      	movs	r0, #0
 801d3a6:	e029      	b.n	801d3fc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801d3a8:	4c90      	ldr	r4, [pc, #576]	@ (801d5ec <HAL_RCC_OscConfig+0x274>)
 801d3aa:	6863      	ldr	r3, [r4, #4]
 801d3ac:	f003 030c 	and.w	r3, r3, #12
 801d3b0:	2b04      	cmp	r3, #4
 801d3b2:	d007      	beq.n	801d3c4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801d3b4:	6863      	ldr	r3, [r4, #4]
 801d3b6:	f003 030c 	and.w	r3, r3, #12
 801d3ba:	2b08      	cmp	r3, #8
 801d3bc:	d10a      	bne.n	801d3d4 <HAL_RCC_OscConfig+0x5c>
 801d3be:	6863      	ldr	r3, [r4, #4]
 801d3c0:	03de      	lsls	r6, r3, #15
 801d3c2:	d507      	bpl.n	801d3d4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d3c4:	6823      	ldr	r3, [r4, #0]
 801d3c6:	039c      	lsls	r4, r3, #14
 801d3c8:	d5dd      	bpl.n	801d386 <HAL_RCC_OscConfig+0xe>
 801d3ca:	686b      	ldr	r3, [r5, #4]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d1da      	bne.n	801d386 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 801d3d0:	2001      	movs	r0, #1
 801d3d2:	e013      	b.n	801d3fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d3d4:	686b      	ldr	r3, [r5, #4]
 801d3d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d3da:	d112      	bne.n	801d402 <HAL_RCC_OscConfig+0x8a>
 801d3dc:	6823      	ldr	r3, [r4, #0]
 801d3de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d3e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801d3e4:	f7fe ffde 	bl	801c3a4 <HAL_GetTick>
 801d3e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d3ea:	6823      	ldr	r3, [r4, #0]
 801d3ec:	0398      	lsls	r0, r3, #14
 801d3ee:	d4ca      	bmi.n	801d386 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d3f0:	f7fe ffd8 	bl	801c3a4 <HAL_GetTick>
 801d3f4:	1b80      	subs	r0, r0, r6
 801d3f6:	2864      	cmp	r0, #100	@ 0x64
 801d3f8:	d9f7      	bls.n	801d3ea <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 801d3fa:	2003      	movs	r0, #3
}
 801d3fc:	b002      	add	sp, #8
 801d3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d402:	b99b      	cbnz	r3, 801d42c <HAL_RCC_OscConfig+0xb4>
 801d404:	6823      	ldr	r3, [r4, #0]
 801d406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d40a:	6023      	str	r3, [r4, #0]
 801d40c:	6823      	ldr	r3, [r4, #0]
 801d40e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d412:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801d414:	f7fe ffc6 	bl	801c3a4 <HAL_GetTick>
 801d418:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d41a:	6823      	ldr	r3, [r4, #0]
 801d41c:	0399      	lsls	r1, r3, #14
 801d41e:	d5b2      	bpl.n	801d386 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d420:	f7fe ffc0 	bl	801c3a4 <HAL_GetTick>
 801d424:	1b80      	subs	r0, r0, r6
 801d426:	2864      	cmp	r0, #100	@ 0x64
 801d428:	d9f7      	bls.n	801d41a <HAL_RCC_OscConfig+0xa2>
 801d42a:	e7e6      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d42c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d430:	6823      	ldr	r3, [r4, #0]
 801d432:	d103      	bne.n	801d43c <HAL_RCC_OscConfig+0xc4>
 801d434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d438:	6023      	str	r3, [r4, #0]
 801d43a:	e7cf      	b.n	801d3dc <HAL_RCC_OscConfig+0x64>
 801d43c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d440:	6023      	str	r3, [r4, #0]
 801d442:	6823      	ldr	r3, [r4, #0]
 801d444:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d448:	e7cb      	b.n	801d3e2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801d44a:	4c68      	ldr	r4, [pc, #416]	@ (801d5ec <HAL_RCC_OscConfig+0x274>)
 801d44c:	6863      	ldr	r3, [r4, #4]
 801d44e:	f013 0f0c 	tst.w	r3, #12
 801d452:	d007      	beq.n	801d464 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 801d454:	6863      	ldr	r3, [r4, #4]
 801d456:	f003 030c 	and.w	r3, r3, #12
 801d45a:	2b08      	cmp	r3, #8
 801d45c:	d110      	bne.n	801d480 <HAL_RCC_OscConfig+0x108>
 801d45e:	6863      	ldr	r3, [r4, #4]
 801d460:	03da      	lsls	r2, r3, #15
 801d462:	d40d      	bmi.n	801d480 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801d464:	6823      	ldr	r3, [r4, #0]
 801d466:	079b      	lsls	r3, r3, #30
 801d468:	d502      	bpl.n	801d470 <HAL_RCC_OscConfig+0xf8>
 801d46a:	692b      	ldr	r3, [r5, #16]
 801d46c:	2b01      	cmp	r3, #1
 801d46e:	d1af      	bne.n	801d3d0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d470:	6823      	ldr	r3, [r4, #0]
 801d472:	696a      	ldr	r2, [r5, #20]
 801d474:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 801d478:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d47c:	6023      	str	r3, [r4, #0]
 801d47e:	e785      	b.n	801d38c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801d480:	692a      	ldr	r2, [r5, #16]
 801d482:	4b5b      	ldr	r3, [pc, #364]	@ (801d5f0 <HAL_RCC_OscConfig+0x278>)
 801d484:	b16a      	cbz	r2, 801d4a2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 801d486:	2201      	movs	r2, #1
 801d488:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801d48a:	f7fe ff8b 	bl	801c3a4 <HAL_GetTick>
 801d48e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d490:	6823      	ldr	r3, [r4, #0]
 801d492:	079f      	lsls	r7, r3, #30
 801d494:	d4ec      	bmi.n	801d470 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d496:	f7fe ff85 	bl	801c3a4 <HAL_GetTick>
 801d49a:	1b80      	subs	r0, r0, r6
 801d49c:	2802      	cmp	r0, #2
 801d49e:	d9f7      	bls.n	801d490 <HAL_RCC_OscConfig+0x118>
 801d4a0:	e7ab      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 801d4a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801d4a4:	f7fe ff7e 	bl	801c3a4 <HAL_GetTick>
 801d4a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d4aa:	6823      	ldr	r3, [r4, #0]
 801d4ac:	0798      	lsls	r0, r3, #30
 801d4ae:	f57f af6d 	bpl.w	801d38c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d4b2:	f7fe ff77 	bl	801c3a4 <HAL_GetTick>
 801d4b6:	1b80      	subs	r0, r0, r6
 801d4b8:	2802      	cmp	r0, #2
 801d4ba:	d9f6      	bls.n	801d4aa <HAL_RCC_OscConfig+0x132>
 801d4bc:	e79d      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801d4be:	69aa      	ldr	r2, [r5, #24]
 801d4c0:	4e4a      	ldr	r6, [pc, #296]	@ (801d5ec <HAL_RCC_OscConfig+0x274>)
 801d4c2:	4b4b      	ldr	r3, [pc, #300]	@ (801d5f0 <HAL_RCC_OscConfig+0x278>)
 801d4c4:	b1e2      	cbz	r2, 801d500 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 801d4c6:	2201      	movs	r2, #1
 801d4c8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 801d4cc:	f7fe ff6a 	bl	801c3a4 <HAL_GetTick>
 801d4d0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801d4d2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 801d4d4:	079b      	lsls	r3, r3, #30
 801d4d6:	d50d      	bpl.n	801d4f4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 801d4d8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801d4dc:	4b45      	ldr	r3, [pc, #276]	@ (801d5f4 <HAL_RCC_OscConfig+0x27c>)
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 801d4e4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 801d4e6:	bf00      	nop
  }
  while (Delay --);
 801d4e8:	9b01      	ldr	r3, [sp, #4]
 801d4ea:	1e5a      	subs	r2, r3, #1
 801d4ec:	9201      	str	r2, [sp, #4]
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d1f9      	bne.n	801d4e6 <HAL_RCC_OscConfig+0x16e>
 801d4f2:	e74f      	b.n	801d394 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d4f4:	f7fe ff56 	bl	801c3a4 <HAL_GetTick>
 801d4f8:	1b00      	subs	r0, r0, r4
 801d4fa:	2802      	cmp	r0, #2
 801d4fc:	d9e9      	bls.n	801d4d2 <HAL_RCC_OscConfig+0x15a>
 801d4fe:	e77c      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 801d500:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 801d504:	f7fe ff4e 	bl	801c3a4 <HAL_GetTick>
 801d508:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801d50a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 801d50c:	079f      	lsls	r7, r3, #30
 801d50e:	f57f af41 	bpl.w	801d394 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d512:	f7fe ff47 	bl	801c3a4 <HAL_GetTick>
 801d516:	1b00      	subs	r0, r0, r4
 801d518:	2802      	cmp	r0, #2
 801d51a:	d9f6      	bls.n	801d50a <HAL_RCC_OscConfig+0x192>
 801d51c:	e76d      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d51e:	4c33      	ldr	r4, [pc, #204]	@ (801d5ec <HAL_RCC_OscConfig+0x274>)
 801d520:	69e3      	ldr	r3, [r4, #28]
 801d522:	00d8      	lsls	r0, r3, #3
 801d524:	d424      	bmi.n	801d570 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 801d526:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 801d528:	69e3      	ldr	r3, [r4, #28]
 801d52a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801d52e:	61e3      	str	r3, [r4, #28]
 801d530:	69e3      	ldr	r3, [r4, #28]
 801d532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d536:	9300      	str	r3, [sp, #0]
 801d538:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801d53a:	4e2f      	ldr	r6, [pc, #188]	@ (801d5f8 <HAL_RCC_OscConfig+0x280>)
 801d53c:	6833      	ldr	r3, [r6, #0]
 801d53e:	05d9      	lsls	r1, r3, #23
 801d540:	d518      	bpl.n	801d574 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d542:	68eb      	ldr	r3, [r5, #12]
 801d544:	2b01      	cmp	r3, #1
 801d546:	d126      	bne.n	801d596 <HAL_RCC_OscConfig+0x21e>
 801d548:	6a23      	ldr	r3, [r4, #32]
 801d54a:	f043 0301 	orr.w	r3, r3, #1
 801d54e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 801d550:	f7fe ff28 	bl	801c3a4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d554:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 801d558:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d55a:	6a23      	ldr	r3, [r4, #32]
 801d55c:	079b      	lsls	r3, r3, #30
 801d55e:	d53f      	bpl.n	801d5e0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 801d560:	2f00      	cmp	r7, #0
 801d562:	f43f af1b 	beq.w	801d39c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 801d566:	69e3      	ldr	r3, [r4, #28]
 801d568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801d56c:	61e3      	str	r3, [r4, #28]
 801d56e:	e715      	b.n	801d39c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 801d570:	2700      	movs	r7, #0
 801d572:	e7e2      	b.n	801d53a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801d574:	6833      	ldr	r3, [r6, #0]
 801d576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d57a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 801d57c:	f7fe ff12 	bl	801c3a4 <HAL_GetTick>
 801d580:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801d582:	6833      	ldr	r3, [r6, #0]
 801d584:	05da      	lsls	r2, r3, #23
 801d586:	d4dc      	bmi.n	801d542 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d588:	f7fe ff0c 	bl	801c3a4 <HAL_GetTick>
 801d58c:	eba0 0008 	sub.w	r0, r0, r8
 801d590:	2864      	cmp	r0, #100	@ 0x64
 801d592:	d9f6      	bls.n	801d582 <HAL_RCC_OscConfig+0x20a>
 801d594:	e731      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d596:	b9ab      	cbnz	r3, 801d5c4 <HAL_RCC_OscConfig+0x24c>
 801d598:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d59a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d59e:	f023 0301 	bic.w	r3, r3, #1
 801d5a2:	6223      	str	r3, [r4, #32]
 801d5a4:	6a23      	ldr	r3, [r4, #32]
 801d5a6:	f023 0304 	bic.w	r3, r3, #4
 801d5aa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 801d5ac:	f7fe fefa 	bl	801c3a4 <HAL_GetTick>
 801d5b0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801d5b2:	6a23      	ldr	r3, [r4, #32]
 801d5b4:	0798      	lsls	r0, r3, #30
 801d5b6:	d5d3      	bpl.n	801d560 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d5b8:	f7fe fef4 	bl	801c3a4 <HAL_GetTick>
 801d5bc:	1b80      	subs	r0, r0, r6
 801d5be:	4540      	cmp	r0, r8
 801d5c0:	d9f7      	bls.n	801d5b2 <HAL_RCC_OscConfig+0x23a>
 801d5c2:	e71a      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d5c4:	2b05      	cmp	r3, #5
 801d5c6:	6a23      	ldr	r3, [r4, #32]
 801d5c8:	d103      	bne.n	801d5d2 <HAL_RCC_OscConfig+0x25a>
 801d5ca:	f043 0304 	orr.w	r3, r3, #4
 801d5ce:	6223      	str	r3, [r4, #32]
 801d5d0:	e7ba      	b.n	801d548 <HAL_RCC_OscConfig+0x1d0>
 801d5d2:	f023 0301 	bic.w	r3, r3, #1
 801d5d6:	6223      	str	r3, [r4, #32]
 801d5d8:	6a23      	ldr	r3, [r4, #32]
 801d5da:	f023 0304 	bic.w	r3, r3, #4
 801d5de:	e7b6      	b.n	801d54e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d5e0:	f7fe fee0 	bl	801c3a4 <HAL_GetTick>
 801d5e4:	1b80      	subs	r0, r0, r6
 801d5e6:	4540      	cmp	r0, r8
 801d5e8:	d9b7      	bls.n	801d55a <HAL_RCC_OscConfig+0x1e2>
 801d5ea:	e706      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
 801d5ec:	40021000 	.word	0x40021000
 801d5f0:	42420000 	.word	0x42420000
 801d5f4:	20000000 	.word	0x20000000
 801d5f8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801d5fc:	4c2a      	ldr	r4, [pc, #168]	@ (801d6a8 <HAL_RCC_OscConfig+0x330>)
 801d5fe:	6862      	ldr	r2, [r4, #4]
 801d600:	f002 020c 	and.w	r2, r2, #12
 801d604:	2a08      	cmp	r2, #8
 801d606:	d03e      	beq.n	801d686 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d608:	2200      	movs	r2, #0
 801d60a:	2b02      	cmp	r3, #2
 801d60c:	4b27      	ldr	r3, [pc, #156]	@ (801d6ac <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 801d60e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d610:	d12c      	bne.n	801d66c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 801d612:	f7fe fec7 	bl	801c3a4 <HAL_GetTick>
 801d616:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801d618:	6823      	ldr	r3, [r4, #0]
 801d61a:	0199      	lsls	r1, r3, #6
 801d61c:	d420      	bmi.n	801d660 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 801d61e:	6a2b      	ldr	r3, [r5, #32]
 801d620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d624:	d105      	bne.n	801d632 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 801d626:	6862      	ldr	r2, [r4, #4]
 801d628:	68a9      	ldr	r1, [r5, #8]
 801d62a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801d62e:	430a      	orrs	r2, r1
 801d630:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d632:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801d634:	6862      	ldr	r2, [r4, #4]
 801d636:	430b      	orrs	r3, r1
 801d638:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 801d63c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 801d63e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d640:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 801d642:	4b1a      	ldr	r3, [pc, #104]	@ (801d6ac <HAL_RCC_OscConfig+0x334>)
 801d644:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801d646:	f7fe fead 	bl	801c3a4 <HAL_GetTick>
 801d64a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801d64c:	6823      	ldr	r3, [r4, #0]
 801d64e:	019a      	lsls	r2, r3, #6
 801d650:	f53f aea8 	bmi.w	801d3a4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d654:	f7fe fea6 	bl	801c3a4 <HAL_GetTick>
 801d658:	1b40      	subs	r0, r0, r5
 801d65a:	2802      	cmp	r0, #2
 801d65c:	d9f6      	bls.n	801d64c <HAL_RCC_OscConfig+0x2d4>
 801d65e:	e6cc      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d660:	f7fe fea0 	bl	801c3a4 <HAL_GetTick>
 801d664:	1b80      	subs	r0, r0, r6
 801d666:	2802      	cmp	r0, #2
 801d668:	d9d6      	bls.n	801d618 <HAL_RCC_OscConfig+0x2a0>
 801d66a:	e6c6      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 801d66c:	f7fe fe9a 	bl	801c3a4 <HAL_GetTick>
 801d670:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801d672:	6823      	ldr	r3, [r4, #0]
 801d674:	019b      	lsls	r3, r3, #6
 801d676:	f57f ae95 	bpl.w	801d3a4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d67a:	f7fe fe93 	bl	801c3a4 <HAL_GetTick>
 801d67e:	1b40      	subs	r0, r0, r5
 801d680:	2802      	cmp	r0, #2
 801d682:	d9f6      	bls.n	801d672 <HAL_RCC_OscConfig+0x2fa>
 801d684:	e6b9      	b.n	801d3fa <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801d686:	2b01      	cmp	r3, #1
 801d688:	f43f aea2 	beq.w	801d3d0 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 801d68c:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d68e:	6a2b      	ldr	r3, [r5, #32]
 801d690:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 801d694:	429a      	cmp	r2, r3
 801d696:	f47f ae9b 	bne.w	801d3d0 <HAL_RCC_OscConfig+0x58>
 801d69a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 801d69c:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d6a0:	1ac0      	subs	r0, r0, r3
 801d6a2:	bf18      	it	ne
 801d6a4:	2001      	movne	r0, #1
 801d6a6:	e6a9      	b.n	801d3fc <HAL_RCC_OscConfig+0x84>
 801d6a8:	40021000 	.word	0x40021000
 801d6ac:	42420000 	.word	0x42420000

0801d6b0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 801d6b0:	4a0d      	ldr	r2, [pc, #52]	@ (801d6e8 <HAL_RCC_GetSysClockFreq+0x38>)
 801d6b2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 801d6b4:	f003 010c 	and.w	r1, r3, #12
 801d6b8:	2908      	cmp	r1, #8
 801d6ba:	d112      	bne.n	801d6e2 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 801d6bc:	480b      	ldr	r0, [pc, #44]	@ (801d6ec <HAL_RCC_GetSysClockFreq+0x3c>)
 801d6be:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 801d6c2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 801d6c4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 801d6c6:	d509      	bpl.n	801d6dc <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 801d6c8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 801d6ca:	4a09      	ldr	r2, [pc, #36]	@ (801d6f0 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 801d6cc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 801d6d0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 801d6d2:	4a08      	ldr	r2, [pc, #32]	@ (801d6f4 <HAL_RCC_GetSysClockFreq+0x44>)
 801d6d4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 801d6d6:	fbb0 f0f3 	udiv	r0, r0, r3
 801d6da:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 801d6dc:	4b06      	ldr	r3, [pc, #24]	@ (801d6f8 <HAL_RCC_GetSysClockFreq+0x48>)
 801d6de:	4358      	muls	r0, r3
 801d6e0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 801d6e2:	4803      	ldr	r0, [pc, #12]	@ (801d6f0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 801d6e4:	4770      	bx	lr
 801d6e6:	bf00      	nop
 801d6e8:	40021000 	.word	0x40021000
 801d6ec:	0801f23e 	.word	0x0801f23e
 801d6f0:	007a1200 	.word	0x007a1200
 801d6f4:	0801f23c 	.word	0x0801f23c
 801d6f8:	003d0900 	.word	0x003d0900

0801d6fc <HAL_RCC_ClockConfig>:
{
 801d6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d700:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 801d702:	4604      	mov	r4, r0
 801d704:	b910      	cbnz	r0, 801d70c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 801d706:	2001      	movs	r0, #1
}
 801d708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d70c:	4a44      	ldr	r2, [pc, #272]	@ (801d820 <HAL_RCC_ClockConfig+0x124>)
 801d70e:	6813      	ldr	r3, [r2, #0]
 801d710:	f003 0307 	and.w	r3, r3, #7
 801d714:	428b      	cmp	r3, r1
 801d716:	d328      	bcc.n	801d76a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d718:	6821      	ldr	r1, [r4, #0]
 801d71a:	078e      	lsls	r6, r1, #30
 801d71c:	d430      	bmi.n	801d780 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d71e:	07ca      	lsls	r2, r1, #31
 801d720:	d443      	bmi.n	801d7aa <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d722:	4a3f      	ldr	r2, [pc, #252]	@ (801d820 <HAL_RCC_ClockConfig+0x124>)
 801d724:	6813      	ldr	r3, [r2, #0]
 801d726:	f003 0307 	and.w	r3, r3, #7
 801d72a:	42ab      	cmp	r3, r5
 801d72c:	d865      	bhi.n	801d7fa <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d72e:	6822      	ldr	r2, [r4, #0]
 801d730:	4d3c      	ldr	r5, [pc, #240]	@ (801d824 <HAL_RCC_ClockConfig+0x128>)
 801d732:	f012 0f04 	tst.w	r2, #4
 801d736:	d16c      	bne.n	801d812 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d738:	0713      	lsls	r3, r2, #28
 801d73a:	d506      	bpl.n	801d74a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801d73c:	686b      	ldr	r3, [r5, #4]
 801d73e:	6922      	ldr	r2, [r4, #16]
 801d740:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 801d744:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d748:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801d74a:	f7ff ffb1 	bl	801d6b0 <HAL_RCC_GetSysClockFreq>
 801d74e:	686b      	ldr	r3, [r5, #4]
 801d750:	4a35      	ldr	r2, [pc, #212]	@ (801d828 <HAL_RCC_ClockConfig+0x12c>)
 801d752:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801d756:	5cd3      	ldrb	r3, [r2, r3]
 801d758:	40d8      	lsrs	r0, r3
 801d75a:	4b34      	ldr	r3, [pc, #208]	@ (801d82c <HAL_RCC_ClockConfig+0x130>)
 801d75c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 801d75e:	4b34      	ldr	r3, [pc, #208]	@ (801d830 <HAL_RCC_ClockConfig+0x134>)
 801d760:	6818      	ldr	r0, [r3, #0]
 801d762:	f7fe fddd 	bl	801c320 <HAL_InitTick>
  return HAL_OK;
 801d766:	2000      	movs	r0, #0
 801d768:	e7ce      	b.n	801d708 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d76a:	6813      	ldr	r3, [r2, #0]
 801d76c:	f023 0307 	bic.w	r3, r3, #7
 801d770:	430b      	orrs	r3, r1
 801d772:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d774:	6813      	ldr	r3, [r2, #0]
 801d776:	f003 0307 	and.w	r3, r3, #7
 801d77a:	428b      	cmp	r3, r1
 801d77c:	d1c3      	bne.n	801d706 <HAL_RCC_ClockConfig+0xa>
 801d77e:	e7cb      	b.n	801d718 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d780:	4b28      	ldr	r3, [pc, #160]	@ (801d824 <HAL_RCC_ClockConfig+0x128>)
 801d782:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801d786:	bf1e      	ittt	ne
 801d788:	685a      	ldrne	r2, [r3, #4]
 801d78a:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 801d78e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d790:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801d792:	bf42      	ittt	mi
 801d794:	685a      	ldrmi	r2, [r3, #4]
 801d796:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 801d79a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d79c:	685a      	ldr	r2, [r3, #4]
 801d79e:	68a0      	ldr	r0, [r4, #8]
 801d7a0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 801d7a4:	4302      	orrs	r2, r0
 801d7a6:	605a      	str	r2, [r3, #4]
 801d7a8:	e7b9      	b.n	801d71e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d7aa:	6862      	ldr	r2, [r4, #4]
 801d7ac:	4e1d      	ldr	r6, [pc, #116]	@ (801d824 <HAL_RCC_ClockConfig+0x128>)
 801d7ae:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d7b0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d7b2:	d11a      	bne.n	801d7ea <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d7b4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d7b8:	d0a5      	beq.n	801d706 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801d7ba:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d7bc:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801d7c0:	f023 0303 	bic.w	r3, r3, #3
 801d7c4:	4313      	orrs	r3, r2
 801d7c6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 801d7c8:	f7fe fdec 	bl	801c3a4 <HAL_GetTick>
 801d7cc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d7ce:	6873      	ldr	r3, [r6, #4]
 801d7d0:	6862      	ldr	r2, [r4, #4]
 801d7d2:	f003 030c 	and.w	r3, r3, #12
 801d7d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801d7da:	d0a2      	beq.n	801d722 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d7dc:	f7fe fde2 	bl	801c3a4 <HAL_GetTick>
 801d7e0:	1bc0      	subs	r0, r0, r7
 801d7e2:	4540      	cmp	r0, r8
 801d7e4:	d9f3      	bls.n	801d7ce <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 801d7e6:	2003      	movs	r0, #3
 801d7e8:	e78e      	b.n	801d708 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d7ea:	2a02      	cmp	r2, #2
 801d7ec:	d102      	bne.n	801d7f4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d7ee:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801d7f2:	e7e1      	b.n	801d7b8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d7f4:	f013 0f02 	tst.w	r3, #2
 801d7f8:	e7de      	b.n	801d7b8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d7fa:	6813      	ldr	r3, [r2, #0]
 801d7fc:	f023 0307 	bic.w	r3, r3, #7
 801d800:	432b      	orrs	r3, r5
 801d802:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d804:	6813      	ldr	r3, [r2, #0]
 801d806:	f003 0307 	and.w	r3, r3, #7
 801d80a:	42ab      	cmp	r3, r5
 801d80c:	f47f af7b 	bne.w	801d706 <HAL_RCC_ClockConfig+0xa>
 801d810:	e78d      	b.n	801d72e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d812:	686b      	ldr	r3, [r5, #4]
 801d814:	68e1      	ldr	r1, [r4, #12]
 801d816:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 801d81a:	430b      	orrs	r3, r1
 801d81c:	606b      	str	r3, [r5, #4]
 801d81e:	e78b      	b.n	801d738 <HAL_RCC_ClockConfig+0x3c>
 801d820:	40022000 	.word	0x40022000
 801d824:	40021000 	.word	0x40021000
 801d828:	0801f22c 	.word	0x0801f22c
 801d82c:	20000000 	.word	0x20000000
 801d830:	20000008 	.word	0x20000008

0801d834 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801d834:	6803      	ldr	r3, [r0, #0]
{
 801d836:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d83a:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801d83c:	07d8      	lsls	r0, r3, #31
 801d83e:	d521      	bpl.n	801d884 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d840:	4c36      	ldr	r4, [pc, #216]	@ (801d91c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d842:	69e3      	ldr	r3, [r4, #28]
 801d844:	00d9      	lsls	r1, r3, #3
 801d846:	d42b      	bmi.n	801d8a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 801d848:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 801d84a:	69e3      	ldr	r3, [r4, #28]
 801d84c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801d850:	61e3      	str	r3, [r4, #28]
 801d852:	69e3      	ldr	r3, [r4, #28]
 801d854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d858:	9301      	str	r3, [sp, #4]
 801d85a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801d85c:	4f30      	ldr	r7, [pc, #192]	@ (801d920 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 801d85e:	683b      	ldr	r3, [r7, #0]
 801d860:	05da      	lsls	r2, r3, #23
 801d862:	d51f      	bpl.n	801d8a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801d864:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801d866:	686a      	ldr	r2, [r5, #4]
 801d868:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 801d86c:	d12e      	bne.n	801d8cc <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d86e:	6a23      	ldr	r3, [r4, #32]
 801d870:	686a      	ldr	r2, [r5, #4]
 801d872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d876:	4313      	orrs	r3, r2
 801d878:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 801d87a:	b11e      	cbz	r6, 801d884 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d87c:	69e3      	ldr	r3, [r4, #28]
 801d87e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801d882:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d884:	682a      	ldr	r2, [r5, #0]
 801d886:	0791      	lsls	r1, r2, #30
 801d888:	d506      	bpl.n	801d898 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d88a:	4924      	ldr	r1, [pc, #144]	@ (801d91c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d88c:	68a8      	ldr	r0, [r5, #8]
 801d88e:	684b      	ldr	r3, [r1, #4]
 801d890:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801d894:	4303      	orrs	r3, r0
 801d896:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801d898:	06d3      	lsls	r3, r2, #27
 801d89a:	d436      	bmi.n	801d90a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 801d89c:	2000      	movs	r0, #0
 801d89e:	e012      	b.n	801d8c6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 801d8a0:	2600      	movs	r6, #0
 801d8a2:	e7db      	b.n	801d85c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801d8a4:	683b      	ldr	r3, [r7, #0]
 801d8a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d8aa:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 801d8ac:	f7fe fd7a 	bl	801c3a4 <HAL_GetTick>
 801d8b0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801d8b2:	683b      	ldr	r3, [r7, #0]
 801d8b4:	05db      	lsls	r3, r3, #23
 801d8b6:	d4d5      	bmi.n	801d864 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d8b8:	f7fe fd74 	bl	801c3a4 <HAL_GetTick>
 801d8bc:	eba0 0008 	sub.w	r0, r0, r8
 801d8c0:	2864      	cmp	r0, #100	@ 0x64
 801d8c2:	d9f6      	bls.n	801d8b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 801d8c4:	2003      	movs	r0, #3
}
 801d8c6:	b002      	add	sp, #8
 801d8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801d8cc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 801d8d0:	429a      	cmp	r2, r3
 801d8d2:	d0cc      	beq.n	801d86e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 801d8d4:	2001      	movs	r0, #1
 801d8d6:	4a13      	ldr	r2, [pc, #76]	@ (801d924 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d8d8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 801d8da:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 801d8de:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d8e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 801d8e4:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 801d8e6:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 801d8ea:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 801d8ec:	d5bf      	bpl.n	801d86e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 801d8ee:	f7fe fd59 	bl	801c3a4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d8f2:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 801d8f6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d8f8:	6a23      	ldr	r3, [r4, #32]
 801d8fa:	0798      	lsls	r0, r3, #30
 801d8fc:	d4b7      	bmi.n	801d86e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d8fe:	f7fe fd51 	bl	801c3a4 <HAL_GetTick>
 801d902:	1bc0      	subs	r0, r0, r7
 801d904:	4540      	cmp	r0, r8
 801d906:	d9f7      	bls.n	801d8f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 801d908:	e7dc      	b.n	801d8c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d90a:	4a04      	ldr	r2, [pc, #16]	@ (801d91c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d90c:	68e9      	ldr	r1, [r5, #12]
 801d90e:	6853      	ldr	r3, [r2, #4]
 801d910:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 801d914:	430b      	orrs	r3, r1
 801d916:	6053      	str	r3, [r2, #4]
 801d918:	e7c0      	b.n	801d89c <HAL_RCCEx_PeriphCLKConfig+0x68>
 801d91a:	bf00      	nop
 801d91c:	40021000 	.word	0x40021000
 801d920:	40007000 	.word	0x40007000
 801d924:	42420000 	.word	0x42420000

0801d928 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801d928:	b084      	sub	sp, #16
 801d92a:	a804      	add	r0, sp, #16
 801d92c:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 801d930:	2000      	movs	r0, #0
 801d932:	b004      	add	sp, #16
 801d934:	4770      	bx	lr

0801d936 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801d936:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801d938:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 801d93c:	2000      	movs	r0, #0
 801d93e:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 801d942:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 801d946:	4770      	bx	lr

0801d948 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801d948:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801d94c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801d950:	045b      	lsls	r3, r3, #17
 801d952:	0c5b      	lsrs	r3, r3, #17
 801d954:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 801d958:	2000      	movs	r0, #0
 801d95a:	4770      	bx	lr

0801d95c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 801d95c:	2000      	movs	r0, #0
 801d95e:	4770      	bx	lr

0801d960 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801d960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d962:	4604      	mov	r4, r0
 801d964:	a804      	add	r0, sp, #16
 801d966:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801d96a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801d96c:	2301      	movs	r3, #1
 801d96e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 801d972:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801d976:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801d97a:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 801d97e:	b004      	add	sp, #16
 801d980:	bd10      	pop	{r4, pc}
	...

0801d984 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d984:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801d986:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801d988:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801d98a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 801d98e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801d990:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 801d994:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 801d998:	0424      	lsls	r4, r4, #16
 801d99a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 801d99c:	2d03      	cmp	r5, #3
 801d99e:	d803      	bhi.n	801d9a8 <USB_ActivateEndpoint+0x24>
 801d9a0:	e8df f005 	tbb	[pc, r5]
 801d9a4:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 801d9a8:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801d9aa:	f248 0680 	movw	r6, #32896	@ 0x8080
 801d9ae:	4334      	orrs	r4, r6
 801d9b0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801d9b4:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 801d9b8:	4f9f      	ldr	r7, [pc, #636]	@ (801dc38 <USB_ActivateEndpoint+0x2b4>)
 801d9ba:	b2a4      	uxth	r4, r4
 801d9bc:	403c      	ands	r4, r7
 801d9be:	4314      	orrs	r4, r2
 801d9c0:	4334      	orrs	r4, r6
 801d9c2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 801d9c6:	7b0c      	ldrb	r4, [r1, #12]
 801d9c8:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 801d9cc:	2c00      	cmp	r4, #0
 801d9ce:	f040 808d 	bne.w	801daec <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801d9d2:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 801d9d4:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801d9d6:	0864      	lsrs	r4, r4, #1
 801d9d8:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 801d9da:	b37e      	cbz	r6, 801da3c <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801d9dc:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 801d9e0:	b289      	uxth	r1, r1
 801d9e2:	4461      	add	r1, ip
 801d9e4:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d9e8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801d9ec:	0649      	lsls	r1, r1, #25
 801d9ee:	d509      	bpl.n	801da04 <USB_ActivateEndpoint+0x80>
 801d9f0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801d9f4:	b289      	uxth	r1, r1
 801d9f6:	4039      	ands	r1, r7
 801d9f8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 801d9fc:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 801da00:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801da04:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801da08:	4c8c      	ldr	r4, [pc, #560]	@ (801dc3c <USB_ActivateEndpoint+0x2b8>)
 801da0a:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 801da0c:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801da0e:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 801da12:	d001      	beq.n	801da18 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801da14:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801da18:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 801da1c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 801da20:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 801da24:	e04c      	b.n	801dac0 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 801da26:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 801da28:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 801da2c:	e7bd      	b.n	801d9aa <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 801da2e:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 801da32:	2000      	movs	r0, #0
 801da34:	e7b9      	b.n	801d9aa <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801da36:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 801da3a:	e7fa      	b.n	801da32 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801da3c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801da40:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801da42:	b2ad      	uxth	r5, r5
 801da44:	4465      	add	r5, ip
 801da46:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801da4a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 801da4e:	293e      	cmp	r1, #62	@ 0x3e
 801da50:	b2a4      	uxth	r4, r4
 801da52:	4464      	add	r4, ip
 801da54:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 801da58:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801da5c:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 801da60:	d92f      	bls.n	801dac2 <USB_ActivateEndpoint+0x13e>
 801da62:	094d      	lsrs	r5, r1, #5
 801da64:	06ce      	lsls	r6, r1, #27
 801da66:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 801da6a:	bf08      	it	eq
 801da6c:	f105 35ff 	addeq.w	r5, r5, #4294967295	@ 0xffffffff
 801da70:	b289      	uxth	r1, r1
 801da72:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 801da76:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 801da7a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801da7e:	b289      	uxth	r1, r1
 801da80:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801da84:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801da88:	044f      	lsls	r7, r1, #17
 801da8a:	d50d      	bpl.n	801daa8 <USB_ActivateEndpoint+0x124>
 801da8c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801da90:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 801da94:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 801da98:	0409      	lsls	r1, r1, #16
 801da9a:	0c09      	lsrs	r1, r1, #16
 801da9c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 801daa0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 801daa4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 801daa8:	4c65      	ldr	r4, [pc, #404]	@ (801dc40 <USB_ActivateEndpoint+0x2bc>)
 801daaa:	b9c2      	cbnz	r2, 801dade <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801daac:	881a      	ldrh	r2, [r3, #0]
 801daae:	b292      	uxth	r2, r2
 801dab0:	4022      	ands	r2, r4
 801dab2:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 801dab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801daba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801dabe:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 801dac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801dac2:	b911      	cbnz	r1, 801daca <USB_ActivateEndpoint+0x146>
 801dac4:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 801dac8:	e7d5      	b.n	801da76 <USB_ActivateEndpoint+0xf2>
 801daca:	084d      	lsrs	r5, r1, #1
 801dacc:	07c9      	lsls	r1, r1, #31
 801dace:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 801dad2:	bf48      	it	mi
 801dad4:	3501      	addmi	r5, #1
 801dad6:	b289      	uxth	r1, r1
 801dad8:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 801dadc:	e7cf      	b.n	801da7e <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801dade:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801dae2:	b289      	uxth	r1, r1
 801dae4:	4021      	ands	r1, r4
 801dae6:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 801daea:	e795      	b.n	801da18 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 801daec:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801daee:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 801daf2:	d15b      	bne.n	801dbac <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801daf4:	b2a4      	uxth	r4, r4
 801daf6:	403c      	ands	r4, r7
 801daf8:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 801dafc:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 801db00:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801db04:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 801db08:	890e      	ldrh	r6, [r1, #8]
 801db0a:	b2a4      	uxth	r4, r4
 801db0c:	0876      	lsrs	r6, r6, #1
 801db0e:	4464      	add	r4, ip
 801db10:	0076      	lsls	r6, r6, #1
 801db12:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 801db16:	894e      	ldrh	r6, [r1, #10]
 801db18:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 801db1c:	0876      	lsrs	r6, r6, #1
 801db1e:	b2a4      	uxth	r4, r4
 801db20:	4464      	add	r4, ip
 801db22:	0076      	lsls	r6, r6, #1
 801db24:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 801db28:	7849      	ldrb	r1, [r1, #1]
 801db2a:	2900      	cmp	r1, #0
 801db2c:	d148      	bne.n	801dbc0 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801db2e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801db32:	044e      	lsls	r6, r1, #17
 801db34:	d50d      	bpl.n	801db52 <USB_ActivateEndpoint+0x1ce>
 801db36:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801db3a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 801db3e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 801db42:	0409      	lsls	r1, r1, #16
 801db44:	0c09      	lsrs	r1, r1, #16
 801db46:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 801db4a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 801db4e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801db52:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801db56:	064d      	lsls	r5, r1, #25
 801db58:	d50d      	bpl.n	801db76 <USB_ActivateEndpoint+0x1f2>
 801db5a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801db5e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 801db62:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 801db66:	0409      	lsls	r1, r1, #16
 801db68:	0c09      	lsrs	r1, r1, #16
 801db6a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 801db6e:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 801db72:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801db76:	f248 0480 	movw	r4, #32896	@ 0x8080
 801db7a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801db7e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 801db82:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 801db86:	0409      	lsls	r1, r1, #16
 801db88:	0c09      	lsrs	r1, r1, #16
 801db8a:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 801db8e:	4321      	orrs	r1, r4
 801db90:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801db94:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801db98:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 801db9c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 801dba0:	0409      	lsls	r1, r1, #16
 801dba2:	0c09      	lsrs	r1, r1, #16
 801dba4:	430c      	orrs	r4, r1
 801dba6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 801dbaa:	e789      	b.n	801dac0 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801dbac:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 801dbb0:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 801dbb4:	0424      	lsls	r4, r4, #16
 801dbb6:	0c24      	lsrs	r4, r4, #16
 801dbb8:	4326      	orrs	r6, r4
 801dbba:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 801dbbe:	e7a1      	b.n	801db04 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801dbc0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801dbc4:	044c      	lsls	r4, r1, #17
 801dbc6:	d50d      	bpl.n	801dbe4 <USB_ActivateEndpoint+0x260>
 801dbc8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801dbcc:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 801dbd0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 801dbd4:	0409      	lsls	r1, r1, #16
 801dbd6:	0c09      	lsrs	r1, r1, #16
 801dbd8:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 801dbdc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 801dbe0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801dbe4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801dbe8:	0649      	lsls	r1, r1, #25
 801dbea:	d50d      	bpl.n	801dc08 <USB_ActivateEndpoint+0x284>
 801dbec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801dbf0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 801dbf4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 801dbf8:	0409      	lsls	r1, r1, #16
 801dbfa:	0c09      	lsrs	r1, r1, #16
 801dbfc:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 801dc00:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 801dc04:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801dc08:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801dc0c:	4c0b      	ldr	r4, [pc, #44]	@ (801dc3c <USB_ActivateEndpoint+0x2b8>)
 801dc0e:	b289      	uxth	r1, r1
 801dc10:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 801dc12:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801dc14:	bf18      	it	ne
 801dc16:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801dc1a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 801dc1e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 801dc22:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801dc26:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 801dc2a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 801dc2e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 801dc32:	0409      	lsls	r1, r1, #16
 801dc34:	0c09      	lsrs	r1, r1, #16
 801dc36:	e6ef      	b.n	801da18 <USB_ActivateEndpoint+0x94>
 801dc38:	ffff8f8f 	.word	0xffff8f8f
 801dc3c:	ffff8fbf 	.word	0xffff8fbf
 801dc40:	ffffbf8f 	.word	0xffffbf8f

0801dc44 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 801dc44:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801dc46:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 801dc48:	b18b      	cbz	r3, 801dc6e <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801dc4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801dc4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801dc52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dc56:	041b      	lsls	r3, r3, #16
 801dc58:	0c1b      	lsrs	r3, r3, #16
 801dc5a:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801dc5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801dc62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dc66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 801dc6a:	2000      	movs	r0, #0
 801dc6c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801dc6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801dc72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801dc76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801dc7a:	041b      	lsls	r3, r3, #16
 801dc7c:	0c1b      	lsrs	r3, r3, #16
 801dc7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801dc82:	e7ec      	b.n	801dc5e <USB_EPSetStall+0x1a>

0801dc84 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 801dc84:	7b0b      	ldrb	r3, [r1, #12]
 801dc86:	bb3b      	cbnz	r3, 801dcd8 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 801dc88:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801dc8a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 801dc8c:	b333      	cbz	r3, 801dcdc <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801dc8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801dc92:	065b      	lsls	r3, r3, #25
 801dc94:	d50d      	bpl.n	801dcb2 <USB_EPClearStall+0x2e>
 801dc96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801dc9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801dc9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801dca2:	041b      	lsls	r3, r3, #16
 801dca4:	0c1b      	lsrs	r3, r3, #16
 801dca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801dcaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801dcae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 801dcb2:	78cb      	ldrb	r3, [r1, #3]
 801dcb4:	2b01      	cmp	r3, #1
 801dcb6:	d00f      	beq.n	801dcd8 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801dcb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801dcbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801dcc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dcc4:	041b      	lsls	r3, r3, #16
 801dcc6:	0c1b      	lsrs	r3, r3, #16
 801dcc8:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801dccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801dcd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dcd4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 801dcd8:	2000      	movs	r0, #0
 801dcda:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801dcdc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801dce0:	045b      	lsls	r3, r3, #17
 801dce2:	d50d      	bpl.n	801dd00 <USB_EPClearStall+0x7c>
 801dce4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801dce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801dcec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801dcf0:	041b      	lsls	r3, r3, #16
 801dcf2:	0c1b      	lsrs	r3, r3, #16
 801dcf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801dcf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dcfc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801dd00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 801dd04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801dd08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801dd0c:	041b      	lsls	r3, r3, #16
 801dd0e:	0c1b      	lsrs	r3, r3, #16
 801dd10:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 801dd14:	e7da      	b.n	801dccc <USB_EPClearStall+0x48>

0801dd16 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 801dd16:	b911      	cbnz	r1, 801dd1e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801dd18:	2380      	movs	r3, #128	@ 0x80
 801dd1a:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 801dd1e:	2000      	movs	r0, #0
 801dd20:	4770      	bx	lr

0801dd22 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 801dd22:	2000      	movs	r0, #0
 801dd24:	4770      	bx	lr

0801dd26 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 801dd26:	2000      	movs	r0, #0
 801dd28:	4770      	bx	lr

0801dd2a <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801dd2a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 801dd2e:	b280      	uxth	r0, r0
 801dd30:	4770      	bx	lr

0801dd32 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 801dd32:	2000      	movs	r0, #0
 801dd34:	4770      	bx	lr

0801dd36 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801dd36:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801dd3a:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801dd3c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801dd40:	085b      	lsrs	r3, r3, #1
 801dd42:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 801dd46:	4283      	cmp	r3, r0
 801dd48:	d100      	bne.n	801dd4c <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 801dd4a:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 801dd4c:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 801dd50:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 801dd54:	e7f7      	b.n	801dd46 <USB_WritePMA+0x10>

0801dd56 <USB_EPStartXfer>:
{
 801dd56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 801dd5a:	784b      	ldrb	r3, [r1, #1]
{
 801dd5c:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 801dd5e:	2b01      	cmp	r3, #1
{
 801dd60:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 801dd62:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 801dd64:	f040 8118 	bne.w	801df98 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 801dd68:	f8d1 9010 	ldr.w	r9, [r1, #16]
 801dd6c:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801dd6e:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 801dd70:	454f      	cmp	r7, r9
 801dd72:	bf28      	it	cs
 801dd74:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 801dd76:	bb0a      	cbnz	r2, 801ddbc <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801dd78:	b2bf      	uxth	r7, r7
 801dd7a:	88ea      	ldrh	r2, [r5, #6]
 801dd7c:	463b      	mov	r3, r7
 801dd7e:	f7ff ffda 	bl	801dd36 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801dd82:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 801dd86:	7829      	ldrb	r1, [r5, #0]
 801dd88:	b280      	uxth	r0, r0
 801dd8a:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 801dd8e:	0109      	lsls	r1, r1, #4
 801dd90:	4402      	add	r2, r0
 801dd92:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801dd94:	782a      	ldrb	r2, [r5, #0]
 801dd96:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 801dd9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801dd9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dda2:	041b      	lsls	r3, r3, #16
 801dda4:	0c1b      	lsrs	r3, r3, #16
 801dda6:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 801ddaa:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801ddac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801ddb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ddb4:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 801ddb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 801ddbc:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801ddbe:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 801ddc2:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 801ddc4:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ddc6:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 801ddca:	f040 80d0 	bne.w	801df6e <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 801ddce:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801ddd0:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 801ddd4:	f080 80b4 	bcs.w	801df40 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801ddd8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 801dddc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801dde0:	0412      	lsls	r2, r2, #16
 801dde2:	0c12      	lsrs	r2, r2, #16
 801dde4:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 801dde8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801ddec:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ddf0:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ddf4:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 801ddf8:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ddfa:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 801ddfe:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 801de00:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801de04:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801de06:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801de0a:	d04e      	beq.n	801deaa <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801de0c:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 801de10:	4472      	add	r2, lr
 801de12:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801de16:	896a      	ldrh	r2, [r5, #10]
 801de18:	f7ff ff8d 	bl	801dd36 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 801de1c:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 801de1e:	bf36      	itet	cc
 801de20:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 801de22:	2300      	movcs	r3, #0
 801de24:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801de26:	786a      	ldrb	r2, [r5, #1]
 801de28:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 801de2a:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801de2e:	b2b3      	uxth	r3, r6
 801de30:	bb7a      	cbnz	r2, 801de92 <USB_EPStartXfer+0x13c>
 801de32:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 801de36:	7828      	ldrb	r0, [r5, #0]
 801de38:	b292      	uxth	r2, r2
 801de3a:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 801de3e:	0100      	lsls	r0, r0, #4
 801de40:	4411      	add	r1, r2
 801de42:	5a42      	ldrh	r2, [r0, r1]
 801de44:	2e3e      	cmp	r6, #62	@ 0x3e
 801de46:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801de4a:	5242      	strh	r2, [r0, r1]
 801de4c:	d914      	bls.n	801de78 <USB_EPStartXfer+0x122>
 801de4e:	5a42      	ldrh	r2, [r0, r1]
 801de50:	0977      	lsrs	r7, r6, #5
 801de52:	06f6      	lsls	r6, r6, #27
 801de54:	bf08      	it	eq
 801de56:	f107 37ff 	addeq.w	r7, r7, #4294967295	@ 0xffffffff
 801de5a:	b292      	uxth	r2, r2
 801de5c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 801de60:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801de64:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801de68:	b292      	uxth	r2, r2
 801de6a:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801de6c:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801de6e:	4651      	mov	r1, sl
 801de70:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801de72:	f7ff ff60 	bl	801dd36 <USB_WritePMA>
 801de76:	e78d      	b.n	801dd94 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801de78:	b90e      	cbnz	r6, 801de7e <USB_EPStartXfer+0x128>
 801de7a:	5a42      	ldrh	r2, [r0, r1]
 801de7c:	e7f0      	b.n	801de60 <USB_EPStartXfer+0x10a>
 801de7e:	07f2      	lsls	r2, r6, #31
 801de80:	5a42      	ldrh	r2, [r0, r1]
 801de82:	ea4f 0756 	mov.w	r7, r6, lsr #1
 801de86:	bf48      	it	mi
 801de88:	3701      	addmi	r7, #1
 801de8a:	b292      	uxth	r2, r2
 801de8c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 801de90:	e7ea      	b.n	801de68 <USB_EPStartXfer+0x112>
 801de92:	2a01      	cmp	r2, #1
 801de94:	d1ea      	bne.n	801de6c <USB_EPStartXfer+0x116>
 801de96:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 801de9a:	7829      	ldrb	r1, [r5, #0]
 801de9c:	b280      	uxth	r0, r0
 801de9e:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 801dea2:	0109      	lsls	r1, r1, #4
 801dea4:	4402      	add	r2, r0
 801dea6:	528b      	strh	r3, [r1, r2]
 801dea8:	e7e0      	b.n	801de6c <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801deaa:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 801deae:	4472      	add	r2, lr
 801deb0:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801deb4:	892a      	ldrh	r2, [r5, #8]
 801deb6:	f7ff ff3e 	bl	801dd36 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 801deba:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 801debc:	bf36      	itet	cc
 801debe:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 801dec0:	4643      	movcs	r3, r8
 801dec2:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801dec4:	786a      	ldrb	r2, [r5, #1]
 801dec6:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 801dec8:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801decc:	b2b3      	uxth	r3, r6
 801dece:	bb5a      	cbnz	r2, 801df28 <USB_EPStartXfer+0x1d2>
 801ded0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 801ded4:	7828      	ldrb	r0, [r5, #0]
 801ded6:	b292      	uxth	r2, r2
 801ded8:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 801dedc:	0100      	lsls	r0, r0, #4
 801dede:	4411      	add	r1, r2
 801dee0:	5a42      	ldrh	r2, [r0, r1]
 801dee2:	2e3e      	cmp	r6, #62	@ 0x3e
 801dee4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801dee8:	5242      	strh	r2, [r0, r1]
 801deea:	d910      	bls.n	801df0e <USB_EPStartXfer+0x1b8>
 801deec:	5a42      	ldrh	r2, [r0, r1]
 801deee:	0977      	lsrs	r7, r6, #5
 801def0:	06f6      	lsls	r6, r6, #27
 801def2:	bf08      	it	eq
 801def4:	f107 37ff 	addeq.w	r7, r7, #4294967295	@ 0xffffffff
 801def8:	b292      	uxth	r2, r2
 801defa:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 801defe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801df02:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801df06:	b292      	uxth	r2, r2
 801df08:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801df0a:	896a      	ldrh	r2, [r5, #10]
 801df0c:	e7af      	b.n	801de6e <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801df0e:	b90e      	cbnz	r6, 801df14 <USB_EPStartXfer+0x1be>
 801df10:	5a42      	ldrh	r2, [r0, r1]
 801df12:	e7f4      	b.n	801defe <USB_EPStartXfer+0x1a8>
 801df14:	07f2      	lsls	r2, r6, #31
 801df16:	5a42      	ldrh	r2, [r0, r1]
 801df18:	ea4f 0756 	mov.w	r7, r6, lsr #1
 801df1c:	bf48      	it	mi
 801df1e:	3701      	addmi	r7, #1
 801df20:	b292      	uxth	r2, r2
 801df22:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 801df26:	e7ee      	b.n	801df06 <USB_EPStartXfer+0x1b0>
 801df28:	2a01      	cmp	r2, #1
 801df2a:	d1ee      	bne.n	801df0a <USB_EPStartXfer+0x1b4>
 801df2c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 801df30:	7829      	ldrb	r1, [r5, #0]
 801df32:	b280      	uxth	r0, r0
 801df34:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 801df38:	0109      	lsls	r1, r1, #4
 801df3a:	4402      	add	r2, r0
 801df3c:	528b      	strh	r3, [r1, r2]
 801df3e:	e7e4      	b.n	801df0a <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801df40:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 801df44:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 801df48:	0412      	lsls	r2, r2, #16
 801df4a:	0c12      	lsrs	r2, r2, #16
 801df4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801df50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801df54:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801df58:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 801df5c:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 801df60:	b29b      	uxth	r3, r3
 801df62:	441a      	add	r2, r3
 801df64:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801df66:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801df6a:	892a      	ldrh	r2, [r5, #8]
 801df6c:	e781      	b.n	801de72 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 801df6e:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801df70:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 801df74:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801df76:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801df7a:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801df7c:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801df7e:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801df80:	d506      	bpl.n	801df90 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801df82:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 801df86:	4432      	add	r2, r6
 801df88:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801df8c:	896a      	ldrh	r2, [r5, #10]
 801df8e:	e770      	b.n	801de72 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801df90:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 801df94:	4432      	add	r2, r6
 801df96:	e7e6      	b.n	801df66 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 801df98:	2a00      	cmp	r2, #0
 801df9a:	d13b      	bne.n	801e014 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 801df9c:	698b      	ldr	r3, [r1, #24]
 801df9e:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801dfa0:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 801dfa4:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 801dfa6:	bf84      	itt	hi
 801dfa8:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 801dfaa:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801dfac:	7829      	ldrb	r1, [r5, #0]
 801dfae:	61aa      	str	r2, [r5, #24]
 801dfb0:	b280      	uxth	r0, r0
 801dfb2:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 801dfb6:	0109      	lsls	r1, r1, #4
 801dfb8:	4402      	add	r2, r0
 801dfba:	5a88      	ldrh	r0, [r1, r2]
 801dfbc:	2b3e      	cmp	r3, #62	@ 0x3e
 801dfbe:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801dfc2:	5288      	strh	r0, [r1, r2]
 801dfc4:	d91a      	bls.n	801dffc <USB_EPStartXfer+0x2a6>
 801dfc6:	0958      	lsrs	r0, r3, #5
 801dfc8:	06de      	lsls	r6, r3, #27
 801dfca:	5a8b      	ldrh	r3, [r1, r2]
 801dfcc:	bf08      	it	eq
 801dfce:	f100 30ff 	addeq.w	r0, r0, #4294967295	@ 0xffffffff
 801dfd2:	b29b      	uxth	r3, r3
 801dfd4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 801dfd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801dfdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801dfe0:	b29b      	uxth	r3, r3
 801dfe2:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801dfe4:	782a      	ldrb	r2, [r5, #0]
 801dfe6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 801dfea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801dfee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801dff2:	041b      	lsls	r3, r3, #16
 801dff4:	0c1b      	lsrs	r3, r3, #16
 801dff6:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 801dffa:	e6d6      	b.n	801ddaa <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801dffc:	b90b      	cbnz	r3, 801e002 <USB_EPStartXfer+0x2ac>
 801dffe:	5a8b      	ldrh	r3, [r1, r2]
 801e000:	e7ea      	b.n	801dfd8 <USB_EPStartXfer+0x282>
 801e002:	0858      	lsrs	r0, r3, #1
 801e004:	07db      	lsls	r3, r3, #31
 801e006:	5a8b      	ldrh	r3, [r1, r2]
 801e008:	bf48      	it	mi
 801e00a:	3001      	addmi	r0, #1
 801e00c:	b29b      	uxth	r3, r3
 801e00e:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 801e012:	e7e5      	b.n	801dfe0 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 801e014:	78ca      	ldrb	r2, [r1, #3]
 801e016:	2a02      	cmp	r2, #2
 801e018:	d170      	bne.n	801e0fc <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	d138      	bne.n	801e090 <USB_EPStartXfer+0x33a>
 801e01e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 801e022:	780b      	ldrb	r3, [r1, #0]
 801e024:	b292      	uxth	r2, r2
 801e026:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 801e02a:	011b      	lsls	r3, r3, #4
 801e02c:	4410      	add	r0, r2
 801e02e:	5ac2      	ldrh	r2, [r0, r3]
 801e030:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801e034:	52c2      	strh	r2, [r0, r3]
 801e036:	690a      	ldr	r2, [r1, #16]
 801e038:	2a3e      	cmp	r2, #62	@ 0x3e
 801e03a:	d946      	bls.n	801e0ca <USB_EPStartXfer+0x374>
 801e03c:	5ac1      	ldrh	r1, [r0, r3]
 801e03e:	0956      	lsrs	r6, r2, #5
 801e040:	06d7      	lsls	r7, r2, #27
 801e042:	bf08      	it	eq
 801e044:	f106 36ff 	addeq.w	r6, r6, #4294967295	@ 0xffffffff
 801e048:	b289      	uxth	r1, r1
 801e04a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 801e04e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 801e052:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801e056:	b289      	uxth	r1, r1
 801e058:	52c1      	strh	r1, [r0, r3]
 801e05a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 801e05e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 801e062:	b280      	uxth	r0, r0
 801e064:	4401      	add	r1, r0
 801e066:	5ac8      	ldrh	r0, [r1, r3]
 801e068:	2a3e      	cmp	r2, #62	@ 0x3e
 801e06a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801e06e:	52c8      	strh	r0, [r1, r3]
 801e070:	d938      	bls.n	801e0e4 <USB_EPStartXfer+0x38e>
 801e072:	0950      	lsrs	r0, r2, #5
 801e074:	06d7      	lsls	r7, r2, #27
 801e076:	5aca      	ldrh	r2, [r1, r3]
 801e078:	bf08      	it	eq
 801e07a:	f100 30ff 	addeq.w	r0, r0, #4294967295	@ 0xffffffff
 801e07e:	b292      	uxth	r2, r2
 801e080:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 801e084:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801e088:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801e08c:	b292      	uxth	r2, r2
 801e08e:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 801e090:	69eb      	ldr	r3, [r5, #28]
 801e092:	2b00      	cmp	r3, #0
 801e094:	d0a6      	beq.n	801dfe4 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801e096:	f244 0340 	movw	r3, #16448	@ 0x4040
 801e09a:	782a      	ldrb	r2, [r5, #0]
 801e09c:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801e0a0:	ea03 0001 	and.w	r0, r3, r1
 801e0a4:	438b      	bics	r3, r1
 801e0a6:	d001      	beq.n	801e0ac <USB_EPStartXfer+0x356>
 801e0a8:	2800      	cmp	r0, #0
 801e0aa:	d19b      	bne.n	801dfe4 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801e0ac:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 801e0b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801e0b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801e0b8:	041b      	lsls	r3, r3, #16
 801e0ba:	0c1b      	lsrs	r3, r3, #16
 801e0bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801e0c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801e0c4:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 801e0c8:	e78c      	b.n	801dfe4 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801e0ca:	b90a      	cbnz	r2, 801e0d0 <USB_EPStartXfer+0x37a>
 801e0cc:	5ac1      	ldrh	r1, [r0, r3]
 801e0ce:	e7be      	b.n	801e04e <USB_EPStartXfer+0x2f8>
 801e0d0:	07d1      	lsls	r1, r2, #31
 801e0d2:	5ac1      	ldrh	r1, [r0, r3]
 801e0d4:	ea4f 0652 	mov.w	r6, r2, lsr #1
 801e0d8:	bf48      	it	mi
 801e0da:	3601      	addmi	r6, #1
 801e0dc:	b289      	uxth	r1, r1
 801e0de:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 801e0e2:	e7b8      	b.n	801e056 <USB_EPStartXfer+0x300>
 801e0e4:	b90a      	cbnz	r2, 801e0ea <USB_EPStartXfer+0x394>
 801e0e6:	5aca      	ldrh	r2, [r1, r3]
 801e0e8:	e7cc      	b.n	801e084 <USB_EPStartXfer+0x32e>
 801e0ea:	0850      	lsrs	r0, r2, #1
 801e0ec:	07d6      	lsls	r6, r2, #31
 801e0ee:	5aca      	ldrh	r2, [r1, r3]
 801e0f0:	bf48      	it	mi
 801e0f2:	3001      	addmi	r0, #1
 801e0f4:	b292      	uxth	r2, r2
 801e0f6:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 801e0fa:	e7c7      	b.n	801e08c <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 801e0fc:	2a01      	cmp	r2, #1
 801e0fe:	d15d      	bne.n	801e1bc <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 801e100:	698a      	ldr	r2, [r1, #24]
 801e102:	6909      	ldr	r1, [r1, #16]
 801e104:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 801e106:	bf94      	ite	ls
 801e108:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 801e10a:	1a50      	subhi	r0, r2, r1
 801e10c:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 801e10e:	bf88      	it	hi
 801e110:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801e112:	2b00      	cmp	r3, #0
 801e114:	f47f af66 	bne.w	801dfe4 <USB_EPStartXfer+0x28e>
 801e118:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 801e11c:	782b      	ldrb	r3, [r5, #0]
 801e11e:	b289      	uxth	r1, r1
 801e120:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 801e124:	011b      	lsls	r3, r3, #4
 801e126:	4408      	add	r0, r1
 801e128:	5ac1      	ldrh	r1, [r0, r3]
 801e12a:	2a3e      	cmp	r2, #62	@ 0x3e
 801e12c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801e130:	52c1      	strh	r1, [r0, r3]
 801e132:	d92b      	bls.n	801e18c <USB_EPStartXfer+0x436>
 801e134:	06d1      	lsls	r1, r2, #27
 801e136:	5ac1      	ldrh	r1, [r0, r3]
 801e138:	ea4f 1652 	mov.w	r6, r2, lsr #5
 801e13c:	bf08      	it	eq
 801e13e:	f106 36ff 	addeq.w	r6, r6, #4294967295	@ 0xffffffff
 801e142:	b289      	uxth	r1, r1
 801e144:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 801e148:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 801e14c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 801e150:	b289      	uxth	r1, r1
 801e152:	52c1      	strh	r1, [r0, r3]
 801e154:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 801e158:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 801e15c:	b280      	uxth	r0, r0
 801e15e:	4401      	add	r1, r0
 801e160:	5ac8      	ldrh	r0, [r1, r3]
 801e162:	2a3e      	cmp	r2, #62	@ 0x3e
 801e164:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801e168:	52c8      	strh	r0, [r1, r3]
 801e16a:	d91b      	bls.n	801e1a4 <USB_EPStartXfer+0x44e>
 801e16c:	0950      	lsrs	r0, r2, #5
 801e16e:	06d6      	lsls	r6, r2, #27
 801e170:	5aca      	ldrh	r2, [r1, r3]
 801e172:	bf08      	it	eq
 801e174:	f100 30ff 	addeq.w	r0, r0, #4294967295	@ 0xffffffff
 801e178:	b292      	uxth	r2, r2
 801e17a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 801e17e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 801e182:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 801e186:	b292      	uxth	r2, r2
 801e188:	52ca      	strh	r2, [r1, r3]
 801e18a:	e72b      	b.n	801dfe4 <USB_EPStartXfer+0x28e>
 801e18c:	b90a      	cbnz	r2, 801e192 <USB_EPStartXfer+0x43c>
 801e18e:	5ac1      	ldrh	r1, [r0, r3]
 801e190:	e7da      	b.n	801e148 <USB_EPStartXfer+0x3f2>
 801e192:	5ac1      	ldrh	r1, [r0, r3]
 801e194:	0856      	lsrs	r6, r2, #1
 801e196:	07d7      	lsls	r7, r2, #31
 801e198:	bf48      	it	mi
 801e19a:	3601      	addmi	r6, #1
 801e19c:	b289      	uxth	r1, r1
 801e19e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 801e1a2:	e7d5      	b.n	801e150 <USB_EPStartXfer+0x3fa>
 801e1a4:	b90a      	cbnz	r2, 801e1aa <USB_EPStartXfer+0x454>
 801e1a6:	5aca      	ldrh	r2, [r1, r3]
 801e1a8:	e7e9      	b.n	801e17e <USB_EPStartXfer+0x428>
 801e1aa:	0850      	lsrs	r0, r2, #1
 801e1ac:	07d2      	lsls	r2, r2, #31
 801e1ae:	5aca      	ldrh	r2, [r1, r3]
 801e1b0:	bf48      	it	mi
 801e1b2:	3001      	addmi	r0, #1
 801e1b4:	b292      	uxth	r2, r2
 801e1b6:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 801e1ba:	e7e4      	b.n	801e186 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 801e1bc:	2001      	movs	r0, #1
 801e1be:	e5fb      	b.n	801ddb8 <USB_EPStartXfer+0x62>

0801e1c0 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e1c0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 801e1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e1c6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 801e1ca:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 801e1cc:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e1ce:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 801e1d0:	462e      	mov	r6, r5
 801e1d2:	3402      	adds	r4, #2
 801e1d4:	b936      	cbnz	r6, 801e1e4 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801e1d6:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 801e1d8:	bf44      	itt	mi
 801e1da:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801e1de:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 801e1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 801e1e4:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 801e1e8:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 801e1ea:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801e1ec:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801e1f0:	0a12      	lsrs	r2, r2, #8
 801e1f2:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 801e1f6:	e7ec      	b.n	801e1d2 <USB_ReadPMA+0x12>

0801e1f8 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_CfgDesc);
 801e1f8:	231b      	movs	r3, #27
 801e1fa:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 801e1fc:	4800      	ldr	r0, [pc, #0]	@ (801e200 <USBD_DFU_GetCfgDesc+0x8>)
 801e1fe:	4770      	bx	lr
 801e200:	20000018 	.word	0x20000018

0801e204 <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{

  return USBD_OK;
}
 801e204:	2000      	movs	r0, #0
 801e206:	4770      	bx	lr

0801e208 <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 801e208:	2000      	movs	r0, #0
 801e20a:	4770      	bx	lr

0801e20c <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 801e20c:	230a      	movs	r3, #10
 801e20e:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 801e210:	4800      	ldr	r0, [pc, #0]	@ (801e214 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 801e212:	4770      	bx	lr
 801e214:	2000000c 	.word	0x2000000c

0801e218 <USBD_DFU_EP0_TxReady>:
{
 801e218:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801e21a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
{
 801e21e:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 801e220:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 801e224:	2b04      	cmp	r3, #4
 801e226:	d155      	bne.n	801e2d4 <USBD_DFU_EP0_TxReady+0xbc>
    if (hdfu->wblock_num == 0U)
 801e228:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 801e22c:	2900      	cmp	r1, #0
 801e22e:	d142      	bne.n	801e2b6 <USBD_DFU_EP0_TxReady+0x9e>
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 801e230:	7823      	ldrb	r3, [r4, #0]
 801e232:	b9a3      	cbnz	r3, 801e25e <USBD_DFU_EP0_TxReady+0x46>
 801e234:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 801e238:	2b01      	cmp	r3, #1
 801e23a:	d12d      	bne.n	801e298 <USBD_DFU_EP0_TxReady+0x80>
    hdfu->wlength = 0U;
 801e23c:	2300      	movs	r3, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 801e23e:	2203      	movs	r2, #3
    hdfu->wlength = 0U;
 801e240:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 801e244:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 801e248:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[1] = 0U;
 801e24c:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 801e250:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 801e254:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
    return USBD_OK;
 801e258:	2000      	movs	r0, #0
}
 801e25a:	b003      	add	sp, #12
 801e25c:	bd30      	pop	{r4, r5, pc}
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 801e25e:	2b21      	cmp	r3, #33	@ 0x21
 801e260:	d108      	bne.n	801e274 <USBD_DFU_EP0_TxReady+0x5c>
 801e262:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 801e266:	2b05      	cmp	r3, #5
 801e268:	d116      	bne.n	801e298 <USBD_DFU_EP0_TxReady+0x80>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801e26a:	f8d4 3001 	ldr.w	r3, [r4, #1]
 801e26e:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
 801e272:	e7e3      	b.n	801e23c <USBD_DFU_EP0_TxReady+0x24>
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 801e274:	2b41      	cmp	r3, #65	@ 0x41
 801e276:	d10f      	bne.n	801e298 <USBD_DFU_EP0_TxReady+0x80>
 801e278:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 801e27c:	2b05      	cmp	r3, #5
 801e27e:	d10b      	bne.n	801e298 <USBD_DFU_EP0_TxReady+0x80>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801e280:	f8d4 0001 	ldr.w	r0, [r4, #1]
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 801e284:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801e288:	f8c4 0408 	str.w	r0, [r4, #1032]	@ 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 801e28c:	68db      	ldr	r3, [r3, #12]
 801e28e:	4798      	blx	r3
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 801e290:	2800      	cmp	r0, #0
 801e292:	d0d3      	beq.n	801e23c <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 801e294:	2002      	movs	r0, #2
 801e296:	e7e0      	b.n	801e25a <USBD_DFU_EP0_TxReady+0x42>
        hdfu->wlength = 0U;
 801e298:	2300      	movs	r3, #0
 801e29a:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 801e29e:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
        req.bmRequest = 0U;
 801e2a2:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 801e2a6:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 801e2a8:	4669      	mov	r1, sp
 801e2aa:	4628      	mov	r0, r5
        req.wLength = 1U;
 801e2ac:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 801e2b0:	f000 fd7d 	bl	801edae <USBD_CtlError>
 801e2b4:	e7c2      	b.n	801e23c <USBD_DFU_EP0_TxReady+0x24>
      if (hdfu->wblock_num > 1U)
 801e2b6:	2901      	cmp	r1, #1
 801e2b8:	d0c0      	beq.n	801e23c <USBD_DFU_EP0_TxReady+0x24>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 801e2ba:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 801e2be:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 801e2c2:	3902      	subs	r1, #2
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 801e2c4:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 801e2c8:	691b      	ldr	r3, [r3, #16]
 801e2ca:	4620      	mov	r0, r4
 801e2cc:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 801e2d0:	4798      	blx	r3
 801e2d2:	e7dd      	b.n	801e290 <USBD_DFU_EP0_TxReady+0x78>
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 801e2d4:	2b07      	cmp	r3, #7
 801e2d6:	d1bf      	bne.n	801e258 <USBD_DFU_EP0_TxReady+0x40>
{
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 801e2d8:	2200      	movs	r2, #0

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 801e2da:	4b16      	ldr	r3, [pc, #88]	@ (801e334 <USBD_DFU_EP0_TxReady+0x11c>)
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 801e2dc:	f884 2419 	strb.w	r2, [r4, #1049]	@ 0x419
  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 801e2e0:	7d1b      	ldrb	r3, [r3, #20]
 801e2e2:	f013 0304 	ands.w	r3, r3, #4
 801e2e6:	d009      	beq.n	801e2fc <USBD_DFU_EP0_TxReady+0xe4>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 801e2e8:	2306      	movs	r3, #6

    hdfu->dev_status[1] = 0U;
 801e2ea:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 801e2ee:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 801e2f2:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 801e2f6:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
    return;
 801e2fa:	e7ad      	b.n	801e258 <USBD_DFU_EP0_TxReady+0x40>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 801e2fc:	2208      	movs	r2, #8

    hdfu->dev_status[1] = 0U;
 801e2fe:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 801e302:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 801e306:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 801e30a:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 801e30e:	f000 fa0b 	bl	801e728 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 801e312:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
 801e316:	689b      	ldr	r3, [r3, #8]
 801e318:	4798      	blx	r3
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801e31a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801e31e:	4906      	ldr	r1, [pc, #24]	@ (801e338 <USBD_DFU_EP0_TxReady+0x120>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801e320:	4b06      	ldr	r3, [pc, #24]	@ (801e33c <USBD_DFU_EP0_TxReady+0x124>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801e322:	68ca      	ldr	r2, [r1, #12]
 801e324:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801e328:	4313      	orrs	r3, r2
 801e32a:	60cb      	str	r3, [r1, #12]
 801e32c:	f3bf 8f4f 	dsb	sy
    __NOP();
 801e330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 801e332:	e7fd      	b.n	801e330 <USBD_DFU_EP0_TxReady+0x118>
 801e334:	20000018 	.word	0x20000018
 801e338:	e000ed00 	.word	0xe000ed00
 801e33c:	05fa0004 	.word	0x05fa0004

0801e340 <USBD_DFU_DeInit>:
{
 801e340:	b538      	push	{r3, r4, r5, lr}
  hdfu->dev_state = DFU_STATE_IDLE;
 801e342:	2202      	movs	r2, #2
  hdfu->wblock_num = 0U;
 801e344:	2500      	movs	r5, #0
{
 801e346:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801e348:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  hdfu->dev_state = DFU_STATE_IDLE;
 801e34c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 801e350:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 801e354:	f883 5410 	strb.w	r5, [r3, #1040]	@ 0x410
  hdfu->wblock_num = 0U;
 801e358:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 801e35c:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 801e360:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 801e364:	689b      	ldr	r3, [r3, #8]
 801e366:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801e368:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 801e36c:	f000 ff24 	bl	801f1b8 <USBD_static_free>
}
 801e370:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 801e372:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 801e376:	bd38      	pop	{r3, r4, r5, pc}

0801e378 <USBD_DFU_Init>:
{
 801e378:	b510      	push	{r4, lr}
 801e37a:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 801e37c:	f240 401c 	movw	r0, #1052	@ 0x41c
 801e380:	f000 ff16 	bl	801f1b0 <USBD_static_malloc>
 801e384:	4603      	mov	r3, r0
 801e386:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 801e38a:	2002      	movs	r0, #2
 801e38c:	b1c3      	cbz	r3, 801e3c0 <USBD_DFU_Init+0x48>
    hdfu->wblock_num = 0U;
 801e38e:	2200      	movs	r2, #0
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 801e390:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
    hdfu->dev_state = DFU_STATE_IDLE;
 801e394:	f8a3 0418 	strh.w	r0, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 801e398:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 801e39c:	f8a3 0414 	strh.w	r0, [r3, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 801e3a0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 801e3a4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 801e3a8:	f8c3 1408 	str.w	r1, [r3, #1032]	@ 0x408
    hdfu->alt_setting = 0U;
 801e3ac:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 801e3b0:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 801e3b4:	685b      	ldr	r3, [r3, #4]
 801e3b6:	4798      	blx	r3
 801e3b8:	3800      	subs	r0, #0
 801e3ba:	bf18      	it	ne
 801e3bc:	2001      	movne	r0, #1
 801e3be:	0040      	lsls	r0, r0, #1
}
 801e3c0:	bd10      	pop	{r4, pc}

0801e3c2 <USBD_DFU_IsoOutIncomplete>:
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 801e3c2:	2000      	movs	r0, #0
 801e3c4:	4770      	bx	lr
	...

0801e3c8 <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 801e3c8:	2906      	cmp	r1, #6
{
 801e3ca:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 801e3cc:	d807      	bhi.n	801e3de <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 801e3ce:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 801e3d2:	4904      	ldr	r1, [pc, #16]	@ (801e3e4 <USBD_DFU_GetUsrStringDesc+0x1c>)
 801e3d4:	6818      	ldr	r0, [r3, #0]
 801e3d6:	f000 fcf5 	bl	801edc4 <USBD_GetString>
 801e3da:	4802      	ldr	r0, [pc, #8]	@ (801e3e4 <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 801e3dc:	bd08      	pop	{r3, pc}
    return NULL;
 801e3de:	2000      	movs	r0, #0
 801e3e0:	e7fc      	b.n	801e3dc <USBD_DFU_GetUsrStringDesc+0x14>
 801e3e2:	bf00      	nop
 801e3e4:	200000fc 	.word	0x200000fc

0801e3e8 <USBD_DFU_Setup>:
  uint16_t status_info = 0U;
 801e3e8:	2300      	movs	r3, #0
{
 801e3ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint16_t status_info = 0U;
 801e3ec:	f8ad 3006 	strh.w	r3, [sp, #6]
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801e3f0:	780b      	ldrb	r3, [r1, #0]
{
 801e3f2:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e3f4:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 801e3f8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e3fc:	f000 812c 	beq.w	801e658 <USBD_DFU_Setup+0x270>
 801e400:	2b20      	cmp	r3, #32
 801e402:	f040 813c 	bne.w	801e67e <USBD_DFU_Setup+0x296>
      switch (req->bRequest)
 801e406:	784b      	ldrb	r3, [r1, #1]
 801e408:	2b06      	cmp	r3, #6
 801e40a:	f200 8138 	bhi.w	801e67e <USBD_DFU_Setup+0x296>
 801e40e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801e412:	00ff      	.short	0x00ff
 801e414:	00300007 	.word	0x00300007
 801e418:	00d1008b 	.word	0x00d1008b
 801e41c:	00e700e3 	.word	0x00e700e3
  if (req->wLength > 0U)
 801e420:	88ca      	ldrh	r2, [r1, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 801e422:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
  if (req->wLength > 0U)
 801e426:	b19a      	cbz	r2, 801e450 <USBD_DFU_Setup+0x68>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 801e428:	2b02      	cmp	r3, #2
 801e42a:	d001      	beq.n	801e430 <USBD_DFU_Setup+0x48>
 801e42c:	2b05      	cmp	r3, #5
 801e42e:	d169      	bne.n	801e504 <USBD_DFU_Setup+0x11c>
      hdfu->wblock_num = req->wValue;
 801e430:	884b      	ldrh	r3, [r1, #2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 801e432:	4628      	mov	r0, r5
      hdfu->wblock_num = req->wValue;
 801e434:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 801e438:	2303      	movs	r3, #3
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 801e43a:	4621      	mov	r1, r4
      hdfu->wlength = req->wLength;
 801e43c:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 801e440:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 801e444:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 801e448:	f000 fced 	bl	801ee26 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 801e44c:	2000      	movs	r0, #0
 801e44e:	e11a      	b.n	801e686 <USBD_DFU_Setup+0x29e>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 801e450:	2b05      	cmp	r3, #5
 801e452:	d001      	beq.n	801e458 <USBD_DFU_Setup+0x70>
 801e454:	2b02      	cmp	r3, #2
 801e456:	d155      	bne.n	801e504 <USBD_DFU_Setup+0x11c>
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 801e458:	f44f 7383 	mov.w	r3, #262	@ 0x106
 801e45c:	f8a4 3418 	strh.w	r3, [r4, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 801e460:	2300      	movs	r3, #0
 801e462:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 801e466:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
      hdfu->dev_status[4] = hdfu->dev_state;
 801e46a:	2306      	movs	r3, #6
    hdfu->dev_status[4] = hdfu->dev_state;
 801e46c:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
 801e470:	e7ec      	b.n	801e44c <USBD_DFU_Setup+0x64>
  if (req->wLength > 0U)
 801e472:	88ca      	ldrh	r2, [r1, #6]
 801e474:	2a00      	cmp	r2, #0
 801e476:	d04f      	beq.n	801e518 <USBD_DFU_Setup+0x130>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 801e478:	f894 0418 	ldrb.w	r0, [r4, #1048]	@ 0x418
 801e47c:	2802      	cmp	r0, #2
 801e47e:	d001      	beq.n	801e484 <USBD_DFU_Setup+0x9c>
 801e480:	2809      	cmp	r0, #9
 801e482:	d143      	bne.n	801e50c <USBD_DFU_Setup+0x124>
      hdfu->wblock_num = req->wValue;
 801e484:	8848      	ldrh	r0, [r1, #2]
      hdfu->wlength = req->wLength;
 801e486:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      hdfu->wblock_num = req->wValue;
 801e48a:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      if (hdfu->wblock_num == 0U)
 801e48e:	b9a8      	cbnz	r0, 801e4bc <USBD_DFU_Setup+0xd4>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 801e490:	2a03      	cmp	r2, #3
 801e492:	bf98      	it	ls
 801e494:	2309      	movls	r3, #9
 801e496:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
        hdfu->dev_status[4] = hdfu->dev_state;
 801e49a:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 801e49e:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 801e4a2:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 801e4a4:	2341      	movs	r3, #65	@ 0x41
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 801e4a6:	2203      	movs	r2, #3
 801e4a8:	4621      	mov	r1, r4
        hdfu->dev_status[1] = 0U;
 801e4aa:	f884 0411 	strb.w	r0, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 801e4ae:	f8a4 0412 	strh.w	r0, [r4, #1042]	@ 0x412
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 801e4b2:	70a3      	strb	r3, [r4, #2]
          USBD_CtlSendData(pdev, pbuf, len);
 801e4b4:	4628      	mov	r0, r5
 801e4b6:	f000 fca1 	bl	801edfc <USBD_CtlSendData>
          break;
 801e4ba:	e7c7      	b.n	801e44c <USBD_DFU_Setup+0x64>
      else if (hdfu->wblock_num > 1U)
 801e4bc:	2801      	cmp	r0, #1
 801e4be:	f04f 0300 	mov.w	r3, #0
 801e4c2:	d016      	beq.n	801e4f2 <USBD_DFU_Setup+0x10a>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 801e4c4:	2109      	movs	r1, #9
        hdfu->dev_status[1] = 0U;
 801e4c6:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 801e4ca:	f884 1418 	strb.w	r1, [r4, #1048]	@ 0x418
        hdfu->dev_status[4] = hdfu->dev_state;
 801e4ce:	f884 1414 	strb.w	r1, [r4, #1044]	@ 0x414
        hdfu->dev_status[2] = 0U;
 801e4d2:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 801e4d6:	f8d4 6408 	ldr.w	r6, [r4, #1032]	@ 0x408
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 801e4da:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 801e4de:	3802      	subs	r0, #2
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 801e4e0:	4621      	mov	r1, r4
 801e4e2:	695b      	ldr	r3, [r3, #20]
 801e4e4:	eb06 2080 	add.w	r0, r6, r0, lsl #10
 801e4e8:	4798      	blx	r3
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 801e4ea:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	@ 0x404
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 801e4ee:	4601      	mov	r1, r0
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 801e4f0:	e7e0      	b.n	801e4b4 <USBD_DFU_Setup+0xcc>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 801e4f2:	220f      	movs	r2, #15
        hdfu->dev_status[1] = 0U;
 801e4f4:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 801e4f8:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        hdfu->dev_status[2] = 0U;
 801e4fc:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 801e500:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
      USBD_CtlError(pdev, req);
 801e504:	4628      	mov	r0, r5
 801e506:	f000 fc52 	bl	801edae <USBD_CtlError>
 801e50a:	e79f      	b.n	801e44c <USBD_DFU_Setup+0x64>
      hdfu->wlength = 0U;
 801e50c:	2300      	movs	r3, #0
 801e50e:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 801e512:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 801e516:	e7f5      	b.n	801e504 <USBD_DFU_Setup+0x11c>
    hdfu->dev_state = DFU_STATE_IDLE;
 801e518:	2302      	movs	r3, #2
    hdfu->dev_status[1] = 0U;
 801e51a:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_IDLE;
 801e51e:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 801e522:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
 801e526:	e7a1      	b.n	801e46c <USBD_DFU_Setup+0x84>
  switch (hdfu->dev_state)
 801e528:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 801e52c:	f504 6682 	add.w	r6, r4, #1040	@ 0x410
 801e530:	2b03      	cmp	r3, #3
 801e532:	d004      	beq.n	801e53e <USBD_DFU_Setup+0x156>
 801e534:	2b06      	cmp	r3, #6
 801e536:	d026      	beq.n	801e586 <USBD_DFU_Setup+0x19e>
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 801e538:	2206      	movs	r2, #6
 801e53a:	4631      	mov	r1, r6
 801e53c:	e7ba      	b.n	801e4b4 <USBD_DFU_Setup+0xcc>
      if (hdfu->wlength != 0U)
 801e53e:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 801e542:	b1d3      	cbz	r3, 801e57a <USBD_DFU_Setup+0x192>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 801e544:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 801e546:	2200      	movs	r2, #0
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 801e548:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 801e54c:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 801e550:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 801e554:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 801e558:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 801e55c:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 801e560:	699b      	ldr	r3, [r3, #24]
 801e562:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 801e566:	b929      	cbnz	r1, 801e574 <USBD_DFU_Setup+0x18c>
 801e568:	7822      	ldrb	r2, [r4, #0]
 801e56a:	2a41      	cmp	r2, #65	@ 0x41
 801e56c:	d102      	bne.n	801e574 <USBD_DFU_Setup+0x18c>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 801e56e:	4632      	mov	r2, r6
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 801e570:	4798      	blx	r3
 801e572:	e7e1      	b.n	801e538 <USBD_DFU_Setup+0x150>
 801e574:	4632      	mov	r2, r6
 801e576:	2101      	movs	r1, #1
 801e578:	e7fa      	b.n	801e570 <USBD_DFU_Setup+0x188>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 801e57a:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 801e57c:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 801e580:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
 801e584:	e009      	b.n	801e59a <USBD_DFU_Setup+0x1b2>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 801e586:	f894 3419 	ldrb.w	r3, [r4, #1049]	@ 0x419
 801e58a:	2b01      	cmp	r3, #1
 801e58c:	d10a      	bne.n	801e5a4 <USBD_DFU_Setup+0x1bc>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 801e58e:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 801e590:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 801e594:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_MANIFEST;
 801e596:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          hdfu->dev_status[2] = 0U;
 801e59a:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
          hdfu->dev_status[4] = hdfu->dev_state;
 801e59e:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
 801e5a2:	e7c9      	b.n	801e538 <USBD_DFU_Setup+0x150>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d1c7      	bne.n	801e538 <USBD_DFU_Setup+0x150>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 801e5a8:	4a47      	ldr	r2, [pc, #284]	@ (801e6c8 <USBD_DFU_Setup+0x2e0>)
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 801e5aa:	7d12      	ldrb	r2, [r2, #20]
 801e5ac:	0750      	lsls	r0, r2, #29
 801e5ae:	d5c3      	bpl.n	801e538 <USBD_DFU_Setup+0x150>
          hdfu->dev_state = DFU_STATE_IDLE;
 801e5b0:	2202      	movs	r2, #2
 801e5b2:	e7e3      	b.n	801e57c <USBD_DFU_Setup+0x194>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 801e5b4:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 801e5b8:	2b0a      	cmp	r3, #10
    hdfu->dev_state = DFU_STATE_IDLE;
 801e5ba:	bf0b      	itete	eq
 801e5bc:	2302      	moveq	r3, #2
    hdfu->dev_state = DFU_STATE_ERROR;
 801e5be:	230a      	movne	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 801e5c0:	2200      	moveq	r2, #0
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 801e5c2:	220e      	movne	r2, #14
    hdfu->dev_state = DFU_STATE_IDLE;
 801e5c4:	bf0c      	ite	eq
 801e5c6:	f884 3418 	strbeq.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_state = DFU_STATE_ERROR;
 801e5ca:	f884 3418 	strbne.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 801e5ce:	f8c4 2410 	str.w	r2, [r4, #1040]	@ 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 801e5d2:	f8a4 3414 	strh.w	r3, [r4, #1044]	@ 0x414
 801e5d6:	e739      	b.n	801e44c <USBD_DFU_Setup+0x64>
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 801e5d8:	2201      	movs	r2, #1
 801e5da:	f504 6183 	add.w	r1, r4, #1048	@ 0x418
 801e5de:	e769      	b.n	801e4b4 <USBD_DFU_Setup+0xcc>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 801e5e0:	f894 2418 	ldrb.w	r2, [r4, #1048]	@ 0x418
 801e5e4:	2a09      	cmp	r2, #9
 801e5e6:	f63f af31 	bhi.w	801e44c <USBD_DFU_Setup+0x64>
 801e5ea:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 801e5ee:	40d3      	lsrs	r3, r2
 801e5f0:	07d9      	lsls	r1, r3, #31
 801e5f2:	f57f af2b 	bpl.w	801e44c <USBD_DFU_Setup+0x64>
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 801e5f6:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 801e5f8:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 801e5fa:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 801e5fe:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 801e602:	f8a4 2414 	strh.w	r2, [r4, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 801e606:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 801e60a:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
 801e60e:	e71d      	b.n	801e44c <USBD_DFU_Setup+0x64>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 801e610:	f894 2418 	ldrb.w	r2, [r4, #1048]	@ 0x418
 801e614:	2a09      	cmp	r2, #9
 801e616:	d810      	bhi.n	801e63a <USBD_DFU_Setup+0x252>
 801e618:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 801e61c:	40d3      	lsrs	r3, r2
 801e61e:	07da      	lsls	r2, r3, #31
 801e620:	d50b      	bpl.n	801e63a <USBD_DFU_Setup+0x252>
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 801e622:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 801e624:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 801e626:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 801e62a:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 801e62e:	f8a4 2414 	strh.w	r2, [r4, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 801e632:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 801e636:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 801e63a:	4b23      	ldr	r3, [pc, #140]	@ (801e6c8 <USBD_DFU_Setup+0x2e0>)
 801e63c:	7d5b      	ldrb	r3, [r3, #21]
 801e63e:	06db      	lsls	r3, r3, #27
 801e640:	d506      	bpl.n	801e650 <USBD_DFU_Setup+0x268>
    USBD_Stop(pdev);
 801e642:	4628      	mov	r0, r5
 801e644:	f000 f870 	bl	801e728 <USBD_Stop>
    USBD_Start(pdev);
 801e648:	4628      	mov	r0, r5
 801e64a:	f000 f868 	bl	801e71e <USBD_Start>
 801e64e:	e6fd      	b.n	801e44c <USBD_DFU_Setup+0x64>
    USBD_Delay((uint32_t)req->wValue);
 801e650:	8848      	ldrh	r0, [r1, #2]
 801e652:	f7fd fead 	bl	801c3b0 <HAL_Delay>
 801e656:	e6f9      	b.n	801e44c <USBD_DFU_Setup+0x64>
      switch (req->bRequest)
 801e658:	784b      	ldrb	r3, [r1, #1]
 801e65a:	2b0b      	cmp	r3, #11
 801e65c:	d80f      	bhi.n	801e67e <USBD_DFU_Setup+0x296>
 801e65e:	e8df f003 	tbb	[pc, r3]
 801e662:	0e06      	.short	0x0e06
 801e664:	0e0e0e0e 	.word	0x0e0e0e0e
 801e668:	0e0e0e14 	.word	0x0e0e0e14
 801e66c:	2921      	.short	0x2921
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e66e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801e672:	2b03      	cmp	r3, #3
 801e674:	d103      	bne.n	801e67e <USBD_DFU_Setup+0x296>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801e676:	2202      	movs	r2, #2
 801e678:	f10d 0106 	add.w	r1, sp, #6
 801e67c:	e71a      	b.n	801e4b4 <USBD_DFU_Setup+0xcc>
            USBD_CtlError(pdev, req);
 801e67e:	4628      	mov	r0, r5
 801e680:	f000 fb95 	bl	801edae <USBD_CtlError>
      ret = USBD_FAIL;
 801e684:	2002      	movs	r0, #2
}
 801e686:	b002      	add	sp, #8
 801e688:	bd70      	pop	{r4, r5, r6, pc}
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 801e68a:	884b      	ldrh	r3, [r1, #2]
 801e68c:	0a1b      	lsrs	r3, r3, #8
 801e68e:	2b21      	cmp	r3, #33	@ 0x21
 801e690:	d105      	bne.n	801e69e <USBD_DFU_Setup+0x2b6>
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 801e692:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 801e694:	490d      	ldr	r1, [pc, #52]	@ (801e6cc <USBD_DFU_Setup+0x2e4>)
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 801e696:	2a09      	cmp	r2, #9
 801e698:	bf28      	it	cs
 801e69a:	2209      	movcs	r2, #9
 801e69c:	e70a      	b.n	801e4b4 <USBD_DFU_Setup+0xcc>
  uint16_t len = 0U;
 801e69e:	2200      	movs	r2, #0
  uint8_t *pbuf = 0U;
 801e6a0:	4611      	mov	r1, r2
 801e6a2:	e707      	b.n	801e4b4 <USBD_DFU_Setup+0xcc>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e6a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801e6a8:	2b03      	cmp	r3, #3
 801e6aa:	d1e8      	bne.n	801e67e <USBD_DFU_Setup+0x296>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 801e6ac:	2201      	movs	r2, #1
 801e6ae:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 801e6b2:	e6ff      	b.n	801e4b4 <USBD_DFU_Setup+0xcc>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 801e6b4:	788b      	ldrb	r3, [r1, #2]
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	d1e1      	bne.n	801e67e <USBD_DFU_Setup+0x296>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e6ba:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 801e6be:	2a03      	cmp	r2, #3
 801e6c0:	d1dd      	bne.n	801e67e <USBD_DFU_Setup+0x296>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 801e6c2:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
 801e6c6:	e6c1      	b.n	801e44c <USBD_DFU_Setup+0x64>
 801e6c8:	20000018 	.word	0x20000018
 801e6cc:	2000002a 	.word	0x2000002a

0801e6d0 <USBD_DFU_DataOut>:
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
 801e6d0:	2000      	movs	r0, #0
 801e6d2:	4770      	bx	lr

0801e6d4 <USBD_DFU_IsoINIncomplete>:
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 801e6d4:	2000      	movs	r0, #0
 801e6d6:	4770      	bx	lr

0801e6d8 <USBD_DFU_SOF>:
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
 801e6d8:	2000      	movs	r0, #0
 801e6da:	4770      	bx	lr

0801e6dc <USBD_DFU_RegisterMedia>:
  if (fops != NULL)
 801e6dc:	b109      	cbz	r1, 801e6e2 <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData = fops;
 801e6de:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
}
 801e6e2:	2000      	movs	r0, #0
 801e6e4:	4770      	bx	lr

0801e6e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801e6e6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801e6e8:	b180      	cbz	r0, 801e70c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801e6ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801e6ee:	b113      	cbz	r3, 801e6f6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 801e6f0:	2300      	movs	r3, #0
 801e6f2:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801e6f6:	b109      	cbz	r1, 801e6fc <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 801e6f8:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e6fc:	2301      	movs	r3, #1
  pdev->id = id;
 801e6fe:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e700:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801e704:	f000 fcce 	bl	801f0a4 <USBD_LL_Init>

  return USBD_OK;
 801e708:	2000      	movs	r0, #0
}
 801e70a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 801e70c:	2002      	movs	r0, #2
 801e70e:	e7fc      	b.n	801e70a <USBD_Init+0x24>

0801e710 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 801e710:	b119      	cbz	r1, 801e71a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801e712:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 801e716:	2000      	movs	r0, #0
 801e718:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801e71a:	2002      	movs	r0, #2
  }

  return status;
}
 801e71c:	4770      	bx	lr

0801e71e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801e71e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801e720:	f000 fcea 	bl	801f0f8 <USBD_LL_Start>

  return USBD_OK;
}
 801e724:	2000      	movs	r0, #0
 801e726:	bd08      	pop	{r3, pc}

0801e728 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 801e728:	b510      	push	{r4, lr}
 801e72a:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801e72c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801e730:	7901      	ldrb	r1, [r0, #4]
 801e732:	685b      	ldr	r3, [r3, #4]
 801e734:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 801e736:	4620      	mov	r0, r4
 801e738:	f000 fce7 	bl	801f10a <USBD_LL_Stop>

  return USBD_OK;
}
 801e73c:	2000      	movs	r0, #0
 801e73e:	bd10      	pop	{r4, pc}

0801e740 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801e740:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 801e742:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801e746:	b133      	cbz	r3, 801e756 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801e748:	681b      	ldr	r3, [r3, #0]
 801e74a:	4798      	blx	r3
 801e74c:	3800      	subs	r0, #0
 801e74e:	bf18      	it	ne
 801e750:	2001      	movne	r0, #1
 801e752:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 801e754:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 801e756:	2002      	movs	r0, #2
 801e758:	e7fc      	b.n	801e754 <USBD_SetClassConfig+0x14>

0801e75a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801e75a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801e75c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801e760:	685b      	ldr	r3, [r3, #4]
 801e762:	4798      	blx	r3

  return USBD_OK;
}
 801e764:	2000      	movs	r0, #0
 801e766:	bd08      	pop	{r3, pc}

0801e768 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801e768:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801e76a:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 801e76e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801e770:	4628      	mov	r0, r5
 801e772:	f000 fb11 	bl	801ed98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801e776:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 801e778:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 801e77c:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 801e780:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 801e784:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 801e788:	f001 031f 	and.w	r3, r1, #31
 801e78c:	2b01      	cmp	r3, #1
 801e78e:	d008      	beq.n	801e7a2 <USBD_LL_SetupStage+0x3a>
 801e790:	2b02      	cmp	r3, #2
 801e792:	d00b      	beq.n	801e7ac <USBD_LL_SetupStage+0x44>
 801e794:	b97b      	cbnz	r3, 801e7b6 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801e796:	4629      	mov	r1, r5
 801e798:	4620      	mov	r0, r4
 801e79a:	f000 f8fb 	bl	801e994 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 801e79e:	2000      	movs	r0, #0
 801e7a0:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 801e7a2:	4629      	mov	r1, r5
 801e7a4:	4620      	mov	r0, r4
 801e7a6:	f000 fa47 	bl	801ec38 <USBD_StdItfReq>
      break;
 801e7aa:	e7f8      	b.n	801e79e <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 801e7ac:	4629      	mov	r1, r5
 801e7ae:	4620      	mov	r0, r4
 801e7b0:	f000 fa66 	bl	801ec80 <USBD_StdEPReq>
      break;
 801e7b4:	e7f3      	b.n	801e79e <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801e7b6:	4620      	mov	r0, r4
 801e7b8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801e7bc:	f000 fcba 	bl	801f134 <USBD_LL_StallEP>
      break;
 801e7c0:	e7ed      	b.n	801e79e <USBD_LL_SetupStage+0x36>

0801e7c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801e7c2:	b570      	push	{r4, r5, r6, lr}
 801e7c4:	4604      	mov	r4, r0
 801e7c6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e7c8:	bb39      	cbnz	r1, 801e81a <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801e7ca:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 801e7ce:	2a03      	cmp	r2, #3
 801e7d0:	d11c      	bne.n	801e80c <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 801e7d2:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 801e7d6:	4295      	cmp	r5, r2
 801e7d8:	d90b      	bls.n	801e7f2 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 801e7da:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 801e7dc:	42aa      	cmp	r2, r5
 801e7de:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 801e7e0:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 801e7e4:	bf8c      	ite	hi
 801e7e6:	b2aa      	uxthhi	r2, r5
 801e7e8:	b292      	uxthls	r2, r2
 801e7ea:	f000 fb29 	bl	801ee40 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 801e7ee:	2000      	movs	r0, #0
}
 801e7f0:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e7f2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801e7f6:	691b      	ldr	r3, [r3, #16]
 801e7f8:	b123      	cbz	r3, 801e804 <USBD_LL_DataOutStage+0x42>
 801e7fa:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 801e7fe:	2a03      	cmp	r2, #3
 801e800:	d100      	bne.n	801e804 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 801e802:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 801e804:	4620      	mov	r0, r4
 801e806:	f000 fb23 	bl	801ee50 <USBD_CtlSendStatus>
 801e80a:	e7f0      	b.n	801e7ee <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801e80c:	2a05      	cmp	r2, #5
 801e80e:	d1ee      	bne.n	801e7ee <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 801e810:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 801e814:	f000 fc8e 	bl	801f134 <USBD_LL_StallEP>
 801e818:	e7e9      	b.n	801e7ee <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 801e81a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801e81e:	699b      	ldr	r3, [r3, #24]
 801e820:	b12b      	cbz	r3, 801e82e <USBD_LL_DataOutStage+0x6c>
 801e822:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 801e826:	2a03      	cmp	r2, #3
 801e828:	d101      	bne.n	801e82e <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 801e82a:	4798      	blx	r3
 801e82c:	e7df      	b.n	801e7ee <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 801e82e:	2002      	movs	r0, #2
 801e830:	e7de      	b.n	801e7f0 <USBD_LL_DataOutStage+0x2e>

0801e832 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801e832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e834:	4604      	mov	r4, r0
 801e836:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e838:	460f      	mov	r7, r1
 801e83a:	2900      	cmp	r1, #0
 801e83c:	d149      	bne.n	801e8d2 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801e83e:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 801e842:	2a02      	cmp	r2, #2
 801e844:	d13a      	bne.n	801e8bc <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 801e846:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 801e84a:	42b5      	cmp	r5, r6
 801e84c:	d911      	bls.n	801e872 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 801e84e:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801e850:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 801e852:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801e854:	b2aa      	uxth	r2, r5
 801e856:	f000 fade 	bl	801ee16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e85a:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e85c:	461a      	mov	r2, r3
 801e85e:	4619      	mov	r1, r3
 801e860:	4620      	mov	r0, r4
 801e862:	f000 fc9c 	bl	801f19e <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 801e866:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 801e86a:	2b01      	cmp	r3, #1
 801e86c:	d02d      	beq.n	801e8ca <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 801e86e:	2000      	movs	r0, #0
}
 801e870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e872:	69c3      	ldr	r3, [r0, #28]
 801e874:	fbb3 f5f6 	udiv	r5, r3, r6
 801e878:	fb06 3515 	mls	r5, r6, r5, r3
 801e87c:	b965      	cbnz	r5, 801e898 <USBD_LL_DataInStage+0x66>
 801e87e:	429e      	cmp	r6, r3
 801e880:	d80a      	bhi.n	801e898 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 801e882:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 801e886:	4293      	cmp	r3, r2
 801e888:	d206      	bcs.n	801e898 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801e88a:	462a      	mov	r2, r5
 801e88c:	f000 fac3 	bl	801ee16 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e890:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 801e892:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e896:	e7e1      	b.n	801e85c <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e898:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 801e89c:	68db      	ldr	r3, [r3, #12]
 801e89e:	b12b      	cbz	r3, 801e8ac <USBD_LL_DataInStage+0x7a>
 801e8a0:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 801e8a4:	2a03      	cmp	r2, #3
 801e8a6:	d101      	bne.n	801e8ac <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 801e8a8:	4620      	mov	r0, r4
 801e8aa:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 801e8ac:	2180      	movs	r1, #128	@ 0x80
 801e8ae:	4620      	mov	r0, r4
 801e8b0:	f000 fc40 	bl	801f134 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801e8b4:	4620      	mov	r0, r4
 801e8b6:	f000 fad6 	bl	801ee66 <USBD_CtlReceiveStatus>
 801e8ba:	e7d4      	b.n	801e866 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e8bc:	f032 0304 	bics.w	r3, r2, #4
 801e8c0:	d1d1      	bne.n	801e866 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 801e8c2:	2180      	movs	r1, #128	@ 0x80
 801e8c4:	f000 fc36 	bl	801f134 <USBD_LL_StallEP>
 801e8c8:	e7cd      	b.n	801e866 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 801e8ca:	2300      	movs	r3, #0
 801e8cc:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 801e8d0:	e7cd      	b.n	801e86e <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 801e8d2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801e8d6:	695b      	ldr	r3, [r3, #20]
 801e8d8:	b12b      	cbz	r3, 801e8e6 <USBD_LL_DataInStage+0xb4>
 801e8da:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 801e8de:	2a03      	cmp	r2, #3
 801e8e0:	d101      	bne.n	801e8e6 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 801e8e2:	4798      	blx	r3
 801e8e4:	e7c3      	b.n	801e86e <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 801e8e6:	2002      	movs	r0, #2
 801e8e8:	e7c2      	b.n	801e870 <USBD_LL_DataInStage+0x3e>

0801e8ea <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e8ea:	2200      	movs	r2, #0
{
 801e8ec:	b570      	push	{r4, r5, r6, lr}
 801e8ee:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801e8f0:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801e8f2:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e8f4:	4611      	mov	r1, r2
 801e8f6:	2340      	movs	r3, #64	@ 0x40
 801e8f8:	f000 fc10 	bl	801f11c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e8fc:	4633      	mov	r3, r6
 801e8fe:	2180      	movs	r1, #128	@ 0x80
 801e900:	2200      	movs	r2, #0
 801e902:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801e904:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801e908:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e90c:	f000 fc06 	bl	801f11c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 801e910:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 801e912:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801e916:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801e918:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e91a:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801e91e:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 801e922:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 801e924:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 801e928:	b123      	cbz	r3, 801e934 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801e92a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 801e92e:	4620      	mov	r0, r4
 801e930:	685b      	ldr	r3, [r3, #4]
 801e932:	4798      	blx	r3
  }

  return USBD_OK;
}
 801e934:	2000      	movs	r0, #0
 801e936:	bd70      	pop	{r4, r5, r6, pc}

0801e938 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 801e938:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 801e93a:	2000      	movs	r0, #0
 801e93c:	4770      	bx	lr

0801e93e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 801e93e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801e942:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801e946:	2304      	movs	r3, #4
 801e948:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 801e94c:	2000      	movs	r0, #0
 801e94e:	4770      	bx	lr

0801e950 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801e950:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801e954:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 801e956:	bf04      	itt	eq
 801e958:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 801e95c:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 801e960:	2000      	movs	r0, #0
 801e962:	4770      	bx	lr

0801e964 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801e964:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e966:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 801e96a:	2a03      	cmp	r2, #3
 801e96c:	d104      	bne.n	801e978 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 801e96e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801e972:	69db      	ldr	r3, [r3, #28]
 801e974:	b103      	cbz	r3, 801e978 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 801e976:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 801e978:	2000      	movs	r0, #0
 801e97a:	bd08      	pop	{r3, pc}

0801e97c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 801e97c:	b510      	push	{r4, lr}
 801e97e:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 801e980:	2180      	movs	r1, #128	@ 0x80
 801e982:	f000 fbd7 	bl	801f134 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801e986:	4620      	mov	r0, r4
}
 801e988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 801e98c:	2100      	movs	r1, #0
 801e98e:	f000 bbd1 	b.w	801f134 <USBD_LL_StallEP>
	...

0801e994 <USBD_StdDevReq>:
{
 801e994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e996:	780b      	ldrb	r3, [r1, #0]
 801e998:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e99a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801e99e:	2b20      	cmp	r3, #32
{
 801e9a0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e9a2:	d006      	beq.n	801e9b2 <USBD_StdDevReq+0x1e>
 801e9a4:	2b40      	cmp	r3, #64	@ 0x40
 801e9a6:	d004      	beq.n	801e9b2 <USBD_StdDevReq+0x1e>
 801e9a8:	b163      	cbz	r3, 801e9c4 <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 801e9aa:	4620      	mov	r0, r4
 801e9ac:	f7ff ffe6 	bl	801e97c <USBD_CtlError.constprop.0>
        break;
 801e9b0:	e005      	b.n	801e9be <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 801e9b2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 801e9b6:	4629      	mov	r1, r5
 801e9b8:	4620      	mov	r0, r4
 801e9ba:	689b      	ldr	r3, [r3, #8]
 801e9bc:	4798      	blx	r3
}
 801e9be:	2000      	movs	r0, #0
 801e9c0:	b003      	add	sp, #12
 801e9c2:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 801e9c4:	784b      	ldrb	r3, [r1, #1]
 801e9c6:	2b09      	cmp	r3, #9
 801e9c8:	d8ef      	bhi.n	801e9aa <USBD_StdDevReq+0x16>
 801e9ca:	a201      	add	r2, pc, #4	@ (adr r2, 801e9d0 <USBD_StdDevReq+0x3c>)
 801e9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e9d0:	0801ebe7 	.word	0x0801ebe7
 801e9d4:	0801ec1d 	.word	0x0801ec1d
 801e9d8:	0801e9ab 	.word	0x0801e9ab
 801e9dc:	0801ec0f 	.word	0x0801ec0f
 801e9e0:	0801e9ab 	.word	0x0801e9ab
 801e9e4:	0801eb0d 	.word	0x0801eb0d
 801e9e8:	0801e9f9 	.word	0x0801e9f9
 801e9ec:	0801e9ab 	.word	0x0801e9ab
 801e9f0:	0801ebb7 	.word	0x0801ebb7
 801e9f4:	0801eb4f 	.word	0x0801eb4f
  uint16_t len = 0U;
 801e9f8:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 801e9fa:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 801e9fc:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 801ea00:	0a0b      	lsrs	r3, r1, #8
 801ea02:	3b01      	subs	r3, #1
 801ea04:	2b06      	cmp	r3, #6
 801ea06:	d8d0      	bhi.n	801e9aa <USBD_StdDevReq+0x16>
 801ea08:	a201      	add	r2, pc, #4	@ (adr r2, 801ea10 <USBD_StdDevReq+0x7c>)
 801ea0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea0e:	bf00      	nop
 801ea10:	0801ea2d 	.word	0x0801ea2d
 801ea14:	0801ea51 	.word	0x0801ea51
 801ea18:	0801ea6b 	.word	0x0801ea6b
 801ea1c:	0801e9ab 	.word	0x0801e9ab
 801ea20:	0801e9ab 	.word	0x0801e9ab
 801ea24:	0801eac3 	.word	0x0801eac3
 801ea28:	0801ead9 	.word	0x0801ead9
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ea2c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801ea30:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ea32:	7c20      	ldrb	r0, [r4, #16]
 801ea34:	f10d 0106 	add.w	r1, sp, #6
 801ea38:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 801ea3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801ea3e:	88eb      	ldrh	r3, [r5, #6]
 801ea40:	2a00      	cmp	r2, #0
 801ea42:	d05e      	beq.n	801eb02 <USBD_StdDevReq+0x16e>
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d153      	bne.n	801eaf0 <USBD_StdDevReq+0x15c>
        USBD_CtlSendStatus(pdev);
 801ea48:	4620      	mov	r0, r4
 801ea4a:	f000 fa01 	bl	801ee50 <USBD_CtlSendStatus>
 801ea4e:	e7b6      	b.n	801e9be <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ea50:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 801ea52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ea56:	b932      	cbnz	r2, 801ea66 <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801ea58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801ea5a:	f10d 0006 	add.w	r0, sp, #6
 801ea5e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ea60:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ea62:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 801ea64:	e7e9      	b.n	801ea3a <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801ea66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ea68:	e7f7      	b.n	801ea5a <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 801ea6a:	b2c9      	uxtb	r1, r1
 801ea6c:	2905      	cmp	r1, #5
 801ea6e:	d81e      	bhi.n	801eaae <USBD_StdDevReq+0x11a>
 801ea70:	e8df f001 	tbb	[pc, r1]
 801ea74:	110d0903 	.word	0x110d0903
 801ea78:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801ea7a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801ea7e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	d1d6      	bne.n	801ea32 <USBD_StdDevReq+0x9e>
 801ea84:	e791      	b.n	801e9aa <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801ea86:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801ea8a:	689b      	ldr	r3, [r3, #8]
 801ea8c:	e7f8      	b.n	801ea80 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ea8e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801ea92:	68db      	ldr	r3, [r3, #12]
 801ea94:	e7f4      	b.n	801ea80 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ea96:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801ea9a:	691b      	ldr	r3, [r3, #16]
 801ea9c:	e7f0      	b.n	801ea80 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ea9e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801eaa2:	695b      	ldr	r3, [r3, #20]
 801eaa4:	e7ec      	b.n	801ea80 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801eaa6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801eaaa:	699b      	ldr	r3, [r3, #24]
 801eaac:	e7e8      	b.n	801ea80 <USBD_StdDevReq+0xec>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 801eaae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801eab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	f43f af78 	beq.w	801e9aa <USBD_StdDevReq+0x16>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 801eaba:	f10d 0206 	add.w	r2, sp, #6
 801eabe:	4798      	blx	r3
  if (err != 0U)
 801eac0:	e7bb      	b.n	801ea3a <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801eac2:	7c03      	ldrb	r3, [r0, #16]
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	f47f af70 	bne.w	801e9aa <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801eaca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801eace:	f10d 0006 	add.w	r0, sp, #6
 801ead2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ead4:	4798      	blx	r3
  if (err != 0U)
 801ead6:	e7b0      	b.n	801ea3a <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ead8:	7c03      	ldrb	r3, [r0, #16]
 801eada:	2b00      	cmp	r3, #0
 801eadc:	f47f af65 	bne.w	801e9aa <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801eae0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 801eae4:	f10d 0006 	add.w	r0, sp, #6
 801eae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801eaea:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801eaec:	2307      	movs	r3, #7
 801eaee:	e7b8      	b.n	801ea62 <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 801eaf0:	429a      	cmp	r2, r3
 801eaf2:	bf28      	it	cs
 801eaf4:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801eaf6:	4601      	mov	r1, r0
 801eaf8:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 801eafa:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801eafe:	f000 f97d 	bl	801edfc <USBD_CtlSendData>
    if (req->wLength == 0U)
 801eb02:	88eb      	ldrh	r3, [r5, #6]
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	f47f af5a 	bne.w	801e9be <USBD_StdDevReq+0x2a>
 801eb0a:	e79d      	b.n	801ea48 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801eb0c:	888b      	ldrh	r3, [r1, #4]
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	f47f af4b 	bne.w	801e9aa <USBD_StdDevReq+0x16>
 801eb14:	88cb      	ldrh	r3, [r1, #6]
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	f47f af47 	bne.w	801e9aa <USBD_StdDevReq+0x16>
 801eb1c:	884d      	ldrh	r5, [r1, #2]
 801eb1e:	2d7f      	cmp	r5, #127	@ 0x7f
 801eb20:	f63f af43 	bhi.w	801e9aa <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801eb24:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801eb28:	2b03      	cmp	r3, #3
 801eb2a:	f43f af3e 	beq.w	801e9aa <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801eb2e:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801eb30:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 801eb32:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801eb36:	f000 fb20 	bl	801f17a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801eb3a:	4620      	mov	r0, r4
 801eb3c:	f000 f988 	bl	801ee50 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 801eb40:	b11d      	cbz	r5, 801eb4a <USBD_StdDevReq+0x1b6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801eb42:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 801eb44:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 801eb48:	e739      	b.n	801e9be <USBD_StdDevReq+0x2a>
 801eb4a:	2301      	movs	r3, #1
 801eb4c:	e7fa      	b.n	801eb44 <USBD_StdDevReq+0x1b0>
  cfgidx = (uint8_t)(req->wValue);
 801eb4e:	7889      	ldrb	r1, [r1, #2]
 801eb50:	4d38      	ldr	r5, [pc, #224]	@ (801ec34 <USBD_StdDevReq+0x2a0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801eb52:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 801eb54:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801eb56:	f63f af28 	bhi.w	801e9aa <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 801eb5a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801eb5e:	2b02      	cmp	r3, #2
 801eb60:	d008      	beq.n	801eb74 <USBD_StdDevReq+0x1e0>
 801eb62:	2b03      	cmp	r3, #3
 801eb64:	d015      	beq.n	801eb92 <USBD_StdDevReq+0x1fe>
        USBD_CtlError(pdev, req);
 801eb66:	f7ff ff09 	bl	801e97c <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 801eb6a:	4620      	mov	r0, r4
 801eb6c:	7829      	ldrb	r1, [r5, #0]
 801eb6e:	f7ff fdf4 	bl	801e75a <USBD_ClrClassConfig>
        break;
 801eb72:	e724      	b.n	801e9be <USBD_StdDevReq+0x2a>
        if (cfgidx)
 801eb74:	2900      	cmp	r1, #0
 801eb76:	f43f af67 	beq.w	801ea48 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 801eb7a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801eb7c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 801eb7e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801eb80:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801eb84:	4620      	mov	r0, r4
 801eb86:	f7ff fddb 	bl	801e740 <USBD_SetClassConfig>
 801eb8a:	2802      	cmp	r0, #2
 801eb8c:	f47f af5c 	bne.w	801ea48 <USBD_StdDevReq+0xb4>
 801eb90:	e70b      	b.n	801e9aa <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 801eb92:	b931      	cbnz	r1, 801eba2 <USBD_StdDevReq+0x20e>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801eb94:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 801eb96:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801eb98:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 801eb9c:	f7ff fddd 	bl	801e75a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801eba0:	e752      	b.n	801ea48 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 801eba2:	6841      	ldr	r1, [r0, #4]
 801eba4:	2901      	cmp	r1, #1
 801eba6:	f43f af4f 	beq.w	801ea48 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ebaa:	b2c9      	uxtb	r1, r1
 801ebac:	f7ff fdd5 	bl	801e75a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801ebb0:	7829      	ldrb	r1, [r5, #0]
 801ebb2:	6061      	str	r1, [r4, #4]
 801ebb4:	e7e6      	b.n	801eb84 <USBD_StdDevReq+0x1f0>
  if (req->wLength != 1U)
 801ebb6:	88ca      	ldrh	r2, [r1, #6]
 801ebb8:	2a01      	cmp	r2, #1
 801ebba:	f47f aef6 	bne.w	801e9aa <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 801ebbe:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801ebc2:	2b02      	cmp	r3, #2
 801ebc4:	d80a      	bhi.n	801ebdc <USBD_StdDevReq+0x248>
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	f43f aeef 	beq.w	801e9aa <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 801ebcc:	4601      	mov	r1, r0
 801ebce:	2300      	movs	r3, #0
 801ebd0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801ebd4:	4620      	mov	r0, r4
 801ebd6:	f000 f911 	bl	801edfc <USBD_CtlSendData>
      break;
 801ebda:	e6f0      	b.n	801e9be <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 801ebdc:	2b03      	cmp	r3, #3
 801ebde:	f47f aee4 	bne.w	801e9aa <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801ebe2:	1d01      	adds	r1, r0, #4
 801ebe4:	e7f6      	b.n	801ebd4 <USBD_StdDevReq+0x240>
  switch (pdev->dev_state)
 801ebe6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801ebea:	3b01      	subs	r3, #1
 801ebec:	2b02      	cmp	r3, #2
 801ebee:	f63f aedc 	bhi.w	801e9aa <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 801ebf2:	88ca      	ldrh	r2, [r1, #6]
 801ebf4:	2a02      	cmp	r2, #2
 801ebf6:	f47f aed8 	bne.w	801e9aa <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 801ebfa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 801ebfe:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	bf0c      	ite	eq
 801ec04:	2301      	moveq	r3, #1
 801ec06:	2303      	movne	r3, #3
 801ec08:	f841 3f0c 	str.w	r3, [r1, #12]!
 801ec0c:	e7e2      	b.n	801ebd4 <USBD_StdDevReq+0x240>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ec0e:	884b      	ldrh	r3, [r1, #2]
 801ec10:	2b01      	cmp	r3, #1
 801ec12:	f47f aed4 	bne.w	801e9be <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 801ec16:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 801ec1a:	e715      	b.n	801ea48 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 801ec1c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801ec20:	3b01      	subs	r3, #1
 801ec22:	2b02      	cmp	r3, #2
 801ec24:	f63f aec1 	bhi.w	801e9aa <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ec28:	884b      	ldrh	r3, [r1, #2]
 801ec2a:	2b01      	cmp	r3, #1
 801ec2c:	f47f aec7 	bne.w	801e9be <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 801ec30:	2300      	movs	r3, #0
 801ec32:	e7f0      	b.n	801ec16 <USBD_StdDevReq+0x282>
 801ec34:	200001fb 	.word	0x200001fb

0801ec38 <USBD_StdItfReq>:
{
 801ec38:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ec3a:	780b      	ldrb	r3, [r1, #0]
{
 801ec3c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ec3e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 801ec42:	065b      	lsls	r3, r3, #25
{
 801ec44:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ec46:	d501      	bpl.n	801ec4c <USBD_StdItfReq+0x14>
 801ec48:	2a40      	cmp	r2, #64	@ 0x40
 801ec4a:	d115      	bne.n	801ec78 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 801ec4c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 801ec50:	3b01      	subs	r3, #1
 801ec52:	2b02      	cmp	r3, #2
 801ec54:	d810      	bhi.n	801ec78 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801ec56:	792b      	ldrb	r3, [r5, #4]
 801ec58:	2b01      	cmp	r3, #1
 801ec5a:	d80d      	bhi.n	801ec78 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ec5c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 801ec60:	4629      	mov	r1, r5
 801ec62:	689b      	ldr	r3, [r3, #8]
 801ec64:	4620      	mov	r0, r4
 801ec66:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 801ec68:	88eb      	ldrh	r3, [r5, #6]
 801ec6a:	b91b      	cbnz	r3, 801ec74 <USBD_StdItfReq+0x3c>
 801ec6c:	b910      	cbnz	r0, 801ec74 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 801ec6e:	4620      	mov	r0, r4
 801ec70:	f000 f8ee 	bl	801ee50 <USBD_CtlSendStatus>
}
 801ec74:	2000      	movs	r0, #0
 801ec76:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 801ec78:	4620      	mov	r0, r4
 801ec7a:	f7ff fe7f 	bl	801e97c <USBD_CtlError.constprop.0>
          break;
 801ec7e:	e7f9      	b.n	801ec74 <USBD_StdItfReq+0x3c>

0801ec80 <USBD_StdEPReq>:
{
 801ec80:	b538      	push	{r3, r4, r5, lr}
 801ec82:	780a      	ldrb	r2, [r1, #0]
 801ec84:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 801ec86:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ec8a:	2a20      	cmp	r2, #32
{
 801ec8c:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 801ec8e:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ec90:	d006      	beq.n	801eca0 <USBD_StdEPReq+0x20>
 801ec92:	2a40      	cmp	r2, #64	@ 0x40
 801ec94:	d004      	beq.n	801eca0 <USBD_StdEPReq+0x20>
 801ec96:	b15a      	cbz	r2, 801ecb0 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 801ec98:	4620      	mov	r0, r4
 801ec9a:	f7ff fe6f 	bl	801e97c <USBD_CtlError.constprop.0>
              break;
 801ec9e:	e005      	b.n	801ecac <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 801eca0:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 801eca4:	4619      	mov	r1, r3
 801eca6:	4620      	mov	r0, r4
 801eca8:	6892      	ldr	r2, [r2, #8]
 801ecaa:	4790      	blx	r2
}
 801ecac:	2000      	movs	r0, #0
 801ecae:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 801ecb0:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 801ecb2:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 801ecb4:	2a01      	cmp	r2, #1
 801ecb6:	d035      	beq.n	801ed24 <USBD_StdEPReq+0xa4>
 801ecb8:	2a03      	cmp	r2, #3
 801ecba:	d021      	beq.n	801ed00 <USBD_StdEPReq+0x80>
 801ecbc:	2a00      	cmp	r2, #0
 801ecbe:	d1eb      	bne.n	801ec98 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 801ecc0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801ecc4:	2b02      	cmp	r3, #2
 801ecc6:	d044      	beq.n	801ed52 <USBD_StdEPReq+0xd2>
 801ecc8:	2b03      	cmp	r3, #3
 801ecca:	d1e5      	bne.n	801ec98 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 801eccc:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801ecce:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 801ecd2:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801ecd6:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 801ecda:	d04b      	beq.n	801ed74 <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801ecdc:	699b      	ldr	r3, [r3, #24]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d0da      	beq.n	801ec98 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ece2:	2514      	movs	r5, #20
 801ece4:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 801ece8:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801ecec:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ecee:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801ecf0:	d04b      	beq.n	801ed8a <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801ecf2:	4620      	mov	r0, r4
 801ecf4:	f000 fa30 	bl	801f158 <USBD_LL_IsStallEP>
 801ecf8:	2800      	cmp	r0, #0
 801ecfa:	d04b      	beq.n	801ed94 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 801ecfc:	2301      	movs	r3, #1
 801ecfe:	e045      	b.n	801ed8c <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 801ed00:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 801ed04:	2a02      	cmp	r2, #2
 801ed06:	d01b      	beq.n	801ed40 <USBD_StdEPReq+0xc0>
 801ed08:	2a03      	cmp	r2, #3
 801ed0a:	d1c5      	bne.n	801ec98 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ed0c:	885a      	ldrh	r2, [r3, #2]
 801ed0e:	b92a      	cbnz	r2, 801ed1c <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 801ed10:	064a      	lsls	r2, r1, #25
 801ed12:	d003      	beq.n	801ed1c <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801ed14:	88db      	ldrh	r3, [r3, #6]
 801ed16:	b90b      	cbnz	r3, 801ed1c <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 801ed18:	f000 fa0c 	bl	801f134 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 801ed1c:	4620      	mov	r0, r4
 801ed1e:	f000 f897 	bl	801ee50 <USBD_CtlSendStatus>
              break;
 801ed22:	e7c3      	b.n	801ecac <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 801ed24:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 801ed28:	2a02      	cmp	r2, #2
 801ed2a:	d009      	beq.n	801ed40 <USBD_StdEPReq+0xc0>
 801ed2c:	2a03      	cmp	r2, #3
 801ed2e:	d1b3      	bne.n	801ec98 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ed30:	885b      	ldrh	r3, [r3, #2]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d1ba      	bne.n	801ecac <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 801ed36:	064d      	lsls	r5, r1, #25
 801ed38:	d0f0      	beq.n	801ed1c <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801ed3a:	f000 fa04 	bl	801f146 <USBD_LL_ClearStallEP>
 801ed3e:	e7ed      	b.n	801ed1c <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ed40:	064b      	lsls	r3, r1, #25
 801ed42:	d0a9      	beq.n	801ec98 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 801ed44:	f000 f9f6 	bl	801f134 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801ed48:	2180      	movs	r1, #128	@ 0x80
 801ed4a:	4620      	mov	r0, r4
 801ed4c:	f000 f9f2 	bl	801f134 <USBD_LL_StallEP>
 801ed50:	e7ac      	b.n	801ecac <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ed52:	064a      	lsls	r2, r1, #25
 801ed54:	d1a0      	bne.n	801ec98 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ed56:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 801ed58:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ed5c:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ed60:	bf4c      	ite	mi
 801ed62:	f100 0114 	addmi.w	r1, r0, #20
 801ed66:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 801ed6a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ed6c:	4620      	mov	r0, r4
 801ed6e:	f000 f845 	bl	801edfc <USBD_CtlSendData>
              break;
 801ed72:	e79b      	b.n	801ecac <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801ed74:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	d08d      	beq.n	801ec98 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ed7c:	2514      	movs	r5, #20
 801ed7e:	fb05 0501 	mla	r5, r5, r1, r0
 801ed82:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801ed86:	2900      	cmp	r1, #0
 801ed88:	d1b3      	bne.n	801ecf2 <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 801ed8a:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 801ed8c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ed8e:	2202      	movs	r2, #2
 801ed90:	4629      	mov	r1, r5
 801ed92:	e7eb      	b.n	801ed6c <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 801ed94:	6028      	str	r0, [r5, #0]
 801ed96:	e7fa      	b.n	801ed8e <USBD_StdEPReq+0x10e>

0801ed98 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 801ed98:	780b      	ldrb	r3, [r1, #0]
 801ed9a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801ed9c:	784b      	ldrb	r3, [r1, #1]
 801ed9e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801eda0:	884b      	ldrh	r3, [r1, #2]
 801eda2:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801eda4:	888b      	ldrh	r3, [r1, #4]
 801eda6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801eda8:	88cb      	ldrh	r3, [r1, #6]
 801edaa:	80c3      	strh	r3, [r0, #6]
}
 801edac:	4770      	bx	lr

0801edae <USBD_CtlError>:
{
 801edae:	b510      	push	{r4, lr}
 801edb0:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 801edb2:	2180      	movs	r1, #128	@ 0x80
 801edb4:	f000 f9be 	bl	801f134 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801edb8:	4620      	mov	r0, r4
}
 801edba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 801edbe:	2100      	movs	r1, #0
 801edc0:	f000 b9b8 	b.w	801f134 <USBD_LL_StallEP>

0801edc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801edc4:	b570      	push	{r4, r5, r6, lr}
 801edc6:	460d      	mov	r5, r1
 801edc8:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 801edca:	4604      	mov	r4, r0
 801edcc:	b170      	cbz	r0, 801edec <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 801edce:	f7fd f9bd 	bl	801c14c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801edd2:	b2c3      	uxtb	r3, r0
 801edd4:	3301      	adds	r3, #1
 801edd6:	005b      	lsls	r3, r3, #1
 801edd8:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801edda:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801eddc:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 801edde:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801ede0:	706b      	strb	r3, [r5, #1]
 801ede2:	2302      	movs	r3, #2
 801ede4:	3c01      	subs	r4, #1
    while (*desc != '\0')
 801ede6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801edea:	b901      	cbnz	r1, 801edee <USBD_GetString+0x2a>
}
 801edec:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 801edee:	1c5a      	adds	r2, r3, #1
 801edf0:	54e9      	strb	r1, [r5, r3]
 801edf2:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 801edf4:	3302      	adds	r3, #2
 801edf6:	b2db      	uxtb	r3, r3
 801edf8:	54a8      	strb	r0, [r5, r2]
 801edfa:	e7f4      	b.n	801ede6 <USBD_GetString+0x22>

0801edfc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801edfc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801edfe:	2202      	movs	r2, #2
{
 801ee00:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 801ee02:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801ee06:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ee0a:	460a      	mov	r2, r1
 801ee0c:	2100      	movs	r1, #0
 801ee0e:	f000 f9bd 	bl	801f18c <USBD_LL_Transmit>

  return USBD_OK;
}
 801ee12:	2000      	movs	r0, #0
 801ee14:	bd10      	pop	{r4, pc}

0801ee16 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801ee16:	b508      	push	{r3, lr}
 801ee18:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ee1a:	460a      	mov	r2, r1
 801ee1c:	2100      	movs	r1, #0
 801ee1e:	f000 f9b5 	bl	801f18c <USBD_LL_Transmit>

  return USBD_OK;
}
 801ee22:	2000      	movs	r0, #0
 801ee24:	bd08      	pop	{r3, pc}

0801ee26 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801ee26:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801ee28:	2203      	movs	r2, #3
{
 801ee2a:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 801ee2c:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801ee30:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ee34:	460a      	mov	r2, r1
 801ee36:	2100      	movs	r1, #0
 801ee38:	f000 f9b1 	bl	801f19e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801ee3c:	2000      	movs	r0, #0
 801ee3e:	bd10      	pop	{r4, pc}

0801ee40 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801ee40:	b508      	push	{r3, lr}
 801ee42:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ee44:	460a      	mov	r2, r1
 801ee46:	2100      	movs	r1, #0
 801ee48:	f000 f9a9 	bl	801f19e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801ee4c:	2000      	movs	r0, #0
 801ee4e:	bd08      	pop	{r3, pc}

0801ee50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801ee50:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801ee52:	2304      	movs	r3, #4
 801ee54:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801ee58:	2300      	movs	r3, #0
 801ee5a:	461a      	mov	r2, r3
 801ee5c:	4619      	mov	r1, r3
 801ee5e:	f000 f995 	bl	801f18c <USBD_LL_Transmit>

  return USBD_OK;
}
 801ee62:	2000      	movs	r0, #0
 801ee64:	bd08      	pop	{r3, pc}

0801ee66 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801ee66:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801ee68:	2305      	movs	r3, #5
 801ee6a:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801ee6e:	2300      	movs	r3, #0
 801ee70:	461a      	mov	r2, r3
 801ee72:	4619      	mov	r1, r3
 801ee74:	f000 f993 	bl	801f19e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801ee78:	2000      	movs	r0, #0
 801ee7a:	bd08      	pop	{r3, pc}

0801ee7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801ee7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801ee7e:	2200      	movs	r2, #0
 801ee80:	490e      	ldr	r1, [pc, #56]	@ (801eebc <MX_USB_DEVICE_Init+0x40>)
 801ee82:	480f      	ldr	r0, [pc, #60]	@ (801eec0 <MX_USB_DEVICE_Init+0x44>)
 801ee84:	f7ff fc2f 	bl	801e6e6 <USBD_Init>
 801ee88:	b108      	cbz	r0, 801ee8e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 801ee8a:	f7fd f9ed 	bl	801c268 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 801ee8e:	490d      	ldr	r1, [pc, #52]	@ (801eec4 <MX_USB_DEVICE_Init+0x48>)
 801ee90:	480b      	ldr	r0, [pc, #44]	@ (801eec0 <MX_USB_DEVICE_Init+0x44>)
 801ee92:	f7ff fc3d 	bl	801e710 <USBD_RegisterClass>
 801ee96:	b108      	cbz	r0, 801ee9c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 801ee98:	f7fd f9e6 	bl	801c268 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 801ee9c:	490a      	ldr	r1, [pc, #40]	@ (801eec8 <MX_USB_DEVICE_Init+0x4c>)
 801ee9e:	4808      	ldr	r0, [pc, #32]	@ (801eec0 <MX_USB_DEVICE_Init+0x44>)
 801eea0:	f7ff fc1c 	bl	801e6dc <USBD_DFU_RegisterMedia>
 801eea4:	b108      	cbz	r0, 801eeaa <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 801eea6:	f7fd f9df 	bl	801c268 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801eeaa:	4805      	ldr	r0, [pc, #20]	@ (801eec0 <MX_USB_DEVICE_Init+0x44>)
 801eeac:	f7ff fc37 	bl	801e71e <USBD_Start>
 801eeb0:	b118      	cbz	r0, 801eeba <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801eeb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 801eeb6:	f7fd b9d7 	b.w	801c268 <Error_Handler>
}
 801eeba:	bd08      	pop	{r3, pc}
 801eebc:	200000a4 	.word	0x200000a4
 801eec0:	200001fc 	.word	0x200001fc
 801eec4:	20000034 	.word	0x20000034
 801eec8:	200000c0 	.word	0x200000c0

0801eecc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801eecc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 801eece:	4801      	ldr	r0, [pc, #4]	@ (801eed4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 801eed0:	800b      	strh	r3, [r1, #0]
}
 801eed2:	4770      	bx	lr
 801eed4:	20000090 	.word	0x20000090

0801eed8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801eed8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 801eeda:	4801      	ldr	r0, [pc, #4]	@ (801eee0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 801eedc:	800b      	strh	r3, [r1, #0]
}
 801eede:	4770      	bx	lr
 801eee0:	2000008c 	.word	0x2000008c

0801eee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801eee4:	2300      	movs	r3, #0
 801eee6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 801eee8:	461e      	mov	r6, r3
 801eeea:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 801eeec:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 801eeee:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 801eef2:	bf34      	ite	cc
 801eef4:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801eef6:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 801eef8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 801eefc:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 801ef00:	3301      	adds	r3, #1
 801ef02:	b2dc      	uxtb	r4, r3
 801ef04:	42a2      	cmp	r2, r4
    value = value << 4;
 801ef06:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 801ef0a:	d8ef      	bhi.n	801eeec <IntToUnicode+0x8>
  }
}
 801ef0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ef10 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 801ef10:	231a      	movs	r3, #26
{
 801ef12:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 801ef14:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ef16:	4b0a      	ldr	r3, [pc, #40]	@ (801ef40 <USBD_FS_SerialStrDescriptor+0x30>)
 801ef18:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 801ef1c:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 801ef20:	1880      	adds	r0, r0, r2
 801ef22:	d00a      	beq.n	801ef3a <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ef24:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ef28:	4906      	ldr	r1, [pc, #24]	@ (801ef44 <USBD_FS_SerialStrDescriptor+0x34>)
 801ef2a:	2208      	movs	r2, #8
 801ef2c:	f7ff ffda 	bl	801eee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ef30:	2204      	movs	r2, #4
 801ef32:	4620      	mov	r0, r4
 801ef34:	3110      	adds	r1, #16
 801ef36:	f7ff ffd5 	bl	801eee4 <IntToUnicode>
}
 801ef3a:	4803      	ldr	r0, [pc, #12]	@ (801ef48 <USBD_FS_SerialStrDescriptor+0x38>)
 801ef3c:	bd10      	pop	{r4, pc}
 801ef3e:	bf00      	nop
 801ef40:	1ffff000 	.word	0x1ffff000
 801ef44:	20000072 	.word	0x20000072
 801ef48:	20000070 	.word	0x20000070

0801ef4c <USBD_FS_ManufacturerStrDescriptor>:
{
 801ef4c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ef4e:	4c04      	ldr	r4, [pc, #16]	@ (801ef60 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 801ef50:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ef52:	4804      	ldr	r0, [pc, #16]	@ (801ef64 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 801ef54:	4621      	mov	r1, r4
 801ef56:	f7ff ff35 	bl	801edc4 <USBD_GetString>
}
 801ef5a:	4620      	mov	r0, r4
 801ef5c:	bd10      	pop	{r4, pc}
 801ef5e:	bf00      	nop
 801ef60:	200004c0 	.word	0x200004c0
 801ef64:	0801f24e 	.word	0x0801f24e

0801ef68 <USBD_FS_ProductStrDescriptor>:
{
 801ef68:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ef6a:	4c04      	ldr	r4, [pc, #16]	@ (801ef7c <USBD_FS_ProductStrDescriptor+0x14>)
{
 801ef6c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ef6e:	4804      	ldr	r0, [pc, #16]	@ (801ef80 <USBD_FS_ProductStrDescriptor+0x18>)
 801ef70:	4621      	mov	r1, r4
 801ef72:	f7ff ff27 	bl	801edc4 <USBD_GetString>
}
 801ef76:	4620      	mov	r0, r4
 801ef78:	bd10      	pop	{r4, pc}
 801ef7a:	bf00      	nop
 801ef7c:	200004c0 	.word	0x200004c0
 801ef80:	0801f259 	.word	0x0801f259

0801ef84 <USBD_FS_ConfigStrDescriptor>:
{
 801ef84:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ef86:	4c04      	ldr	r4, [pc, #16]	@ (801ef98 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 801ef88:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ef8a:	4804      	ldr	r0, [pc, #16]	@ (801ef9c <USBD_FS_ConfigStrDescriptor+0x18>)
 801ef8c:	4621      	mov	r1, r4
 801ef8e:	f7ff ff19 	bl	801edc4 <USBD_GetString>
}
 801ef92:	4620      	mov	r0, r4
 801ef94:	bd10      	pop	{r4, pc}
 801ef96:	bf00      	nop
 801ef98:	200004c0 	.word	0x200004c0
 801ef9c:	0801f26b 	.word	0x0801f26b

0801efa0 <USBD_FS_InterfaceStrDescriptor>:
{
 801efa0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801efa2:	4c04      	ldr	r4, [pc, #16]	@ (801efb4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 801efa4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801efa6:	4804      	ldr	r0, [pc, #16]	@ (801efb8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 801efa8:	4621      	mov	r1, r4
 801efaa:	f7ff ff0b 	bl	801edc4 <USBD_GetString>
}
 801efae:	4620      	mov	r0, r4
 801efb0:	bd10      	pop	{r4, pc}
 801efb2:	bf00      	nop
 801efb4:	200004c0 	.word	0x200004c0
 801efb8:	0801f276 	.word	0x0801f276

0801efbc <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
  /* USER CODE END 0 */
}
 801efbc:	2000      	movs	r0, #0
 801efbe:	4770      	bx	lr

0801efc0 <MEM_If_Erase_FS>:
{
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
  /* USER CODE END 2 */
}
 801efc0:	2000      	movs	r0, #0
 801efc2:	4770      	bx	lr

0801efc4 <MEM_If_Write_FS>:
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
  /* USER CODE END 3 */
}
 801efc4:	2000      	movs	r0, #0
 801efc6:	4770      	bx	lr

0801efc8 <MEM_If_Read_FS>:
{
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
  /* USER CODE END 4 */
}
 801efc8:	2000      	movs	r0, #0
 801efca:	4770      	bx	lr

0801efcc <MEM_If_GetStatus_FS>:

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 801efcc:	2000      	movs	r0, #0
 801efce:	4770      	bx	lr

0801efd0 <MEM_If_DeInit_FS>:
uint16_t MEM_If_DeInit_FS(void)
 801efd0:	2000      	movs	r0, #0
 801efd2:	4770      	bx	lr

0801efd4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 801efd4:	b118      	cbz	r0, 801efde <USBD_Get_USB_Status+0xa>
 801efd6:	2802      	cmp	r0, #2
 801efd8:	bf0c      	ite	eq
 801efda:	2001      	moveq	r0, #1
 801efdc:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 801efde:	4770      	bx	lr

0801efe0 <HAL_PCD_MspInit>:
{
 801efe0:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 801efe2:	4b0e      	ldr	r3, [pc, #56]	@ (801f01c <HAL_PCD_MspInit+0x3c>)
 801efe4:	6802      	ldr	r2, [r0, #0]
 801efe6:	429a      	cmp	r2, r3
 801efe8:	d115      	bne.n	801f016 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 801efea:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 801efee:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 801eff0:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 801eff2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 801eff6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 801eff8:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 801effa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 801effc:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 801effe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f002:	9301      	str	r3, [sp, #4]
 801f004:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 801f006:	f7fd f9f7 	bl	801c3f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 801f00a:	2014      	movs	r0, #20
}
 801f00c:	b003      	add	sp, #12
 801f00e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 801f012:	f7fd ba21 	b.w	801c458 <HAL_NVIC_EnableIRQ>
}
 801f016:	b003      	add	sp, #12
 801f018:	f85d fb04 	ldr.w	pc, [sp], #4
 801f01c:	40005c00 	.word	0x40005c00

0801f020 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f020:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 801f024:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 801f028:	f7ff bb9e 	b.w	801e768 <USBD_LL_SetupStage>

0801f02c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f02c:	2328      	movs	r3, #40	@ 0x28
 801f02e:	fb03 0301 	mla	r3, r3, r1, r0
 801f032:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 801f036:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 801f03a:	f7ff bbc2 	b.w	801e7c2 <USBD_LL_DataOutStage>

0801f03e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f03e:	2328      	movs	r3, #40	@ 0x28
 801f040:	fb03 0301 	mla	r3, r3, r1, r0
 801f044:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 801f048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f04a:	f7ff bbf2 	b.w	801e832 <USBD_LL_DataInStage>

0801f04e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f04e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 801f052:	f7ff bc87 	b.w	801e964 <USBD_LL_SOF>

0801f056 <HAL_PCD_ResetCallback>:
{
 801f056:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801f058:	7983      	ldrb	r3, [r0, #6]
{
 801f05a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801f05c:	2b02      	cmp	r3, #2
 801f05e:	d001      	beq.n	801f064 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 801f060:	f7fd f902 	bl	801c268 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f064:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 801f068:	2101      	movs	r1, #1
 801f06a:	f7ff fc65 	bl	801e938 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f06e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 801f072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f076:	f7ff bc38 	b.w	801e8ea <USBD_LL_Reset>
	...

0801f07c <HAL_PCD_SuspendCallback>:
{
 801f07c:	b510      	push	{r4, lr}
 801f07e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f080:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 801f084:	f7ff fc5b 	bl	801e93e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 801f088:	7aa3      	ldrb	r3, [r4, #10]
 801f08a:	b123      	cbz	r3, 801f096 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f08c:	4a02      	ldr	r2, [pc, #8]	@ (801f098 <HAL_PCD_SuspendCallback+0x1c>)
 801f08e:	6913      	ldr	r3, [r2, #16]
 801f090:	f043 0306 	orr.w	r3, r3, #6
 801f094:	6113      	str	r3, [r2, #16]
}
 801f096:	bd10      	pop	{r4, pc}
 801f098:	e000ed00 	.word	0xe000ed00

0801f09c <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801f09c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 801f0a0:	f7ff bc56 	b.w	801e950 <USBD_LL_Resume>

0801f0a4 <USBD_LL_Init>:
{
 801f0a4:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 801f0a6:	4b12      	ldr	r3, [pc, #72]	@ (801f0f0 <USBD_LL_Init+0x4c>)
{
 801f0a8:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 801f0aa:	4812      	ldr	r0, [pc, #72]	@ (801f0f4 <USBD_LL_Init+0x50>)
  hpcd_USB_FS.Instance = USB;
 801f0ac:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801f0ae:	2308      	movs	r3, #8
 801f0b0:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801f0b2:	2302      	movs	r3, #2
 801f0b4:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801f0b6:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 801f0b8:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 801f0bc:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801f0c0:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801f0c2:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801f0c4:	f7fd facc 	bl	801c660 <HAL_PCD_Init>
 801f0c8:	b108      	cbz	r0, 801f0ce <USBD_LL_Init+0x2a>
    Error_Handler( );
 801f0ca:	f7fd f8cd 	bl	801c268 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801f0ce:	2200      	movs	r2, #0
 801f0d0:	2318      	movs	r3, #24
 801f0d2:	4611      	mov	r1, r2
 801f0d4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 801f0d8:	f7fe f935 	bl	801d346 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801f0dc:	2358      	movs	r3, #88	@ 0x58
 801f0de:	2200      	movs	r2, #0
 801f0e0:	2180      	movs	r1, #128	@ 0x80
 801f0e2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 801f0e6:	f7fe f92e 	bl	801d346 <HAL_PCDEx_PMAConfig>
}
 801f0ea:	2000      	movs	r0, #0
 801f0ec:	bd10      	pop	{r4, pc}
 801f0ee:	bf00      	nop
 801f0f0:	40005c00 	.word	0x40005c00
 801f0f4:	20000ae0 	.word	0x20000ae0

0801f0f8 <USBD_LL_Start>:
{
 801f0f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 801f0fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 801f0fe:	f7fd fb12 	bl	801c726 <HAL_PCD_Start>
}
 801f102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 801f106:	f7ff bf65 	b.w	801efd4 <USBD_Get_USB_Status>

0801f10a <USBD_LL_Stop>:
{
 801f10a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 801f10c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 801f110:	f7fd fb22 	bl	801c758 <HAL_PCD_Stop>
}
 801f114:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 801f118:	f7ff bf5c 	b.w	801efd4 <USBD_Get_USB_Status>

0801f11c <USBD_LL_OpenEP>:
{
 801f11c:	b510      	push	{r4, lr}
 801f11e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f120:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 801f124:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801f126:	4623      	mov	r3, r4
 801f128:	f7fe f846 	bl	801d1b8 <HAL_PCD_EP_Open>
}
 801f12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 801f130:	f7ff bf50 	b.w	801efd4 <USBD_Get_USB_Status>

0801f134 <USBD_LL_StallEP>:
{
 801f134:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801f136:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 801f13a:	f7fe f89c 	bl	801d276 <HAL_PCD_EP_SetStall>
}
 801f13e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 801f142:	f7ff bf47 	b.w	801efd4 <USBD_Get_USB_Status>

0801f146 <USBD_LL_ClearStallEP>:
{
 801f146:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801f148:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 801f14c:	f7fe f8c9 	bl	801d2e2 <HAL_PCD_EP_ClrStall>
}
 801f150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 801f154:	f7ff bf3e 	b.w	801efd4 <USBD_Get_USB_Status>

0801f158 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f158:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 801f15a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801f15e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801f162:	bf1b      	ittet	ne
 801f164:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 801f168:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801f16c:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801f170:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801f172:	bf08      	it	eq
 801f174:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 801f178:	4770      	bx	lr

0801f17a <USBD_LL_SetUSBAddress>:
{
 801f17a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801f17c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 801f180:	f7fd fb03 	bl	801c78a <HAL_PCD_SetAddress>
}
 801f184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 801f188:	f7ff bf24 	b.w	801efd4 <USBD_Get_USB_Status>

0801f18c <USBD_LL_Transmit>:
{
 801f18c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801f18e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 801f192:	f7fe f858 	bl	801d246 <HAL_PCD_EP_Transmit>
}
 801f196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 801f19a:	f7ff bf1b 	b.w	801efd4 <USBD_Get_USB_Status>

0801f19e <USBD_LL_PrepareReceive>:
{
 801f19e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801f1a0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 801f1a4:	f7fe f838 	bl	801d218 <HAL_PCD_EP_Receive>
}
 801f1a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 801f1ac:	f7ff bf12 	b.w	801efd4 <USBD_Get_USB_Status>

0801f1b0 <USBD_static_malloc>:
}
 801f1b0:	4800      	ldr	r0, [pc, #0]	@ (801f1b4 <USBD_static_malloc+0x4>)
 801f1b2:	4770      	bx	lr
 801f1b4:	200006c0 	.word	0x200006c0

0801f1b8 <USBD_static_free>:
}
 801f1b8:	4770      	bx	lr

0801f1ba <HAL_PCDEx_SetConnectionState>:
}
 801f1ba:	4770      	bx	lr

0801f1bc <memset>:
 801f1bc:	4603      	mov	r3, r0
 801f1be:	4402      	add	r2, r0
 801f1c0:	4293      	cmp	r3, r2
 801f1c2:	d100      	bne.n	801f1c6 <memset+0xa>
 801f1c4:	4770      	bx	lr
 801f1c6:	f803 1b01 	strb.w	r1, [r3], #1
 801f1ca:	e7f9      	b.n	801f1c0 <memset+0x4>

0801f1cc <__libc_init_array>:
 801f1cc:	b570      	push	{r4, r5, r6, lr}
 801f1ce:	2600      	movs	r6, #0
 801f1d0:	4d0c      	ldr	r5, [pc, #48]	@ (801f204 <__libc_init_array+0x38>)
 801f1d2:	4c0d      	ldr	r4, [pc, #52]	@ (801f208 <__libc_init_array+0x3c>)
 801f1d4:	1b64      	subs	r4, r4, r5
 801f1d6:	10a4      	asrs	r4, r4, #2
 801f1d8:	42a6      	cmp	r6, r4
 801f1da:	d109      	bne.n	801f1f0 <__libc_init_array+0x24>
 801f1dc:	f000 f81a 	bl	801f214 <_init>
 801f1e0:	2600      	movs	r6, #0
 801f1e2:	4d0a      	ldr	r5, [pc, #40]	@ (801f20c <__libc_init_array+0x40>)
 801f1e4:	4c0a      	ldr	r4, [pc, #40]	@ (801f210 <__libc_init_array+0x44>)
 801f1e6:	1b64      	subs	r4, r4, r5
 801f1e8:	10a4      	asrs	r4, r4, #2
 801f1ea:	42a6      	cmp	r6, r4
 801f1ec:	d105      	bne.n	801f1fa <__libc_init_array+0x2e>
 801f1ee:	bd70      	pop	{r4, r5, r6, pc}
 801f1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f1f4:	4798      	blx	r3
 801f1f6:	3601      	adds	r6, #1
 801f1f8:	e7ee      	b.n	801f1d8 <__libc_init_array+0xc>
 801f1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801f1fe:	4798      	blx	r3
 801f200:	3601      	adds	r6, #1
 801f202:	e7f2      	b.n	801f1ea <__libc_init_array+0x1e>
 801f204:	0801f2c8 	.word	0x0801f2c8
 801f208:	0801f2c8 	.word	0x0801f2c8
 801f20c:	0801f2c8 	.word	0x0801f2c8
 801f210:	0801f2cc 	.word	0x0801f2cc

0801f214 <_init>:
 801f214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f216:	bf00      	nop
 801f218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f21a:	bc08      	pop	{r3}
 801f21c:	469e      	mov	lr, r3
 801f21e:	4770      	bx	lr

0801f220 <_fini>:
 801f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f222:	bf00      	nop
 801f224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f226:	bc08      	pop	{r3}
 801f228:	469e      	mov	lr, r3
 801f22a:	4770      	bx	lr
